/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreSubscriptionsApi_H_
#define _SWG_SWGStoreSubscriptionsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGPageResource«SubscriptionResource».h"
#include "SWGPageResource«SubscriptionTemplateResource».h"
#include "SWGResult.h"
#include "SWGSubscriptionResource.h"
#include "SWGSubscriptionTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGStoreSubscriptionsApi: public QObject {
    Q_OBJECT

public:
    SWGStoreSubscriptionsApi();
    SWGStoreSubscriptionsApi(QString host, QString basePath);
    ~SWGStoreSubscriptionsApi();

    QString host;
    QString basePath;

    void createSubscription(SWGSubscriptionResource subscription_resource);
    void createSubscriptionTemplate(SWGSubscriptionTemplateResource subscription_template_resource);
    void deleteSubscription(qint32 id, QString* plan_id);
    void deleteSubscriptionTemplate(QString* id, QString* cascade);
    void getSubscription(qint32 id);
    void getSubscriptionTemplate(QString* id);
    void getSubscriptionTemplates(qint32 size, qint32 page, QString* order);
    void getSubscriptions(qint32 size, qint32 page, QString* order);
    void processSubscriptions();
    void updateSubscription(qint32 id, SWGSubscriptionResource subscription_resource);
    void updateSubscriptionTemplate(QString* id, SWGSubscriptionTemplateResource subscription_template_resource);
    
private:
    void createSubscriptionCallback (HttpRequestWorker * worker);
    void createSubscriptionTemplateCallback (HttpRequestWorker * worker);
    void deleteSubscriptionCallback (HttpRequestWorker * worker);
    void deleteSubscriptionTemplateCallback (HttpRequestWorker * worker);
    void getSubscriptionCallback (HttpRequestWorker * worker);
    void getSubscriptionTemplateCallback (HttpRequestWorker * worker);
    void getSubscriptionTemplatesCallback (HttpRequestWorker * worker);
    void getSubscriptionsCallback (HttpRequestWorker * worker);
    void processSubscriptionsCallback (HttpRequestWorker * worker);
    void updateSubscriptionCallback (HttpRequestWorker * worker);
    void updateSubscriptionTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createSubscriptionSignal(SWGSubscriptionResource* summary);
    void createSubscriptionTemplateSignal(SWGSubscriptionTemplateResource* summary);
    void deleteSubscriptionSignal();
    void deleteSubscriptionTemplateSignal();
    void getSubscriptionSignal(SWGSubscriptionResource* summary);
    void getSubscriptionTemplateSignal(SWGSubscriptionTemplateResource* summary);
    void getSubscriptionTemplatesSignal(SWGPageResource«SubscriptionTemplateResource»* summary);
    void getSubscriptionsSignal(SWGPageResource«SubscriptionResource»* summary);
    void processSubscriptionsSignal();
    void updateSubscriptionSignal();
    void updateSubscriptionTemplateSignal(SWGSubscriptionTemplateResource* summary);
    
};
}
#endif
