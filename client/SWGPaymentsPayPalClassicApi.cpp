/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGPaymentsPayPalClassicApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPaymentsPayPalClassicApi::SWGPaymentsPayPalClassicApi() {}

SWGPaymentsPayPalClassicApi::~SWGPaymentsPayPalClassicApi() {}

SWGPaymentsPayPalClassicApi::SWGPaymentsPayPalClassicApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPaymentsPayPalClassicApi::createPayPalBillingAgreementUrl(SWGCreateBillingAgreementRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/paypal/classic/agreements/start");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsPayPalClassicApi::createPayPalBillingAgreementUrlCallback);

    worker->execute(&input);
}

void
SWGPaymentsPayPalClassicApi::createPayPalBillingAgreementUrlCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit createPayPalBillingAgreementUrlSignal(output);
    
}
void
SWGPaymentsPayPalClassicApi::createPayPalExpressCheckout(SWGCreatePayPalPaymentRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/paypal/classic/checkout/start");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsPayPalClassicApi::createPayPalExpressCheckoutCallback);

    worker->execute(&input);
}

void
SWGPaymentsPayPalClassicApi::createPayPalExpressCheckoutCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit createPayPalExpressCheckoutSignal(output);
    
}
void
SWGPaymentsPayPalClassicApi::finalizePayPalBillingAgreement(SWGFinalizeBillingAgreementRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/paypal/classic/agreements/finish");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsPayPalClassicApi::finalizePayPalBillingAgreementCallback);

    worker->execute(&input);
}

void
SWGPaymentsPayPalClassicApi::finalizePayPalBillingAgreementCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint32 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit finalizePayPalBillingAgreementSignal(output);
    
}
void
SWGPaymentsPayPalClassicApi::finalizePayPalCheckout(SWGFinalizePayPalPaymentRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/paypal/classic/checkout/finish");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsPayPalClassicApi::finalizePayPalCheckoutCallback);

    worker->execute(&input);
}

void
SWGPaymentsPayPalClassicApi::finalizePayPalCheckoutCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit finalizePayPalCheckoutSignal();
}
} /* namespace Swagger */
