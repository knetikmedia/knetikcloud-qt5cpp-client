/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGDispositionsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGDispositionsApi::SWGDispositionsApi() {}

SWGDispositionsApi::~SWGDispositionsApi() {}

SWGDispositionsApi::SWGDispositionsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDispositionsApi::addDisposition(SWGDispositionResource disposition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/dispositions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = disposition.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDispositionsApi::addDispositionCallback);

    worker->execute(&input);
}

void
SWGDispositionsApi::addDispositionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGDispositionResource* output = static_cast<SWGDispositionResource*>(create(json, QString("SWGDispositionResource")));
    

    worker->deleteLater();

    emit addDispositionSignal(output);
    
}
void
SWGDispositionsApi::deleteDisposition(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/dispositions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDispositionsApi::deleteDispositionCallback);

    worker->execute(&input);
}

void
SWGDispositionsApi::deleteDispositionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteDispositionSignal();
}
void
SWGDispositionsApi::getDisposition(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/dispositions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDispositionsApi::getDispositionCallback);

    worker->execute(&input);
}

void
SWGDispositionsApi::getDispositionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGDispositionResource* output = static_cast<SWGDispositionResource*>(create(json, QString("SWGDispositionResource")));
    

    worker->deleteLater();

    emit getDispositionSignal(output);
    
}
void
SWGDispositionsApi::getDispositionCounts(QString* filter_context, QString* filter_owner) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/dispositions/count");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_context"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_context)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_owner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_owner)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDispositionsApi::getDispositionCountsCallback);

    worker->execute(&input);
}

void
SWGDispositionsApi::getDispositionCountsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGDispositionCount*>* output = new QList<SWGDispositionCount*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGDispositionCount* o = new SWGDispositionCount();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getDispositionCountsSignal(output);
    
}
void
SWGDispositionsApi::getDispositions(QString* filter_context, QString* filter_owner, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/dispositions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_context"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_context)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_owner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_owner)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDispositionsApi::getDispositionsCallback);

    worker->execute(&input);
}

void
SWGDispositionsApi::getDispositionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«DispositionResource»* output = static_cast<SWGPageResource«DispositionResource»*>(create(json, QString("SWGPageResource«DispositionResource»")));
    

    worker->deleteLater();

    emit getDispositionsSignal(output);
    
}
} /* namespace Swagger */
