/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUsersGroupsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGUsersGroupsApi::SWGUsersGroupsApi() {}

SWGUsersGroupsApi::~SWGUsersGroupsApi() {}

SWGUsersGroupsApi::SWGUsersGroupsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUsersGroupsApi::addMemberToGroup(QString* unique_name, SWGGroupMemberResource username) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}/members");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = username.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::addMemberToGroupCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::addMemberToGroupCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGGroupMemberResource* output = static_cast<SWGGroupMemberResource*>(create(json, QString("SWGGroupMemberResource")));
    

    worker->deleteLater();

    emit addMemberToGroupSignal(output);
    
}
void
SWGUsersGroupsApi::createGroup(SWGGroupResource group_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = group_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::createGroupCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::createGroupCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGGroupResource* output = static_cast<SWGGroupResource*>(create(json, QString("SWGGroupResource")));
    

    worker->deleteLater();

    emit createGroupSignal(output);
    
}
void
SWGUsersGroupsApi::createGroupTemplate(SWGTemplateResource group_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = group_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::createGroupTemplateCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::createGroupTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createGroupTemplateSignal(output);
    
}
void
SWGUsersGroupsApi::deleteGroup(QString* unique_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::deleteGroupCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::deleteGroupCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteGroupSignal();
}
void
SWGUsersGroupsApi::deleteGroupTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::deleteGroupTemplateCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::deleteGroupTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteGroupTemplateSignal();
}
void
SWGUsersGroupsApi::getGroup(QString* unique_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGGroupResource* output = static_cast<SWGGroupResource*>(create(json, QString("SWGGroupResource")));
    

    worker->deleteLater();

    emit getGroupSignal(output);
    
}
void
SWGUsersGroupsApi::getGroupMember(QString* unique_name, qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}/members/{user_id}");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));
    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupMemberCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupMemberCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGGroupMemberResource* output = static_cast<SWGGroupMemberResource*>(create(json, QString("SWGGroupMemberResource")));
    

    worker->deleteLater();

    emit getGroupMemberSignal(output);
    
}
void
SWGUsersGroupsApi::getGroupMembers(QString* unique_name, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}/members");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupMembersCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupMembersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«GroupMemberResource»* output = static_cast<SWGPageResource«GroupMemberResource»*>(create(json, QString("SWGPageResource«GroupMemberResource»")));
    

    worker->deleteLater();

    emit getGroupMembersSignal(output);
    
}
void
SWGUsersGroupsApi::getGroupTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupTemplateCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getGroupTemplateSignal(output);
    
}
void
SWGUsersGroupsApi::getGroupTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupTemplatesCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getGroupTemplatesSignal(output);
    
}
void
SWGUsersGroupsApi::getGroupsForUser(qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/groups");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::getGroupsForUserCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::getGroupsForUserCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getGroupsForUserSignal(output);
    
}
void
SWGUsersGroupsApi::removeGroupMember(QString* unique_name, qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}/members/{user_id}");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));
    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::removeGroupMemberCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::removeGroupMemberCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit removeGroupMemberSignal();
}
void
SWGUsersGroupsApi::updateGroup(QString* unique_name, SWGGroupResource group_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = group_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::updateGroupCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::updateGroupCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateGroupSignal();
}
void
SWGUsersGroupsApi::updateGroupMemberStatus(QString* unique_name, qint32 user_id, QString* status) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/{unique_name}/members/{user_id}/status");

    QString unique_namePathParam("{"); unique_namePathParam.append("unique_name").append("}");
    fullPath.replace(unique_namePathParam, stringValue(unique_name));
    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = status.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::updateGroupMemberStatusCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::updateGroupMemberStatusCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateGroupMemberStatusSignal();
}
void
SWGUsersGroupsApi::updateGroupTemplate(QString* id, SWGTemplateResource group_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = group_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::updateGroupTemplateCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::updateGroupTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateGroupTemplateSignal(output);
    
}
void
SWGUsersGroupsApi::updateGroups(QString* filter_name, QString* filter_unique_name, QString* filter_parent, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/groups");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_unique_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_unique_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_parent"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_parent)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersGroupsApi::updateGroupsCallback);

    worker->execute(&input);
}

void
SWGUsersGroupsApi::updateGroupsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«GroupResource»* output = static_cast<SWGPageResource«GroupResource»*>(create(json, QString("SWGPageResource«GroupResource»")));
    

    worker->deleteLater();

    emit updateGroupsSignal(output);
    
}
} /* namespace Swagger */
