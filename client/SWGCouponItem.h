/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGCouponItem.h
 * 
 * 
 */

#ifndef SWGCouponItem_H_
#define SWGCouponItem_H_

#include <QJsonObject>


#include "SWGBehavior.h"
#include "SWGProperty.h"
#include "SWGSku.h"
#include <QList>
#include <QMap>
#include <QString>

#include "SWGObject.h"


namespace Swagger {

class SWGCouponItem: public SWGObject {
public:
    SWGCouponItem();
    SWGCouponItem(QString* json);
    virtual ~SWGCouponItem();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGCouponItem* fromJson(QString &jsonString);

    QMap<QString, SWGProperty*>* getAdditionalProperties();
    void setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties);

    QList<SWGBehavior*>* getBehaviors();
    void setBehaviors(QList<SWGBehavior*>* behaviors);

    QString* getCategory();
    void setCategory(QString* category);

    QString* getCouponTypeHint();
    void setCouponTypeHint(QString* coupon_type_hint);

    qint64 getCreatedDate();
    void setCreatedDate(qint64 created_date);

    double getDiscountMax();
    void setDiscountMax(double discount_max);

    double getDiscountMinCartValue();
    void setDiscountMinCartValue(double discount_min_cart_value);

    QString* getDiscountType();
    void setDiscountType(QString* discount_type);

    double getDiscountValue();
    void setDiscountValue(double discount_value);

    bool getDisplayable();
    void setDisplayable(bool displayable);

    bool getExclusive();
    void setExclusive(bool exclusive);

    QList<QString*>* getGeoCountryList();
    void setGeoCountryList(QList<QString*>* geo_country_list);

    QString* getGeoPolicyType();
    void setGeoPolicyType(QString* geo_policy_type);

    qint32 getId();
    void setId(qint32 id);

    qint32 getItemId();
    void setItemId(qint32 item_id);

    QString* getLongDescription();
    void setLongDescription(QString* long_description);

    qint32 getMaxQuantity();
    void setMaxQuantity(qint32 max_quantity);

    QString* getName();
    void setName(QString* name);

    bool getSelfExclusive();
    void setSelfExclusive(bool self_exclusive);

    qint32 getShippingTier();
    void setShippingTier(qint32 shipping_tier);

    QString* getShortDescription();
    void setShortDescription(QString* short_description);

    QList<SWGSku*>* getSkus();
    void setSkus(QList<SWGSku*>* skus);

    qint32 getSort();
    void setSort(qint32 sort);

    qint64 getStoreEnd();
    void setStoreEnd(qint64 store_end);

    qint64 getStoreStart();
    void setStoreStart(qint64 store_start);

    QList<QString*>* getTags();
    void setTags(QList<QString*>* tags);

    QString* getTemplate();
    void setTemplate(QString* template);

    QString* getTypeHint();
    void setTypeHint(QString* type_hint);

    QString* getUniqueKey();
    void setUniqueKey(QString* unique_key);

    qint64 getUpdatedDate();
    void setUpdatedDate(qint64 updated_date);

    QList<QString*>* getValidForTags();
    void setValidForTags(QList<QString*>* valid_for_tags);

    qint32 getVendorId();
    void setVendorId(qint32 vendor_id);


private:
    QMap<QString, SWGProperty*>* additional_properties;
    QList<SWGBehavior*>* behaviors;
    QString* category;
    QString* coupon_type_hint;
    qint64 created_date;
    double discount_max;
    double discount_min_cart_value;
    QString* discount_type;
    double discount_value;
    bool displayable;
    bool exclusive;
    QList<QString*>* geo_country_list;
    QString* geo_policy_type;
    qint32 id;
    qint32 item_id;
    QString* long_description;
    qint32 max_quantity;
    QString* name;
    bool self_exclusive;
    qint32 shipping_tier;
    QString* short_description;
    QList<SWGSku*>* skus;
    qint32 sort;
    qint64 store_end;
    qint64 store_start;
    QList<QString*>* tags;
    QString* template;
    QString* type_hint;
    QString* unique_key;
    qint64 updated_date;
    QList<QString*>* valid_for_tags;
    qint32 vendor_id;
};

} /* namespace Swagger */

#endif /* SWGCouponItem_H_ */
