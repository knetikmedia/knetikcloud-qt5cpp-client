/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCatalogSale.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGCatalogSale::SWGCatalogSale(QString* json) {
    init();
    this->fromJson(*json);
}

SWGCatalogSale::SWGCatalogSale() {
    init();
}

SWGCatalogSale::~SWGCatalogSale() {
    this->cleanup();
}

void
SWGCatalogSale::init() {
    currency_code = new QString("");
    discount_type = new QString("");
    discount_value = 0.0;
    id = 0;
    item = 0;
    long_description = new QString("");
    name = new QString("");
    sale_end_date = 0L;
    sale_start_date = 0L;
    short_description = new QString("");
    tag = new QString("");
    vendor = 0;
}

void
SWGCatalogSale::cleanup() {
    
    if(currency_code != nullptr) {
        delete currency_code;
    }

    if(discount_type != nullptr) {
        delete discount_type;
    }




    if(long_description != nullptr) {
        delete long_description;
    }

    if(name != nullptr) {
        delete name;
    }



    if(short_description != nullptr) {
        delete short_description;
    }

    if(tag != nullptr) {
        delete tag;
    }

}

SWGCatalogSale*
SWGCatalogSale::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCatalogSale::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&currency_code, pJson["currency_code"], "QString", "QString");
    ::Swagger::setValue(&discount_type, pJson["discount_type"], "QString", "QString");
    ::Swagger::setValue(&discount_value, pJson["discount_value"], "double", "");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&item, pJson["item"], "qint32", "");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&sale_end_date, pJson["sale_end_date"], "qint64", "");
    ::Swagger::setValue(&sale_start_date, pJson["sale_start_date"], "qint64", "");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&tag, pJson["tag"], "QString", "QString");
    ::Swagger::setValue(&vendor, pJson["vendor"], "qint32", "");
}

QString
SWGCatalogSale::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGCatalogSale::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("currency_code"), currency_code, obj, QString("QString"));

    toJsonValue(QString("discount_type"), discount_type, obj, QString("QString"));

    obj->insert("discount_value", QJsonValue(discount_value));

    obj->insert("id", QJsonValue(id));

    obj->insert("item", QJsonValue(item));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("sale_end_date", QJsonValue(sale_end_date));

    obj->insert("sale_start_date", QJsonValue(sale_start_date));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    toJsonValue(QString("tag"), tag, obj, QString("QString"));

    obj->insert("vendor", QJsonValue(vendor));

    return obj;
}

QString*
SWGCatalogSale::getCurrencyCode() {
    return currency_code;
}
void
SWGCatalogSale::setCurrencyCode(QString* currency_code) {
    this->currency_code = currency_code;
}

QString*
SWGCatalogSale::getDiscountType() {
    return discount_type;
}
void
SWGCatalogSale::setDiscountType(QString* discount_type) {
    this->discount_type = discount_type;
}

double
SWGCatalogSale::getDiscountValue() {
    return discount_value;
}
void
SWGCatalogSale::setDiscountValue(double discount_value) {
    this->discount_value = discount_value;
}

qint32
SWGCatalogSale::getId() {
    return id;
}
void
SWGCatalogSale::setId(qint32 id) {
    this->id = id;
}

qint32
SWGCatalogSale::getItem() {
    return item;
}
void
SWGCatalogSale::setItem(qint32 item) {
    this->item = item;
}

QString*
SWGCatalogSale::getLongDescription() {
    return long_description;
}
void
SWGCatalogSale::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGCatalogSale::getName() {
    return name;
}
void
SWGCatalogSale::setName(QString* name) {
    this->name = name;
}

qint64
SWGCatalogSale::getSaleEndDate() {
    return sale_end_date;
}
void
SWGCatalogSale::setSaleEndDate(qint64 sale_end_date) {
    this->sale_end_date = sale_end_date;
}

qint64
SWGCatalogSale::getSaleStartDate() {
    return sale_start_date;
}
void
SWGCatalogSale::setSaleStartDate(qint64 sale_start_date) {
    this->sale_start_date = sale_start_date;
}

QString*
SWGCatalogSale::getShortDescription() {
    return short_description;
}
void
SWGCatalogSale::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

QString*
SWGCatalogSale::getTag() {
    return tag;
}
void
SWGCatalogSale::setTag(QString* tag) {
    this->tag = tag;
}

qint32
SWGCatalogSale::getVendor() {
    return vendor;
}
void
SWGCatalogSale::setVendor(qint32 vendor) {
    this->vendor = vendor;
}



} /* namespace Swagger */

