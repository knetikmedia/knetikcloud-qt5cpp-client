/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGGroup.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGGroup::SWGGroup(QString* json) {
    init();
    this->fromJson(*json);
}

SWGGroup::SWGGroup() {
    init();
}

SWGGroup::~SWGGroup() {
    this->cleanup();
}

void
SWGGroup::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    description = new QString("");
    id = 0;
    member_count = 0;
    message_of_the_day = new QString("");
    name = new QString("");
    parent = new SWGGroup();
    properties_string = new QString("");
    status = new QString("");
    sub_member_count = 0;
    template = new QString("");
    unique_name = new QString("");
}

void
SWGGroup::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(description != nullptr) {
        delete description;
    }



    if(message_of_the_day != nullptr) {
        delete message_of_the_day;
    }

    if(name != nullptr) {
        delete name;
    }

    if(parent != nullptr) {
        delete parent;
    }

    if(properties_string != nullptr) {
        delete properties_string;
    }

    if(status != nullptr) {
        delete status;
    }


    if(template != nullptr) {
        delete template;
    }

    if(unique_name != nullptr) {
        delete unique_name;
    }
}

SWGGroup*
SWGGroup::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGGroup::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&member_count, pJson["member_count"], "qint32", "");
    ::Swagger::setValue(&message_of_the_day, pJson["message_of_the_day"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&parent, pJson["parent"], "SWGGroup", "SWGGroup");
    ::Swagger::setValue(&properties_string, pJson["properties_string"], "QString", "QString");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    ::Swagger::setValue(&sub_member_count, pJson["sub_member_count"], "qint32", "");
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&unique_name, pJson["unique_name"], "QString", "QString");
}

QString
SWGGroup::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGGroup::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    toJsonValue(QString("description"), description, obj, QString("QString"));

    obj->insert("id", QJsonValue(id));

    obj->insert("member_count", QJsonValue(member_count));

    toJsonValue(QString("message_of_the_day"), message_of_the_day, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("parent"), parent, obj, QString("SWGGroup"));

    toJsonValue(QString("properties_string"), properties_string, obj, QString("QString"));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    obj->insert("sub_member_count", QJsonValue(sub_member_count));

    toJsonValue(QString("template"), template, obj, QString("QString"));

    toJsonValue(QString("unique_name"), unique_name, obj, QString("QString"));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGGroup::getAdditionalProperties() {
    return additional_properties;
}
void
SWGGroup::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QString*
SWGGroup::getDescription() {
    return description;
}
void
SWGGroup::setDescription(QString* description) {
    this->description = description;
}

qint32
SWGGroup::getId() {
    return id;
}
void
SWGGroup::setId(qint32 id) {
    this->id = id;
}

qint32
SWGGroup::getMemberCount() {
    return member_count;
}
void
SWGGroup::setMemberCount(qint32 member_count) {
    this->member_count = member_count;
}

QString*
SWGGroup::getMessageOfTheDay() {
    return message_of_the_day;
}
void
SWGGroup::setMessageOfTheDay(QString* message_of_the_day) {
    this->message_of_the_day = message_of_the_day;
}

QString*
SWGGroup::getName() {
    return name;
}
void
SWGGroup::setName(QString* name) {
    this->name = name;
}

SWGGroup*
SWGGroup::getParent() {
    return parent;
}
void
SWGGroup::setParent(SWGGroup* parent) {
    this->parent = parent;
}

QString*
SWGGroup::getPropertiesString() {
    return properties_string;
}
void
SWGGroup::setPropertiesString(QString* properties_string) {
    this->properties_string = properties_string;
}

QString*
SWGGroup::getStatus() {
    return status;
}
void
SWGGroup::setStatus(QString* status) {
    this->status = status;
}

qint32
SWGGroup::getSubMemberCount() {
    return sub_member_count;
}
void
SWGGroup::setSubMemberCount(qint32 sub_member_count) {
    this->sub_member_count = sub_member_count;
}

QString*
SWGGroup::getTemplate() {
    return template;
}
void
SWGGroup::setTemplate(QString* template) {
    this->template = template;
}

QString*
SWGGroup::getUniqueName() {
    return unique_name;
}
void
SWGGroup::setUniqueName(QString* unique_name) {
    this->unique_name = unique_name;
}



} /* namespace Swagger */

