/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBreRule.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBreRule::SWGBreRule(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBreRule::SWGBreRule() {
    init();
}

SWGBreRule::~SWGBreRule() {
    this->cleanup();
}

void
SWGBreRule::init() {
    actions = new SWGActionResource();
    condition = new SWGPredicateOperation();
    condition_text = new QString("");
    description = new QString("");
    enabled = false;
    end_date = 0L;
    event_name = new QString("");
    id = new QString("");
    name = new QString("");
    sort = 0;
    start_date = 0L;
    system_rule = false;
}

void
SWGBreRule::cleanup() {
    
    if(actions != nullptr) {
        delete actions;
    }

    if(condition != nullptr) {
        delete condition;
    }

    if(condition_text != nullptr) {
        delete condition_text;
    }

    if(description != nullptr) {
        delete description;
    }



    if(event_name != nullptr) {
        delete event_name;
    }

    if(id != nullptr) {
        delete id;
    }

    if(name != nullptr) {
        delete name;
    }



}

SWGBreRule*
SWGBreRule::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBreRule::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&actions, pJson["actions"], "SWGActionResource", "SWGActionResource");
    ::Swagger::setValue(&condition, pJson["condition"], "SWGPredicateOperation", "SWGPredicateOperation");
    ::Swagger::setValue(&condition_text, pJson["condition_text"], "QString", "QString");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&enabled, pJson["enabled"], "bool", "");
    ::Swagger::setValue(&end_date, pJson["end_date"], "qint64", "");
    ::Swagger::setValue(&event_name, pJson["event_name"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&sort, pJson["sort"], "qint32", "");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
    ::Swagger::setValue(&system_rule, pJson["system_rule"], "bool", "");
}

QString
SWGBreRule::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBreRule::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("actions"), actions, obj, QString("SWGActionResource"));

    toJsonValue(QString("condition"), condition, obj, QString("SWGPredicateOperation"));

    toJsonValue(QString("condition_text"), condition_text, obj, QString("QString"));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    obj->insert("enabled", QJsonValue(enabled));

    obj->insert("end_date", QJsonValue(end_date));

    toJsonValue(QString("event_name"), event_name, obj, QString("QString"));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("sort", QJsonValue(sort));

    obj->insert("start_date", QJsonValue(start_date));

    obj->insert("system_rule", QJsonValue(system_rule));

    return obj;
}

SWGActionResource*
SWGBreRule::getActions() {
    return actions;
}
void
SWGBreRule::setActions(SWGActionResource* actions) {
    this->actions = actions;
}

SWGPredicateOperation*
SWGBreRule::getCondition() {
    return condition;
}
void
SWGBreRule::setCondition(SWGPredicateOperation* condition) {
    this->condition = condition;
}

QString*
SWGBreRule::getConditionText() {
    return condition_text;
}
void
SWGBreRule::setConditionText(QString* condition_text) {
    this->condition_text = condition_text;
}

QString*
SWGBreRule::getDescription() {
    return description;
}
void
SWGBreRule::setDescription(QString* description) {
    this->description = description;
}

bool
SWGBreRule::getEnabled() {
    return enabled;
}
void
SWGBreRule::setEnabled(bool enabled) {
    this->enabled = enabled;
}

qint64
SWGBreRule::getEndDate() {
    return end_date;
}
void
SWGBreRule::setEndDate(qint64 end_date) {
    this->end_date = end_date;
}

QString*
SWGBreRule::getEventName() {
    return event_name;
}
void
SWGBreRule::setEventName(QString* event_name) {
    this->event_name = event_name;
}

QString*
SWGBreRule::getId() {
    return id;
}
void
SWGBreRule::setId(QString* id) {
    this->id = id;
}

QString*
SWGBreRule::getName() {
    return name;
}
void
SWGBreRule::setName(QString* name) {
    this->name = name;
}

qint32
SWGBreRule::getSort() {
    return sort;
}
void
SWGBreRule::setSort(qint32 sort) {
    this->sort = sort;
}

qint64
SWGBreRule::getStartDate() {
    return start_date;
}
void
SWGBreRule::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}

bool
SWGBreRule::getSystemRule() {
    return system_rule;
}
void
SWGBreRule::setSystemRule(bool system_rule) {
    this->system_rule = system_rule;
}



} /* namespace Swagger */

