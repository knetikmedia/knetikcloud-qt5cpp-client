/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGChallengeActivityResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGChallengeActivityResource::SWGChallengeActivityResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGChallengeActivityResource::SWGChallengeActivityResource() {
    init();
}

SWGChallengeActivityResource::~SWGChallengeActivityResource() {
    this->cleanup();
}

void
SWGChallengeActivityResource::init() {
    activity_id = 0L;
    challenge_id = 0L;
    entitlement = new SWGActivityEntitlementResource();
    id = 0L;
    reward_set = new SWGRewardSetResource();
    settings = new QList<SWGSelectedSettingResource*>();
}

void
SWGChallengeActivityResource::cleanup() {
    


    if(entitlement != nullptr) {
        delete entitlement;
    }


    if(reward_set != nullptr) {
        delete reward_set;
    }

    if(settings != nullptr) {
        QList<SWGSelectedSettingResource*>* arr = settings;
        foreach(SWGSelectedSettingResource* o, *arr) {
            delete o;
        }
        delete settings;
    }
}

SWGChallengeActivityResource*
SWGChallengeActivityResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGChallengeActivityResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&activity_id, pJson["activity_id"], "qint64", "");
    ::Swagger::setValue(&challenge_id, pJson["challenge_id"], "qint64", "");
    ::Swagger::setValue(&entitlement, pJson["entitlement"], "SWGActivityEntitlementResource", "SWGActivityEntitlementResource");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&reward_set, pJson["reward_set"], "SWGRewardSetResource", "SWGRewardSetResource");
    
    ::Swagger::setValue(&settings, pJson["settings"], "QList", "SWGSelectedSettingResource");
    
}

QString
SWGChallengeActivityResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGChallengeActivityResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("activity_id", QJsonValue(activity_id));

    obj->insert("challenge_id", QJsonValue(challenge_id));

    toJsonValue(QString("entitlement"), entitlement, obj, QString("SWGActivityEntitlementResource"));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("reward_set"), reward_set, obj, QString("SWGRewardSetResource"));

    QJsonArray settingsJsonArray;
    toJsonArray((QList<void*>*)settings, &settingsJsonArray, "settings", "SWGSelectedSettingResource");
    obj->insert("settings", settingsJsonArray);

    return obj;
}

qint64
SWGChallengeActivityResource::getActivityId() {
    return activity_id;
}
void
SWGChallengeActivityResource::setActivityId(qint64 activity_id) {
    this->activity_id = activity_id;
}

qint64
SWGChallengeActivityResource::getChallengeId() {
    return challenge_id;
}
void
SWGChallengeActivityResource::setChallengeId(qint64 challenge_id) {
    this->challenge_id = challenge_id;
}

SWGActivityEntitlementResource*
SWGChallengeActivityResource::getEntitlement() {
    return entitlement;
}
void
SWGChallengeActivityResource::setEntitlement(SWGActivityEntitlementResource* entitlement) {
    this->entitlement = entitlement;
}

qint64
SWGChallengeActivityResource::getId() {
    return id;
}
void
SWGChallengeActivityResource::setId(qint64 id) {
    this->id = id;
}

SWGRewardSetResource*
SWGChallengeActivityResource::getRewardSet() {
    return reward_set;
}
void
SWGChallengeActivityResource::setRewardSet(SWGRewardSetResource* reward_set) {
    this->reward_set = reward_set;
}

QList<SWGSelectedSettingResource*>*
SWGChallengeActivityResource::getSettings() {
    return settings;
}
void
SWGChallengeActivityResource::setSettings(QList<SWGSelectedSettingResource*>* settings) {
    this->settings = settings;
}



} /* namespace Swagger */

