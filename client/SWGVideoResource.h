/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGVideoResource.h
 * 
 * 
 */

#ifndef SWGVideoResource_H_
#define SWGVideoResource_H_

#include <QJsonObject>


#include "SWGCommentResource.h"
#include "SWGContributionResource.h"
#include "SWGSimpleReferenceResource«long».h"
#include "SWGSimpleReferenceResource«string».h"
#include "SWGSimpleUserResource.h"
#include <QList>
#include <QString>

#include "SWGObject.h"


namespace Swagger {

class SWGVideoResource: public SWGObject {
public:
    SWGVideoResource();
    SWGVideoResource(QString* json);
    virtual ~SWGVideoResource();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGVideoResource* fromJson(QString &jsonString);

    bool getActive();
    void setActive(bool active);

    SWGSimpleReferenceResource«long»* getAuthor();
    void setAuthor(SWGSimpleReferenceResource«long»* author);

    qint64 getAuthored();
    void setAuthored(qint64 authored);

    bool getBanned();
    void setBanned(bool banned);

    SWGSimpleReferenceResource«string»* getCategory();
    void setCategory(SWGSimpleReferenceResource«string»* category);

    QList<SWGCommentResource*>* getComments();
    void setComments(QList<SWGCommentResource*>* comments);

    QList<SWGContributionResource*>* getContributors();
    void setContributors(QList<SWGContributionResource*>* contributors);

    qint64 getCreatedDate();
    void setCreatedDate(qint64 created_date);

    QString* getEmbed();
    void setEmbed(QString* embed);

    QString* getExtension();
    void setExtension(QString* extension);

    qint32 getHeight();
    void setHeight(qint32 height);

    qint64 getId();
    void setId(qint64 id);

    qint32 getLength();
    void setLength(qint32 length);

    QString* getLocation();
    void setLocation(QString* location);

    QString* getLongDescription();
    void setLongDescription(QString* long_description);

    QString* getMimeType();
    void setMimeType(QString* mime_type);

    QString* getName();
    void setName(QString* name);

    qint32 getPriority();
    void setPriority(qint32 priority);

    QString* getPrivacy();
    void setPrivacy(QString* privacy);

    bool getPublished();
    void setPublished(bool published);

    QString* getShortDescription();
    void setShortDescription(QString* short_description);

    qint64 getSize();
    void setSize(qint64 size);

    QList<QString*>* getTags();
    void setTags(QList<QString*>* tags);

    QString* getThumbnail();
    void setThumbnail(QString* thumbnail);

    qint64 getUpdatedDate();
    void setUpdatedDate(qint64 updated_date);

    SWGSimpleUserResource* getUploader();
    void setUploader(SWGSimpleUserResource* uploader);

    qint64 getViews();
    void setViews(qint64 views);

    qint32 getWidth();
    void setWidth(qint32 width);


private:
    bool active;
    SWGSimpleReferenceResource«long»* author;
    qint64 authored;
    bool banned;
    SWGSimpleReferenceResource«string»* category;
    QList<SWGCommentResource*>* comments;
    QList<SWGContributionResource*>* contributors;
    qint64 created_date;
    QString* embed;
    QString* extension;
    qint32 height;
    qint64 id;
    qint32 length;
    QString* location;
    QString* long_description;
    QString* mime_type;
    QString* name;
    qint32 priority;
    QString* privacy;
    bool published;
    QString* short_description;
    qint64 size;
    QList<QString*>* tags;
    QString* thumbnail;
    qint64 updated_date;
    SWGSimpleUserResource* uploader;
    qint64 views;
    qint32 width;
};

} /* namespace Swagger */

#endif /* SWGVideoResource_H_ */
