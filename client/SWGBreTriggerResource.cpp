/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBreTriggerResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBreTriggerResource::SWGBreTriggerResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBreTriggerResource::SWGBreTriggerResource() {
    init();
}

SWGBreTriggerResource::~SWGBreTriggerResource() {
    this->cleanup();
}

void
SWGBreTriggerResource::init() {
    category = new QString("");
    event_name = new QString("");
    parameters = new QList<SWGBreTriggerParameterDefinition*>();
    system_trigger = false;
    trigger_description = new QString("");
    trigger_name = new QString("");
}

void
SWGBreTriggerResource::cleanup() {
    
    if(category != nullptr) {
        delete category;
    }

    if(event_name != nullptr) {
        delete event_name;
    }

    if(parameters != nullptr) {
        QList<SWGBreTriggerParameterDefinition*>* arr = parameters;
        foreach(SWGBreTriggerParameterDefinition* o, *arr) {
            delete o;
        }
        delete parameters;
    }


    if(trigger_description != nullptr) {
        delete trigger_description;
    }

    if(trigger_name != nullptr) {
        delete trigger_name;
    }
}

SWGBreTriggerResource*
SWGBreTriggerResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBreTriggerResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&category, pJson["category"], "QString", "QString");
    ::Swagger::setValue(&event_name, pJson["event_name"], "QString", "QString");
    
    ::Swagger::setValue(&parameters, pJson["parameters"], "QList", "SWGBreTriggerParameterDefinition");
    
    ::Swagger::setValue(&system_trigger, pJson["system_trigger"], "bool", "");
    ::Swagger::setValue(&trigger_description, pJson["trigger_description"], "QString", "QString");
    ::Swagger::setValue(&trigger_name, pJson["trigger_name"], "QString", "QString");
}

QString
SWGBreTriggerResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBreTriggerResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("category"), category, obj, QString("QString"));

    toJsonValue(QString("event_name"), event_name, obj, QString("QString"));

    QJsonArray parametersJsonArray;
    toJsonArray((QList<void*>*)parameters, &parametersJsonArray, "parameters", "SWGBreTriggerParameterDefinition");
    obj->insert("parameters", parametersJsonArray);

    obj->insert("system_trigger", QJsonValue(system_trigger));

    toJsonValue(QString("trigger_description"), trigger_description, obj, QString("QString"));

    toJsonValue(QString("trigger_name"), trigger_name, obj, QString("QString"));

    return obj;
}

QString*
SWGBreTriggerResource::getCategory() {
    return category;
}
void
SWGBreTriggerResource::setCategory(QString* category) {
    this->category = category;
}

QString*
SWGBreTriggerResource::getEventName() {
    return event_name;
}
void
SWGBreTriggerResource::setEventName(QString* event_name) {
    this->event_name = event_name;
}

QList<SWGBreTriggerParameterDefinition*>*
SWGBreTriggerResource::getParameters() {
    return parameters;
}
void
SWGBreTriggerResource::setParameters(QList<SWGBreTriggerParameterDefinition*>* parameters) {
    this->parameters = parameters;
}

bool
SWGBreTriggerResource::getSystemTrigger() {
    return system_trigger;
}
void
SWGBreTriggerResource::setSystemTrigger(bool system_trigger) {
    this->system_trigger = system_trigger;
}

QString*
SWGBreTriggerResource::getTriggerDescription() {
    return trigger_description;
}
void
SWGBreTriggerResource::setTriggerDescription(QString* trigger_description) {
    this->trigger_description = trigger_description;
}

QString*
SWGBreTriggerResource::getTriggerName() {
    return trigger_name;
}
void
SWGBreTriggerResource::setTriggerName(QString* trigger_name) {
    this->trigger_name = trigger_name;
}



} /* namespace Swagger */

