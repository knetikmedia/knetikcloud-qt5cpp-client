/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGConfigsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGConfigsApi::SWGConfigsApi() {}

SWGConfigsApi::~SWGConfigsApi() {}

SWGConfigsApi::SWGConfigsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGConfigsApi::createConfig(SWGConfig config) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/configs");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = config.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGConfigsApi::createConfigCallback);

    worker->execute(&input);
}

void
SWGConfigsApi::createConfigCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGConfig* output = static_cast<SWGConfig*>(create(json, QString("SWGConfig")));
    

    worker->deleteLater();

    emit createConfigSignal(output);
    
}
void
SWGConfigsApi::deleteConfig(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/configs/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGConfigsApi::deleteConfigCallback);

    worker->execute(&input);
}

void
SWGConfigsApi::deleteConfigCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteConfigSignal();
}
void
SWGConfigsApi::getConfig(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/configs/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGConfigsApi::getConfigCallback);

    worker->execute(&input);
}

void
SWGConfigsApi::getConfigCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGConfig* output = static_cast<SWGConfig*>(create(json, QString("SWGConfig")));
    

    worker->deleteLater();

    emit getConfigSignal(output);
    
}
void
SWGConfigsApi::getConfigs(QString* filter_search, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/configs");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGConfigsApi::getConfigsCallback);

    worker->execute(&input);
}

void
SWGConfigsApi::getConfigsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«Config»* output = static_cast<SWGPageResource«Config»*>(create(json, QString("SWGPageResource«Config»")));
    

    worker->deleteLater();

    emit getConfigsSignal(output);
    
}
void
SWGConfigsApi::updateConfig(QString* name, SWGConfig config) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/configs/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = config.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGConfigsApi::updateConfigCallback);

    worker->execute(&input);
}

void
SWGConfigsApi::updateConfigCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateConfigSignal();
}
} /* namespace Swagger */
