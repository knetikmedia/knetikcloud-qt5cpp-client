/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPollResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGPollResource::SWGPollResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGPollResource::SWGPollResource() {
    init();
}

SWGPollResource::~SWGPollResource() {
    this->cleanup();
}

void
SWGPollResource::init() {
    active = false;
    additional_properties = new QMap<QString, SWGProperty>();
    answers = new QList<SWGPollAnswerResource*>();
    category = new SWGNestedCategory();
    created_date = 0L;
    id = new QString("");
    tags = new QList<QString*>();
    template = new QString("");
    text = new QString("");
    type = new QString("");
    updated_date = 0L;
}

void
SWGPollResource::cleanup() {
    

    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(answers != nullptr) {
        QList<SWGPollAnswerResource*>* arr = answers;
        foreach(SWGPollAnswerResource* o, *arr) {
            delete o;
        }
        delete answers;
    }

    if(category != nullptr) {
        delete category;
    }


    if(id != nullptr) {
        delete id;
    }

    if(tags != nullptr) {
        QList<QString*>* arr = tags;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(template != nullptr) {
        delete template;
    }

    if(text != nullptr) {
        delete text;
    }

    if(type != nullptr) {
        delete type;
    }

}

SWGPollResource*
SWGPollResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGPollResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&active, pJson["active"], "bool", "");
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    
    ::Swagger::setValue(&answers, pJson["answers"], "QList", "SWGPollAnswerResource");
    
    ::Swagger::setValue(&category, pJson["category"], "SWGNestedCategory", "SWGNestedCategory");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "QString");
    
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&text, pJson["text"], "QString", "QString");
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGPollResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGPollResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("active", QJsonValue(active));

    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    QJsonArray answersJsonArray;
    toJsonArray((QList<void*>*)answers, &answersJsonArray, "answers", "SWGPollAnswerResource");
    obj->insert("answers", answersJsonArray);

    toJsonValue(QString("category"), category, obj, QString("SWGNestedCategory"));

    obj->insert("created_date", QJsonValue(created_date));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "QString");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("template"), template, obj, QString("QString"));

    toJsonValue(QString("text"), text, obj, QString("QString"));

    toJsonValue(QString("type"), type, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

bool
SWGPollResource::getActive() {
    return active;
}
void
SWGPollResource::setActive(bool active) {
    this->active = active;
}

QMap<QString, SWGProperty*>*
SWGPollResource::getAdditionalProperties() {
    return additional_properties;
}
void
SWGPollResource::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QList<SWGPollAnswerResource*>*
SWGPollResource::getAnswers() {
    return answers;
}
void
SWGPollResource::setAnswers(QList<SWGPollAnswerResource*>* answers) {
    this->answers = answers;
}

SWGNestedCategory*
SWGPollResource::getCategory() {
    return category;
}
void
SWGPollResource::setCategory(SWGNestedCategory* category) {
    this->category = category;
}

qint64
SWGPollResource::getCreatedDate() {
    return created_date;
}
void
SWGPollResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QString*
SWGPollResource::getId() {
    return id;
}
void
SWGPollResource::setId(QString* id) {
    this->id = id;
}

QList<QString*>*
SWGPollResource::getTags() {
    return tags;
}
void
SWGPollResource::setTags(QList<QString*>* tags) {
    this->tags = tags;
}

QString*
SWGPollResource::getTemplate() {
    return template;
}
void
SWGPollResource::setTemplate(QString* template) {
    this->template = template;
}

QString*
SWGPollResource::getText() {
    return text;
}
void
SWGPollResource::setText(QString* text) {
    this->text = text;
}

QString*
SWGPollResource::getType() {
    return type;
}
void
SWGPollResource::setType(QString* type) {
    this->type = type;
}

qint64
SWGPollResource::getUpdatedDate() {
    return updated_date;
}
void
SWGPollResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

