/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGTemplateSMSResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGTemplateSMSResource::SWGTemplateSMSResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGTemplateSMSResource::SWGTemplateSMSResource() {
    init();
}

SWGTemplateSMSResource::~SWGTemplateSMSResource() {
    this->cleanup();
}

void
SWGTemplateSMSResource::init() {
    from = new QString("");
    localizer = new SWGLocalizer();
    recipients = new QList<qint32>();
    template_key = new QString("");
    template_vars = new QList<QString*>();
}

void
SWGTemplateSMSResource::cleanup() {
    
    if(from != nullptr) {
        delete from;
    }

    if(localizer != nullptr) {
        delete localizer;
    }


    if(template_key != nullptr) {
        delete template_key;
    }

    if(template_vars != nullptr) {
        QList<QString*>* arr = template_vars;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete template_vars;
    }
}

SWGTemplateSMSResource*
SWGTemplateSMSResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTemplateSMSResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&from, pJson["from"], "QString", "QString");
    ::Swagger::setValue(&localizer, pJson["localizer"], "SWGLocalizer", "SWGLocalizer");
    
    
    ::Swagger::setValue(&recipients, pJson["recipients"], "QList", "qint32");
    ::Swagger::setValue(&template_key, pJson["template_key"], "QString", "QString");
    
    ::Swagger::setValue(&template_vars, pJson["template_vars"], "QList", "QString");
    
}

QString
SWGTemplateSMSResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGTemplateSMSResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("from"), from, obj, QString("QString"));

    toJsonValue(QString("localizer"), localizer, obj, QString("SWGLocalizer"));

    QJsonArray recipientsJsonArray;
    toJsonArray((QList<void*>*)recipients, &recipientsJsonArray, "recipients", "qint32");
    obj->insert("recipients", recipientsJsonArray);

    toJsonValue(QString("template_key"), template_key, obj, QString("QString"));

    QJsonArray template_varsJsonArray;
    toJsonArray((QList<void*>*)template_vars, &template_varsJsonArray, "template_vars", "QString");
    obj->insert("template_vars", template_varsJsonArray);

    return obj;
}

QString*
SWGTemplateSMSResource::getFrom() {
    return from;
}
void
SWGTemplateSMSResource::setFrom(QString* from) {
    this->from = from;
}

SWGLocalizer*
SWGTemplateSMSResource::getLocalizer() {
    return localizer;
}
void
SWGTemplateSMSResource::setLocalizer(SWGLocalizer* localizer) {
    this->localizer = localizer;
}

QList<qint32>*
SWGTemplateSMSResource::getRecipients() {
    return recipients;
}
void
SWGTemplateSMSResource::setRecipients(QList<qint32>* recipients) {
    this->recipients = recipients;
}

QString*
SWGTemplateSMSResource::getTemplateKey() {
    return template_key;
}
void
SWGTemplateSMSResource::setTemplateKey(QString* template_key) {
    this->template_key = template_key;
}

QList<QString*>*
SWGTemplateSMSResource::getTemplateVars() {
    return template_vars;
}
void
SWGTemplateSMSResource::setTemplateVars(QList<QString*>* template_vars) {
    this->template_vars = template_vars;
}



} /* namespace Swagger */

