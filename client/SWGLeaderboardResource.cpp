/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGLeaderboardResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGLeaderboardResource::SWGLeaderboardResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGLeaderboardResource::SWGLeaderboardResource() {
    init();
}

SWGLeaderboardResource::~SWGLeaderboardResource() {
    this->cleanup();
}

void
SWGLeaderboardResource::init() {
    entries = new QList<SWGLeaderboardEntryResource*>();
    id = 0L;
    strategy = new QString("");
}

void
SWGLeaderboardResource::cleanup() {
    
    if(entries != nullptr) {
        QList<SWGLeaderboardEntryResource*>* arr = entries;
        foreach(SWGLeaderboardEntryResource* o, *arr) {
            delete o;
        }
        delete entries;
    }


    if(strategy != nullptr) {
        delete strategy;
    }
}

SWGLeaderboardResource*
SWGLeaderboardResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGLeaderboardResource::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&entries, pJson["entries"], "QList", "SWGLeaderboardEntryResource");
    
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&strategy, pJson["strategy"], "QString", "QString");
}

QString
SWGLeaderboardResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGLeaderboardResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray entriesJsonArray;
    toJsonArray((QList<void*>*)entries, &entriesJsonArray, "entries", "SWGLeaderboardEntryResource");
    obj->insert("entries", entriesJsonArray);

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("strategy"), strategy, obj, QString("QString"));

    return obj;
}

QList<SWGLeaderboardEntryResource*>*
SWGLeaderboardResource::getEntries() {
    return entries;
}
void
SWGLeaderboardResource::setEntries(QList<SWGLeaderboardEntryResource*>* entries) {
    this->entries = entries;
}

qint64
SWGLeaderboardResource::getId() {
    return id;
}
void
SWGLeaderboardResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGLeaderboardResource::getStrategy() {
    return strategy;
}
void
SWGLeaderboardResource::setStrategy(QString* strategy) {
    this->strategy = strategy;
}



} /* namespace Swagger */

