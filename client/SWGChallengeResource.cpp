/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGChallengeResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGChallengeResource::SWGChallengeResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGChallengeResource::SWGChallengeResource() {
    init();
}

SWGChallengeResource::~SWGChallengeResource() {
    this->cleanup();
}

void
SWGChallengeResource::init() {
    activities = 0;
    additional_properties = new QMap<QString, SWGProperty>();
    campaign_id = 0L;
    copy_of = 0L;
    created_date = 0L;
    end_date = 0L;
    id = 0L;
    leaderboard_strategy = new QString("");
    long_description = new QString("");
    name = new QString("");
    next_event_date = 0L;
    reward_lag_minutes = 0;
    reward_set = new SWGRewardSetResource();
    schedule = new SWGSchedule();
    short_description = new QString("");
    start_date = 0L;
    template = new QString("");
    updated_date = 0L;
}

void
SWGChallengeResource::cleanup() {
    

    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }






    if(leaderboard_strategy != nullptr) {
        delete leaderboard_strategy;
    }

    if(long_description != nullptr) {
        delete long_description;
    }

    if(name != nullptr) {
        delete name;
    }



    if(reward_set != nullptr) {
        delete reward_set;
    }

    if(schedule != nullptr) {
        delete schedule;
    }

    if(short_description != nullptr) {
        delete short_description;
    }


    if(template != nullptr) {
        delete template;
    }

}

SWGChallengeResource*
SWGChallengeResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGChallengeResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&activities, pJson["activities"], "qint32", "");
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&campaign_id, pJson["campaign_id"], "qint64", "");
    ::Swagger::setValue(&copy_of, pJson["copy_of"], "qint64", "");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&end_date, pJson["end_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&leaderboard_strategy, pJson["leaderboard_strategy"], "QString", "QString");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&next_event_date, pJson["next_event_date"], "qint64", "");
    ::Swagger::setValue(&reward_lag_minutes, pJson["reward_lag_minutes"], "qint32", "");
    ::Swagger::setValue(&reward_set, pJson["reward_set"], "SWGRewardSetResource", "SWGRewardSetResource");
    ::Swagger::setValue(&schedule, pJson["schedule"], "SWGSchedule", "SWGSchedule");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGChallengeResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGChallengeResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("activities", QJsonValue(activities));

    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    obj->insert("campaign_id", QJsonValue(campaign_id));

    obj->insert("copy_of", QJsonValue(copy_of));

    obj->insert("created_date", QJsonValue(created_date));

    obj->insert("end_date", QJsonValue(end_date));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("leaderboard_strategy"), leaderboard_strategy, obj, QString("QString"));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("next_event_date", QJsonValue(next_event_date));

    obj->insert("reward_lag_minutes", QJsonValue(reward_lag_minutes));

    toJsonValue(QString("reward_set"), reward_set, obj, QString("SWGRewardSetResource"));

    toJsonValue(QString("schedule"), schedule, obj, QString("SWGSchedule"));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    obj->insert("start_date", QJsonValue(start_date));

    toJsonValue(QString("template"), template, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

qint32
SWGChallengeResource::getActivities() {
    return activities;
}
void
SWGChallengeResource::setActivities(qint32 activities) {
    this->activities = activities;
}

QMap<QString, SWGProperty*>*
SWGChallengeResource::getAdditionalProperties() {
    return additional_properties;
}
void
SWGChallengeResource::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

qint64
SWGChallengeResource::getCampaignId() {
    return campaign_id;
}
void
SWGChallengeResource::setCampaignId(qint64 campaign_id) {
    this->campaign_id = campaign_id;
}

qint64
SWGChallengeResource::getCopyOf() {
    return copy_of;
}
void
SWGChallengeResource::setCopyOf(qint64 copy_of) {
    this->copy_of = copy_of;
}

qint64
SWGChallengeResource::getCreatedDate() {
    return created_date;
}
void
SWGChallengeResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

qint64
SWGChallengeResource::getEndDate() {
    return end_date;
}
void
SWGChallengeResource::setEndDate(qint64 end_date) {
    this->end_date = end_date;
}

qint64
SWGChallengeResource::getId() {
    return id;
}
void
SWGChallengeResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGChallengeResource::getLeaderboardStrategy() {
    return leaderboard_strategy;
}
void
SWGChallengeResource::setLeaderboardStrategy(QString* leaderboard_strategy) {
    this->leaderboard_strategy = leaderboard_strategy;
}

QString*
SWGChallengeResource::getLongDescription() {
    return long_description;
}
void
SWGChallengeResource::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGChallengeResource::getName() {
    return name;
}
void
SWGChallengeResource::setName(QString* name) {
    this->name = name;
}

qint64
SWGChallengeResource::getNextEventDate() {
    return next_event_date;
}
void
SWGChallengeResource::setNextEventDate(qint64 next_event_date) {
    this->next_event_date = next_event_date;
}

qint32
SWGChallengeResource::getRewardLagMinutes() {
    return reward_lag_minutes;
}
void
SWGChallengeResource::setRewardLagMinutes(qint32 reward_lag_minutes) {
    this->reward_lag_minutes = reward_lag_minutes;
}

SWGRewardSetResource*
SWGChallengeResource::getRewardSet() {
    return reward_set;
}
void
SWGChallengeResource::setRewardSet(SWGRewardSetResource* reward_set) {
    this->reward_set = reward_set;
}

SWGSchedule*
SWGChallengeResource::getSchedule() {
    return schedule;
}
void
SWGChallengeResource::setSchedule(SWGSchedule* schedule) {
    this->schedule = schedule;
}

QString*
SWGChallengeResource::getShortDescription() {
    return short_description;
}
void
SWGChallengeResource::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

qint64
SWGChallengeResource::getStartDate() {
    return start_date;
}
void
SWGChallengeResource::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}

QString*
SWGChallengeResource::getTemplate() {
    return template;
}
void
SWGChallengeResource::setTemplate(QString* template) {
    this->template = template;
}

qint64
SWGChallengeResource::getUpdatedDate() {
    return updated_date;
}
void
SWGChallengeResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

