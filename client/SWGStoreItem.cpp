/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGStoreItem.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGStoreItem::SWGStoreItem(QString* json) {
    init();
    this->fromJson(*json);
}

SWGStoreItem::SWGStoreItem() {
    init();
}

SWGStoreItem::~SWGStoreItem() {
    this->cleanup();
}

void
SWGStoreItem::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    behaviors = new QList<SWGBehavior*>();
    category = new QString("");
    created_date = 0L;
    displayable = false;
    geo_country_list = new QList<QString*>();
    geo_policy_type = new QString("");
    id = 0;
    long_description = new QString("");
    name = new QString("");
    shipping_tier = 0;
    short_description = new QString("");
    skus = new QList<SWGSku*>();
    sort = 0;
    store_end = 0L;
    store_start = 0L;
    tags = new QList<QString*>();
    template = new QString("");
    type_hint = new QString("");
    unique_key = new QString("");
    updated_date = 0L;
    vendor_id = 0;
}

void
SWGStoreItem::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(behaviors != nullptr) {
        QList<SWGBehavior*>* arr = behaviors;
        foreach(SWGBehavior* o, *arr) {
            delete o;
        }
        delete behaviors;
    }

    if(category != nullptr) {
        delete category;
    }



    if(geo_country_list != nullptr) {
        QList<QString*>* arr = geo_country_list;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete geo_country_list;
    }

    if(geo_policy_type != nullptr) {
        delete geo_policy_type;
    }


    if(long_description != nullptr) {
        delete long_description;
    }

    if(name != nullptr) {
        delete name;
    }


    if(short_description != nullptr) {
        delete short_description;
    }

    if(skus != nullptr) {
        QList<SWGSku*>* arr = skus;
        foreach(SWGSku* o, *arr) {
            delete o;
        }
        delete skus;
    }




    if(tags != nullptr) {
        QList<QString*>* arr = tags;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(template != nullptr) {
        delete template;
    }

    if(type_hint != nullptr) {
        delete type_hint;
    }

    if(unique_key != nullptr) {
        delete unique_key;
    }


}

SWGStoreItem*
SWGStoreItem::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGStoreItem::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    
    ::Swagger::setValue(&behaviors, pJson["behaviors"], "QList", "SWGBehavior");
    
    ::Swagger::setValue(&category, pJson["category"], "QString", "QString");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&displayable, pJson["displayable"], "bool", "");
    
    ::Swagger::setValue(&geo_country_list, pJson["geo_country_list"], "QList", "QString");
    
    ::Swagger::setValue(&geo_policy_type, pJson["geo_policy_type"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&shipping_tier, pJson["shipping_tier"], "qint32", "");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    
    ::Swagger::setValue(&skus, pJson["skus"], "QList", "SWGSku");
    
    ::Swagger::setValue(&sort, pJson["sort"], "qint32", "");
    ::Swagger::setValue(&store_end, pJson["store_end"], "qint64", "");
    ::Swagger::setValue(&store_start, pJson["store_start"], "qint64", "");
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "QString");
    
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&type_hint, pJson["type_hint"], "QString", "QString");
    ::Swagger::setValue(&unique_key, pJson["unique_key"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
    ::Swagger::setValue(&vendor_id, pJson["vendor_id"], "qint32", "");
}

QString
SWGStoreItem::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGStoreItem::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    QJsonArray behaviorsJsonArray;
    toJsonArray((QList<void*>*)behaviors, &behaviorsJsonArray, "behaviors", "SWGBehavior");
    obj->insert("behaviors", behaviorsJsonArray);

    toJsonValue(QString("category"), category, obj, QString("QString"));

    obj->insert("created_date", QJsonValue(created_date));

    obj->insert("displayable", QJsonValue(displayable));

    QJsonArray geo_country_listJsonArray;
    toJsonArray((QList<void*>*)geo_country_list, &geo_country_listJsonArray, "geo_country_list", "QString");
    obj->insert("geo_country_list", geo_country_listJsonArray);

    toJsonValue(QString("geo_policy_type"), geo_policy_type, obj, QString("QString"));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("shipping_tier", QJsonValue(shipping_tier));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    QJsonArray skusJsonArray;
    toJsonArray((QList<void*>*)skus, &skusJsonArray, "skus", "SWGSku");
    obj->insert("skus", skusJsonArray);

    obj->insert("sort", QJsonValue(sort));

    obj->insert("store_end", QJsonValue(store_end));

    obj->insert("store_start", QJsonValue(store_start));

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "QString");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("template"), template, obj, QString("QString"));

    toJsonValue(QString("type_hint"), type_hint, obj, QString("QString"));

    toJsonValue(QString("unique_key"), unique_key, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    obj->insert("vendor_id", QJsonValue(vendor_id));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGStoreItem::getAdditionalProperties() {
    return additional_properties;
}
void
SWGStoreItem::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QList<SWGBehavior*>*
SWGStoreItem::getBehaviors() {
    return behaviors;
}
void
SWGStoreItem::setBehaviors(QList<SWGBehavior*>* behaviors) {
    this->behaviors = behaviors;
}

QString*
SWGStoreItem::getCategory() {
    return category;
}
void
SWGStoreItem::setCategory(QString* category) {
    this->category = category;
}

qint64
SWGStoreItem::getCreatedDate() {
    return created_date;
}
void
SWGStoreItem::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

bool
SWGStoreItem::getDisplayable() {
    return displayable;
}
void
SWGStoreItem::setDisplayable(bool displayable) {
    this->displayable = displayable;
}

QList<QString*>*
SWGStoreItem::getGeoCountryList() {
    return geo_country_list;
}
void
SWGStoreItem::setGeoCountryList(QList<QString*>* geo_country_list) {
    this->geo_country_list = geo_country_list;
}

QString*
SWGStoreItem::getGeoPolicyType() {
    return geo_policy_type;
}
void
SWGStoreItem::setGeoPolicyType(QString* geo_policy_type) {
    this->geo_policy_type = geo_policy_type;
}

qint32
SWGStoreItem::getId() {
    return id;
}
void
SWGStoreItem::setId(qint32 id) {
    this->id = id;
}

QString*
SWGStoreItem::getLongDescription() {
    return long_description;
}
void
SWGStoreItem::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGStoreItem::getName() {
    return name;
}
void
SWGStoreItem::setName(QString* name) {
    this->name = name;
}

qint32
SWGStoreItem::getShippingTier() {
    return shipping_tier;
}
void
SWGStoreItem::setShippingTier(qint32 shipping_tier) {
    this->shipping_tier = shipping_tier;
}

QString*
SWGStoreItem::getShortDescription() {
    return short_description;
}
void
SWGStoreItem::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

QList<SWGSku*>*
SWGStoreItem::getSkus() {
    return skus;
}
void
SWGStoreItem::setSkus(QList<SWGSku*>* skus) {
    this->skus = skus;
}

qint32
SWGStoreItem::getSort() {
    return sort;
}
void
SWGStoreItem::setSort(qint32 sort) {
    this->sort = sort;
}

qint64
SWGStoreItem::getStoreEnd() {
    return store_end;
}
void
SWGStoreItem::setStoreEnd(qint64 store_end) {
    this->store_end = store_end;
}

qint64
SWGStoreItem::getStoreStart() {
    return store_start;
}
void
SWGStoreItem::setStoreStart(qint64 store_start) {
    this->store_start = store_start;
}

QList<QString*>*
SWGStoreItem::getTags() {
    return tags;
}
void
SWGStoreItem::setTags(QList<QString*>* tags) {
    this->tags = tags;
}

QString*
SWGStoreItem::getTemplate() {
    return template;
}
void
SWGStoreItem::setTemplate(QString* template) {
    this->template = template;
}

QString*
SWGStoreItem::getTypeHint() {
    return type_hint;
}
void
SWGStoreItem::setTypeHint(QString* type_hint) {
    this->type_hint = type_hint;
}

QString*
SWGStoreItem::getUniqueKey() {
    return unique_key;
}
void
SWGStoreItem::setUniqueKey(QString* unique_key) {
    this->unique_key = unique_key;
}

qint64
SWGStoreItem::getUpdatedDate() {
    return updated_date;
}
void
SWGStoreItem::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}

qint32
SWGStoreItem::getVendorId() {
    return vendor_id;
}
void
SWGStoreItem::setVendorId(qint32 vendor_id) {
    this->vendor_id = vendor_id;
}



} /* namespace Swagger */

