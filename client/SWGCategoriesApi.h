/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGCategoriesApi_H_
#define _SWG_SWGCategoriesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCategoryResource.h"
#include "SWGPageResource«CategoryResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGPageResource«string».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGCategoriesApi: public QObject {
    Q_OBJECT

public:
    SWGCategoriesApi();
    SWGCategoriesApi(QString host, QString basePath);
    ~SWGCategoriesApi();

    QString host;
    QString basePath;

    void createCategory(SWGCategoryResource category);
    void createCategoryTemplate(SWGTemplateResource template);
    void deleteCategory(QString* id);
    void deleteCategoryTemplate(QString* id, QString* cascade);
    void getCategories(QString* filter_search, bool filter_active, qint32 size, qint32 page, QString* order);
    void getCategory(QString* id);
    void getCategoryTemplate(QString* id);
    void getCategoryTemplates(qint32 size, qint32 page, QString* order);
    void getTags(qint32 size, qint32 page);
    void updateCategory(QString* id, SWGCategoryResource category);
    void updateCategoryTemplate(QString* id, SWGTemplateResource template);
    
private:
    void createCategoryCallback (HttpRequestWorker * worker);
    void createCategoryTemplateCallback (HttpRequestWorker * worker);
    void deleteCategoryCallback (HttpRequestWorker * worker);
    void deleteCategoryTemplateCallback (HttpRequestWorker * worker);
    void getCategoriesCallback (HttpRequestWorker * worker);
    void getCategoryCallback (HttpRequestWorker * worker);
    void getCategoryTemplateCallback (HttpRequestWorker * worker);
    void getCategoryTemplatesCallback (HttpRequestWorker * worker);
    void getTagsCallback (HttpRequestWorker * worker);
    void updateCategoryCallback (HttpRequestWorker * worker);
    void updateCategoryTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createCategorySignal(SWGCategoryResource* summary);
    void createCategoryTemplateSignal(SWGTemplateResource* summary);
    void deleteCategorySignal();
    void deleteCategoryTemplateSignal();
    void getCategoriesSignal(SWGPageResource«CategoryResource»* summary);
    void getCategorySignal(SWGCategoryResource* summary);
    void getCategoryTemplateSignal(SWGTemplateResource* summary);
    void getCategoryTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getTagsSignal(SWGPageResource«string»* summary);
    void updateCategorySignal(SWGCategoryResource* summary);
    void updateCategoryTemplateSignal(SWGTemplateResource* summary);
    
};
}
#endif
