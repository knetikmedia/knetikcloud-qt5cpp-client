/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCampaignResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGCampaignResource::SWGCampaignResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGCampaignResource::SWGCampaignResource() {
    init();
}

SWGCampaignResource::~SWGCampaignResource() {
    this->cleanup();
}

void
SWGCampaignResource::init() {
    active = false;
    additional_properties = new QMap<QString, SWGProperty>();
    created_date = 0L;
    id = 0L;
    leaderboard_strategy = new QString("");
    long_description = new QString("");
    name = new QString("");
    next_challenge = new QString("");
    next_challenge_date = 0L;
    reward_set = new SWGRewardSetResource();
    reward_status = new QString("");
    short_description = new QString("");
    template = new QString("");
    updated_date = 0L;
}

void
SWGCampaignResource::cleanup() {
    

    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }



    if(leaderboard_strategy != nullptr) {
        delete leaderboard_strategy;
    }

    if(long_description != nullptr) {
        delete long_description;
    }

    if(name != nullptr) {
        delete name;
    }

    if(next_challenge != nullptr) {
        delete next_challenge;
    }


    if(reward_set != nullptr) {
        delete reward_set;
    }

    if(reward_status != nullptr) {
        delete reward_status;
    }

    if(short_description != nullptr) {
        delete short_description;
    }

    if(template != nullptr) {
        delete template;
    }

}

SWGCampaignResource*
SWGCampaignResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCampaignResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&active, pJson["active"], "bool", "");
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&leaderboard_strategy, pJson["leaderboard_strategy"], "QString", "QString");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&next_challenge, pJson["next_challenge"], "QString", "QString");
    ::Swagger::setValue(&next_challenge_date, pJson["next_challenge_date"], "qint64", "");
    ::Swagger::setValue(&reward_set, pJson["reward_set"], "SWGRewardSetResource", "SWGRewardSetResource");
    ::Swagger::setValue(&reward_status, pJson["reward_status"], "QString", "QString");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGCampaignResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGCampaignResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("active", QJsonValue(active));

    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    obj->insert("created_date", QJsonValue(created_date));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("leaderboard_strategy"), leaderboard_strategy, obj, QString("QString"));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("next_challenge"), next_challenge, obj, QString("QString"));

    obj->insert("next_challenge_date", QJsonValue(next_challenge_date));

    toJsonValue(QString("reward_set"), reward_set, obj, QString("SWGRewardSetResource"));

    toJsonValue(QString("reward_status"), reward_status, obj, QString("QString"));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    toJsonValue(QString("template"), template, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

bool
SWGCampaignResource::getActive() {
    return active;
}
void
SWGCampaignResource::setActive(bool active) {
    this->active = active;
}

QMap<QString, SWGProperty*>*
SWGCampaignResource::getAdditionalProperties() {
    return additional_properties;
}
void
SWGCampaignResource::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

qint64
SWGCampaignResource::getCreatedDate() {
    return created_date;
}
void
SWGCampaignResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

qint64
SWGCampaignResource::getId() {
    return id;
}
void
SWGCampaignResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGCampaignResource::getLeaderboardStrategy() {
    return leaderboard_strategy;
}
void
SWGCampaignResource::setLeaderboardStrategy(QString* leaderboard_strategy) {
    this->leaderboard_strategy = leaderboard_strategy;
}

QString*
SWGCampaignResource::getLongDescription() {
    return long_description;
}
void
SWGCampaignResource::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGCampaignResource::getName() {
    return name;
}
void
SWGCampaignResource::setName(QString* name) {
    this->name = name;
}

QString*
SWGCampaignResource::getNextChallenge() {
    return next_challenge;
}
void
SWGCampaignResource::setNextChallenge(QString* next_challenge) {
    this->next_challenge = next_challenge;
}

qint64
SWGCampaignResource::getNextChallengeDate() {
    return next_challenge_date;
}
void
SWGCampaignResource::setNextChallengeDate(qint64 next_challenge_date) {
    this->next_challenge_date = next_challenge_date;
}

SWGRewardSetResource*
SWGCampaignResource::getRewardSet() {
    return reward_set;
}
void
SWGCampaignResource::setRewardSet(SWGRewardSetResource* reward_set) {
    this->reward_set = reward_set;
}

QString*
SWGCampaignResource::getRewardStatus() {
    return reward_status;
}
void
SWGCampaignResource::setRewardStatus(QString* reward_status) {
    this->reward_status = reward_status;
}

QString*
SWGCampaignResource::getShortDescription() {
    return short_description;
}
void
SWGCampaignResource::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

QString*
SWGCampaignResource::getTemplate() {
    return template;
}
void
SWGCampaignResource::setTemplate(QString* template) {
    this->template = template;
}

qint64
SWGCampaignResource::getUpdatedDate() {
    return updated_date;
}
void
SWGCampaignResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

