/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGPaymentsXsollaApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPaymentsXsollaApi::SWGPaymentsXsollaApi() {}

SWGPaymentsXsollaApi::~SWGPaymentsXsollaApi() {}

SWGPaymentsXsollaApi::SWGPaymentsXsollaApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPaymentsXsollaApi::createXsollaTokenUrl(SWGXsollaPaymentRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/xsolla/payment");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsXsollaApi::createXsollaTokenUrlCallback);

    worker->execute(&input);
}

void
SWGPaymentsXsollaApi::createXsollaTokenUrlCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit createXsollaTokenUrlSignal(output);
    
}
void
SWGPaymentsXsollaApi::receiveXsollaNotification() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/provider/xsolla/notifications");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsXsollaApi::receiveXsollaNotificationCallback);

    worker->execute(&input);
}

void
SWGPaymentsXsollaApi::receiveXsollaNotificationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit receiveXsollaNotificationSignal();
}
} /* namespace Swagger */
