/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAuthClientsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGAuthClientsApi::SWGAuthClientsApi() {}

SWGAuthClientsApi::~SWGAuthClientsApi() {}

SWGAuthClientsApi::SWGAuthClientsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAuthClientsApi::createClient(SWGClientResource client_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = client_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::createClientCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::createClientCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGClientResource* output = static_cast<SWGClientResource*>(create(json, QString("SWGClientResource")));
    

    worker->deleteLater();

    emit createClientSignal(output);
    
}
void
SWGAuthClientsApi::deleteClient(QString* client_key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::deleteClientCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::deleteClientCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteClientSignal();
}
void
SWGAuthClientsApi::getClient(QString* client_key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::getClientCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::getClientCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGClientResource* output = static_cast<SWGClientResource*>(create(json, QString("SWGClientResource")));
    

    worker->deleteLater();

    emit getClientSignal(output);
    
}
void
SWGAuthClientsApi::getClientGrantTypes() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/grant-types");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::getClientGrantTypesCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::getClientGrantTypesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGGrantTypeResource*>* output = new QList<SWGGrantTypeResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGGrantTypeResource* o = new SWGGrantTypeResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getClientGrantTypesSignal(output);
    
}
void
SWGAuthClientsApi::getClients(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::getClientsCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::getClientsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ClientResource»* output = static_cast<SWGPageResource«ClientResource»*>(create(json, QString("SWGPageResource«ClientResource»")));
    

    worker->deleteLater();

    emit getClientsSignal(output);
    
}
void
SWGAuthClientsApi::setClientGrantTypes(QString* client_key, QList<QString*>* grant_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}/grant-types");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QJsonArray* grant_listArray = new QJsonArray();
    toJsonArray((QList<void*>*)grant_list, grant_listArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*grant_listArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::setClientGrantTypesCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::setClientGrantTypesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setClientGrantTypesSignal();
}
void
SWGAuthClientsApi::setClientRedirectUris(QString* client_key, QList<QString*>* redirect_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}/redirect-uris");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QJsonArray* redirect_listArray = new QJsonArray();
    toJsonArray((QList<void*>*)redirect_list, redirect_listArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*redirect_listArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::setClientRedirectUrisCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::setClientRedirectUrisCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setClientRedirectUrisSignal();
}
void
SWGAuthClientsApi::updateClient(QString* client_key, SWGClientResource client_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = client_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthClientsApi::updateClientCallback);

    worker->execute(&input);
}

void
SWGAuthClientsApi::updateClientCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGClientResource* output = static_cast<SWGClientResource*>(create(json, QString("SWGClientResource")));
    

    worker->deleteLater();

    emit updateClientSignal(output);
    
}
} /* namespace Swagger */
