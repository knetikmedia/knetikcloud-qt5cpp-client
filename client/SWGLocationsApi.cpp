/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGLocationsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGLocationsApi::SWGLocationsApi() {}

SWGLocationsApi::~SWGLocationsApi() {}

SWGLocationsApi::SWGLocationsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGLocationsApi::getCountries() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/location/countries");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLocationsApi::getCountriesCallback);

    worker->execute(&input);
}

void
SWGLocationsApi::getCountriesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGCountryResource*>* output = new QList<SWGCountryResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGCountryResource* o = new SWGCountryResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getCountriesSignal(output);
    
}
void
SWGLocationsApi::getCountryByGeoLocation() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/location/geolocation/country");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLocationsApi::getCountryByGeoLocationCallback);

    worker->execute(&input);
}

void
SWGLocationsApi::getCountryByGeoLocationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit getCountryByGeoLocationSignal(output);
    
}
void
SWGLocationsApi::getCountryStates(QString* country_code_iso3) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/location/countries/{country_code_iso3}/states");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLocationsApi::getCountryStatesCallback);

    worker->execute(&input);
}

void
SWGLocationsApi::getCountryStatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGStateResource*>* output = new QList<SWGStateResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGStateResource* o = new SWGStateResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getCountryStatesSignal(output);
    
}
void
SWGLocationsApi::getCurrencyByGeoLocation() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/location/geolocation/currency");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLocationsApi::getCurrencyByGeoLocationCallback);

    worker->execute(&input);
}

void
SWGLocationsApi::getCurrencyByGeoLocationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCurrencyResource* output = static_cast<SWGCurrencyResource*>(create(json, QString("SWGCurrencyResource")));
    

    worker->deleteLater();

    emit getCurrencyByGeoLocationSignal(output);
    
}
} /* namespace Swagger */
