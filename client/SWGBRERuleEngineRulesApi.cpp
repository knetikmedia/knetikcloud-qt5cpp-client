/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGBRERuleEngineRulesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGBRERuleEngineRulesApi::SWGBRERuleEngineRulesApi() {}

SWGBRERuleEngineRulesApi::~SWGBRERuleEngineRulesApi() {}

SWGBRERuleEngineRulesApi::SWGBRERuleEngineRulesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGBRERuleEngineRulesApi::createBRERule(SWGBreRule bre_rule) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = bre_rule.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::createBRERuleCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::createBRERuleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreRule* output = static_cast<SWGBreRule*>(create(json, QString("SWGBreRule")));
    

    worker->deleteLater();

    emit createBRERuleSignal(output);
    
}
void
SWGBRERuleEngineRulesApi::deleteBRERule(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::deleteBRERuleCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::deleteBRERuleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteBRERuleSignal();
}
void
SWGBRERuleEngineRulesApi::getBREExpressionAsString(SWGExpression«object» expression) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules/expression-as-string");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = expression.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::getBREExpressionAsStringCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::getBREExpressionAsStringCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit getBREExpressionAsStringSignal(output);
    
}
void
SWGBRERuleEngineRulesApi::getBRERule(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::getBRERuleCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::getBRERuleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreRule* output = static_cast<SWGBreRule*>(create(json, QString("SWGBreRule")));
    

    worker->deleteLater();

    emit getBRERuleSignal(output);
    
}
void
SWGBRERuleEngineRulesApi::getBRERules(QString* filter_name, bool filter_enabled, bool filter_system, QString* filter_trigger, QString* filter_action, QString* filter_condition, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_enabled"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_enabled)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_system"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_system)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_trigger"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_trigger)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_action"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_action)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_condition"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_condition)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::getBRERulesCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::getBRERulesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BreRule»* output = static_cast<SWGPageResource«BreRule»*>(create(json, QString("SWGPageResource«BreRule»")));
    

    worker->deleteLater();

    emit getBRERulesSignal(output);
    
}
void
SWGBRERuleEngineRulesApi::setBRERule(QString* id, SWGBooleanResource enabled) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules/{id}/enabled");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = enabled.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::setBRERuleCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::setBRERuleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setBRERuleSignal();
}
void
SWGBRERuleEngineRulesApi::updateBRERule(QString* id, SWGBreRule bre_rule) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/rules/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = bre_rule.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineRulesApi::updateBRERuleCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineRulesApi::updateBRERuleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreRule* output = static_cast<SWGBreRule*>(create(json, QString("SWGBreRule")));
    

    worker->deleteLater();

    emit updateBRERuleSignal(output);
    
}
} /* namespace Swagger */
