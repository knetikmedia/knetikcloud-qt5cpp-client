/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreBundlesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGStoreBundlesApi::SWGStoreBundlesApi() {}

SWGStoreBundlesApi::~SWGStoreBundlesApi() {}

SWGStoreBundlesApi::SWGStoreBundlesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStoreBundlesApi::createBundleItem(bool cascade, SWGBundleItem bundle_item) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = bundle_item.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::createBundleItemCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::createBundleItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBundleItem* output = static_cast<SWGBundleItem*>(create(json, QString("SWGBundleItem")));
    

    worker->deleteLater();

    emit createBundleItemSignal(output);
    
}
void
SWGStoreBundlesApi::createBundleTemplate(SWGItemTemplateResource bundle_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = bundle_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::createBundleTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::createBundleTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit createBundleTemplateSignal(output);
    
}
void
SWGStoreBundlesApi::deleteBundleItem(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::deleteBundleItemCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::deleteBundleItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteBundleItemSignal();
}
void
SWGStoreBundlesApi::deleteBundleTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::deleteBundleTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::deleteBundleTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteBundleTemplateSignal();
}
void
SWGStoreBundlesApi::getBundleItem(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::getBundleItemCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::getBundleItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBundleItem* output = static_cast<SWGBundleItem*>(create(json, QString("SWGBundleItem")));
    

    worker->deleteLater();

    emit getBundleItemSignal(output);
    
}
void
SWGStoreBundlesApi::getBundleTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::getBundleTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::getBundleTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit getBundleTemplateSignal(output);
    
}
void
SWGStoreBundlesApi::getBundleTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::getBundleTemplatesCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::getBundleTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ItemTemplateResource»* output = static_cast<SWGPageResource«ItemTemplateResource»*>(create(json, QString("SWGPageResource«ItemTemplateResource»")));
    

    worker->deleteLater();

    emit getBundleTemplatesSignal(output);
    
}
void
SWGStoreBundlesApi::updateBundleItem(qint32 id, bool cascade, SWGBundleItem bundle_item) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = bundle_item.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::updateBundleItemCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::updateBundleItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBundleItem* output = static_cast<SWGBundleItem*>(create(json, QString("SWGBundleItem")));
    

    worker->deleteLater();

    emit updateBundleItemSignal(output);
    
}
void
SWGStoreBundlesApi::updateBundleTemplate(QString* id, SWGItemTemplateResource bundle_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/bundles/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = bundle_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreBundlesApi::updateBundleTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreBundlesApi::updateBundleTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit updateBundleTemplateSignal(output);
    
}
} /* namespace Swagger */
