/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGGamificationLevelingApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGGamificationLevelingApi::SWGGamificationLevelingApi() {}

SWGGamificationLevelingApi::~SWGGamificationLevelingApi() {}

SWGGamificationLevelingApi::SWGGamificationLevelingApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGGamificationLevelingApi::createLevel(SWGLevelingResource level) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = level.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::createLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::createLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLevelingResource* output = static_cast<SWGLevelingResource*>(create(json, QString("SWGLevelingResource")));
    

    worker->deleteLater();

    emit createLevelSignal(output);
    
}
void
SWGGamificationLevelingApi::deleteLevel(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::deleteLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::deleteLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteLevelSignal();
}
void
SWGGamificationLevelingApi::getLevel(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::getLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::getLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLevelingResource* output = static_cast<SWGLevelingResource*>(create(json, QString("SWGLevelingResource")));
    

    worker->deleteLater();

    emit getLevelSignal(output);
    
}
void
SWGGamificationLevelingApi::getLevelTriggers() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling/triggers");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::getLevelTriggersCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::getLevelTriggersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGBreTriggerResource*>* output = new QList<SWGBreTriggerResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGBreTriggerResource* o = new SWGBreTriggerResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getLevelTriggersSignal(output);
    
}
void
SWGGamificationLevelingApi::getLevels(QString* filter_name, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::getLevelsCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::getLevelsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«LevelingResource»* output = static_cast<SWGPageResource«LevelingResource»*>(create(json, QString("SWGPageResource«LevelingResource»")));
    

    worker->deleteLater();

    emit getLevelsSignal(output);
    
}
void
SWGGamificationLevelingApi::getUserLevel(qint32 user_id, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/leveling/{name}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::getUserLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::getUserLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUserLevelingResource* output = static_cast<SWGUserLevelingResource*>(create(json, QString("SWGUserLevelingResource")));
    

    worker->deleteLater();

    emit getUserLevelSignal(output);
    
}
void
SWGGamificationLevelingApi::getUserLevels(qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/leveling");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::getUserLevelsCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::getUserLevelsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UserLevelingResource»* output = static_cast<SWGPageResource«UserLevelingResource»*>(create(json, QString("SWGPageResource«UserLevelingResource»")));
    

    worker->deleteLater();

    emit getUserLevelsSignal(output);
    
}
void
SWGGamificationLevelingApi::updateLevel(QString* name, SWGLevelingResource new_level) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leveling/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = new_level.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::updateLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::updateLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLevelingResource* output = static_cast<SWGLevelingResource*>(create(json, QString("SWGLevelingResource")));
    

    worker->deleteLater();

    emit updateLevelSignal(output);
    
}
void
SWGGamificationLevelingApi::updateUserLevel(qint32 user_id, QString* name, qint32 progress) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/leveling/{name}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = progress.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLevelingApi::updateUserLevelCallback);

    worker->execute(&input);
}

void
SWGGamificationLevelingApi::updateUserLevelCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateUserLevelSignal();
}
} /* namespace Swagger */
