/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGCategoriesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGCategoriesApi::SWGCategoriesApi() {}

SWGCategoriesApi::~SWGCategoriesApi() {}

SWGCategoriesApi::SWGCategoriesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGCategoriesApi::createCategory(SWGCategoryResource category) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = category.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::createCategoryCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::createCategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCategoryResource* output = static_cast<SWGCategoryResource*>(create(json, QString("SWGCategoryResource")));
    

    worker->deleteLater();

    emit createCategorySignal(output);
    
}
void
SWGCategoriesApi::createCategoryTemplate(SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::createCategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::createCategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createCategoryTemplateSignal(output);
    
}
void
SWGCategoriesApi::deleteCategory(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::deleteCategoryCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::deleteCategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteCategorySignal();
}
void
SWGCategoriesApi::deleteCategoryTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::deleteCategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::deleteCategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteCategoryTemplateSignal();
}
void
SWGCategoriesApi::getCategories(QString* filter_search, bool filter_active, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_active"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_active)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::getCategoriesCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::getCategoriesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«CategoryResource»* output = static_cast<SWGPageResource«CategoryResource»*>(create(json, QString("SWGPageResource«CategoryResource»")));
    

    worker->deleteLater();

    emit getCategoriesSignal(output);
    
}
void
SWGCategoriesApi::getCategory(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::getCategoryCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::getCategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCategoryResource* output = static_cast<SWGCategoryResource*>(create(json, QString("SWGCategoryResource")));
    

    worker->deleteLater();

    emit getCategorySignal(output);
    
}
void
SWGCategoriesApi::getCategoryTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::getCategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::getCategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getCategoryTemplateSignal(output);
    
}
void
SWGCategoriesApi::getCategoryTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::getCategoryTemplatesCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::getCategoryTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getCategoryTemplatesSignal(output);
    
}
void
SWGCategoriesApi::getTags(qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tags");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::getTagsCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::getTagsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«string»* output = static_cast<SWGPageResource«string»*>(create(json, QString("SWGPageResource«string»")));
    

    worker->deleteLater();

    emit getTagsSignal(output);
    
}
void
SWGCategoriesApi::updateCategory(QString* id, SWGCategoryResource category) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = category.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::updateCategoryCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::updateCategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCategoryResource* output = static_cast<SWGCategoryResource*>(create(json, QString("SWGCategoryResource")));
    

    worker->deleteLater();

    emit updateCategorySignal(output);
    
}
void
SWGCategoriesApi::updateCategoryTemplate(QString* id, SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCategoriesApi::updateCategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGCategoriesApi::updateCategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateCategoryTemplateSignal(output);
    
}
} /* namespace Swagger */
