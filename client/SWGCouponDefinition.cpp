/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCouponDefinition.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGCouponDefinition::SWGCouponDefinition(QString* json) {
    init();
    this->fromJson(*json);
}

SWGCouponDefinition::SWGCouponDefinition() {
    init();
}

SWGCouponDefinition::~SWGCouponDefinition() {
    this->cleanup();
}

void
SWGCouponDefinition::init() {
    code = new QString("");
    description = new QString("");
    discount_type = new QString("");
    exclusive = false;
    max_discount = 0.0;
    max_quantity = 0;
    min_cart_total = 0.0;
    name = new QString("");
    self_exclusive = false;
    target_item_id = 0;
    type = new QString("");
    valid_for_tags = new QList<QString*>();
    value = 0.0;
    vendor_id = 0;
}

void
SWGCouponDefinition::cleanup() {
    
    if(code != nullptr) {
        delete code;
    }

    if(description != nullptr) {
        delete description;
    }

    if(discount_type != nullptr) {
        delete discount_type;
    }





    if(name != nullptr) {
        delete name;
    }



    if(type != nullptr) {
        delete type;
    }

    if(valid_for_tags != nullptr) {
        QList<QString*>* arr = valid_for_tags;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete valid_for_tags;
    }


}

SWGCouponDefinition*
SWGCouponDefinition::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCouponDefinition::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&code, pJson["code"], "QString", "QString");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&discount_type, pJson["discount_type"], "QString", "QString");
    ::Swagger::setValue(&exclusive, pJson["exclusive"], "bool", "");
    ::Swagger::setValue(&max_discount, pJson["max_discount"], "double", "");
    ::Swagger::setValue(&max_quantity, pJson["max_quantity"], "qint32", "");
    ::Swagger::setValue(&min_cart_total, pJson["min_cart_total"], "double", "");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&self_exclusive, pJson["self_exclusive"], "bool", "");
    ::Swagger::setValue(&target_item_id, pJson["target_item_id"], "qint32", "");
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    
    ::Swagger::setValue(&valid_for_tags, pJson["valid_for_tags"], "QList", "QString");
    
    ::Swagger::setValue(&value, pJson["value"], "double", "");
    ::Swagger::setValue(&vendor_id, pJson["vendor_id"], "qint32", "");
}

QString
SWGCouponDefinition::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGCouponDefinition::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("code"), code, obj, QString("QString"));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("discount_type"), discount_type, obj, QString("QString"));

    obj->insert("exclusive", QJsonValue(exclusive));

    obj->insert("max_discount", QJsonValue(max_discount));

    obj->insert("max_quantity", QJsonValue(max_quantity));

    obj->insert("min_cart_total", QJsonValue(min_cart_total));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("self_exclusive", QJsonValue(self_exclusive));

    obj->insert("target_item_id", QJsonValue(target_item_id));

    toJsonValue(QString("type"), type, obj, QString("QString"));

    QJsonArray valid_for_tagsJsonArray;
    toJsonArray((QList<void*>*)valid_for_tags, &valid_for_tagsJsonArray, "valid_for_tags", "QString");
    obj->insert("valid_for_tags", valid_for_tagsJsonArray);

    obj->insert("value", QJsonValue(value));

    obj->insert("vendor_id", QJsonValue(vendor_id));

    return obj;
}

QString*
SWGCouponDefinition::getCode() {
    return code;
}
void
SWGCouponDefinition::setCode(QString* code) {
    this->code = code;
}

QString*
SWGCouponDefinition::getDescription() {
    return description;
}
void
SWGCouponDefinition::setDescription(QString* description) {
    this->description = description;
}

QString*
SWGCouponDefinition::getDiscountType() {
    return discount_type;
}
void
SWGCouponDefinition::setDiscountType(QString* discount_type) {
    this->discount_type = discount_type;
}

bool
SWGCouponDefinition::getExclusive() {
    return exclusive;
}
void
SWGCouponDefinition::setExclusive(bool exclusive) {
    this->exclusive = exclusive;
}

double
SWGCouponDefinition::getMaxDiscount() {
    return max_discount;
}
void
SWGCouponDefinition::setMaxDiscount(double max_discount) {
    this->max_discount = max_discount;
}

qint32
SWGCouponDefinition::getMaxQuantity() {
    return max_quantity;
}
void
SWGCouponDefinition::setMaxQuantity(qint32 max_quantity) {
    this->max_quantity = max_quantity;
}

double
SWGCouponDefinition::getMinCartTotal() {
    return min_cart_total;
}
void
SWGCouponDefinition::setMinCartTotal(double min_cart_total) {
    this->min_cart_total = min_cart_total;
}

QString*
SWGCouponDefinition::getName() {
    return name;
}
void
SWGCouponDefinition::setName(QString* name) {
    this->name = name;
}

bool
SWGCouponDefinition::getSelfExclusive() {
    return self_exclusive;
}
void
SWGCouponDefinition::setSelfExclusive(bool self_exclusive) {
    this->self_exclusive = self_exclusive;
}

qint32
SWGCouponDefinition::getTargetItemId() {
    return target_item_id;
}
void
SWGCouponDefinition::setTargetItemId(qint32 target_item_id) {
    this->target_item_id = target_item_id;
}

QString*
SWGCouponDefinition::getType() {
    return type;
}
void
SWGCouponDefinition::setType(QString* type) {
    this->type = type;
}

QList<QString*>*
SWGCouponDefinition::getValidForTags() {
    return valid_for_tags;
}
void
SWGCouponDefinition::setValidForTags(QList<QString*>* valid_for_tags) {
    this->valid_for_tags = valid_for_tags;
}

double
SWGCouponDefinition::getValue() {
    return value;
}
void
SWGCouponDefinition::setValue(double value) {
    this->value = value;
}

qint32
SWGCouponDefinition::getVendorId() {
    return vendor_id;
}
void
SWGCouponDefinition::setVendorId(qint32 vendor_id) {
    this->vendor_id = vendor_id;
}



} /* namespace Swagger */

