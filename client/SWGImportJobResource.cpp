/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGImportJobResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGImportJobResource::SWGImportJobResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGImportJobResource::SWGImportJobResource() {
    init();
}

SWGImportJobResource::~SWGImportJobResource() {
    this->cleanup();
}

void
SWGImportJobResource::init() {
    category_id = new QString("");
    created_date = 0L;
    id = 0L;
    name = new QString("");
    output = new QList<SWGImportJobOutputResource*>();
    record_count = 0L;
    status = new QString("");
    updated_date = 0L;
    url = new QString("");
    vendor = new QString("");
}

void
SWGImportJobResource::cleanup() {
    
    if(category_id != nullptr) {
        delete category_id;
    }



    if(name != nullptr) {
        delete name;
    }

    if(output != nullptr) {
        QList<SWGImportJobOutputResource*>* arr = output;
        foreach(SWGImportJobOutputResource* o, *arr) {
            delete o;
        }
        delete output;
    }


    if(status != nullptr) {
        delete status;
    }


    if(url != nullptr) {
        delete url;
    }

    if(vendor != nullptr) {
        delete vendor;
    }
}

SWGImportJobResource*
SWGImportJobResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGImportJobResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&category_id, pJson["category_id"], "QString", "QString");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&output, pJson["output"], "QList", "SWGImportJobOutputResource");
    
    ::Swagger::setValue(&record_count, pJson["record_count"], "qint64", "");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
    ::Swagger::setValue(&vendor, pJson["vendor"], "QString", "QString");
}

QString
SWGImportJobResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGImportJobResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("category_id"), category_id, obj, QString("QString"));

    obj->insert("created_date", QJsonValue(created_date));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    QJsonArray outputJsonArray;
    toJsonArray((QList<void*>*)output, &outputJsonArray, "output", "SWGImportJobOutputResource");
    obj->insert("output", outputJsonArray);

    obj->insert("record_count", QJsonValue(record_count));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    toJsonValue(QString("url"), url, obj, QString("QString"));

    toJsonValue(QString("vendor"), vendor, obj, QString("QString"));

    return obj;
}

QString*
SWGImportJobResource::getCategoryId() {
    return category_id;
}
void
SWGImportJobResource::setCategoryId(QString* category_id) {
    this->category_id = category_id;
}

qint64
SWGImportJobResource::getCreatedDate() {
    return created_date;
}
void
SWGImportJobResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

qint64
SWGImportJobResource::getId() {
    return id;
}
void
SWGImportJobResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGImportJobResource::getName() {
    return name;
}
void
SWGImportJobResource::setName(QString* name) {
    this->name = name;
}

QList<SWGImportJobOutputResource*>*
SWGImportJobResource::getOutput() {
    return output;
}
void
SWGImportJobResource::setOutput(QList<SWGImportJobOutputResource*>* output) {
    this->output = output;
}

qint64
SWGImportJobResource::getRecordCount() {
    return record_count;
}
void
SWGImportJobResource::setRecordCount(qint64 record_count) {
    this->record_count = record_count;
}

QString*
SWGImportJobResource::getStatus() {
    return status;
}
void
SWGImportJobResource::setStatus(QString* status) {
    this->status = status;
}

qint64
SWGImportJobResource::getUpdatedDate() {
    return updated_date;
}
void
SWGImportJobResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}

QString*
SWGImportJobResource::getUrl() {
    return url;
}
void
SWGImportJobResource::setUrl(QString* url) {
    this->url = url;
}

QString*
SWGImportJobResource::getVendor() {
    return vendor;
}
void
SWGImportJobResource::setVendor(QString* vendor) {
    this->vendor = vendor;
}



} /* namespace Swagger */

