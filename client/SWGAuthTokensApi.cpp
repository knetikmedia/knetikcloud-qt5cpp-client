/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAuthTokensApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGAuthTokensApi::SWGAuthTokensApi() {}

SWGAuthTokensApi::~SWGAuthTokensApi() {}

SWGAuthTokensApi::SWGAuthTokensApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAuthTokensApi::deleteToken(QString* username, QString* client_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/tokens/{username}/{client_id}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));
    QString client_idPathParam("{"); client_idPathParam.append("client_id").append("}");
    fullPath.replace(client_idPathParam, stringValue(client_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthTokensApi::deleteTokenCallback);

    worker->execute(&input);
}

void
SWGAuthTokensApi::deleteTokenCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteTokenSignal();
}
void
SWGAuthTokensApi::deleteTokens(QString* username) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/tokens/{username}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthTokensApi::deleteTokensCallback);

    worker->execute(&input);
}

void
SWGAuthTokensApi::deleteTokensCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteTokensSignal();
}
void
SWGAuthTokensApi::getToken(QString* username, QString* client_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/tokens/{username}/{client_id}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));
    QString client_idPathParam("{"); client_idPathParam.append("client_id").append("}");
    fullPath.replace(client_idPathParam, stringValue(client_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthTokensApi::getTokenCallback);

    worker->execute(&input);
}

void
SWGAuthTokensApi::getTokenCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGOauthAccessTokenResource* output = static_cast<SWGOauthAccessTokenResource*>(create(json, QString("SWGOauthAccessTokenResource")));
    

    worker->deleteLater();

    emit getTokenSignal(output);
    
}
void
SWGAuthTokensApi::getTokens(QString* filter_client_id, QString* filter_username, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/tokens");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_client_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_client_id)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_username"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_username)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthTokensApi::getTokensCallback);

    worker->execute(&input);
}

void
SWGAuthTokensApi::getTokensCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«OauthAccessTokenResource»* output = static_cast<SWGPageResource«OauthAccessTokenResource»*>(create(json, QString("SWGPageResource«OauthAccessTokenResource»")));
    

    worker->deleteLater();

    emit getTokensSignal(output);
    
}
} /* namespace Swagger */
