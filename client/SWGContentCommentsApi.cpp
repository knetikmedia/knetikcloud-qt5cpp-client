/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGContentCommentsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGContentCommentsApi::SWGContentCommentsApi() {}

SWGContentCommentsApi::~SWGContentCommentsApi() {}

SWGContentCommentsApi::SWGContentCommentsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGContentCommentsApi::addComment(SWGCommentResource comment_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = comment_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::addCommentCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::addCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCommentResource* output = static_cast<SWGCommentResource*>(create(json, QString("SWGCommentResource")));
    

    worker->deleteLater();

    emit addCommentSignal(output);
    
}
void
SWGContentCommentsApi::deleteComment(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::deleteCommentCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::deleteCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteCommentSignal();
}
void
SWGContentCommentsApi::getComment(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::getCommentCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::getCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCommentResource* output = static_cast<SWGCommentResource*>(create(json, QString("SWGCommentResource")));
    

    worker->deleteLater();

    emit getCommentSignal(output);
    
}
void
SWGContentCommentsApi::getComments(QString* context, qint32 context_id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("context"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(context)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("context_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(context_id)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::getCommentsCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::getCommentsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«CommentResource»* output = static_cast<SWGPageResource«CommentResource»*>(create(json, QString("SWGPageResource«CommentResource»")));
    

    worker->deleteLater();

    emit getCommentsSignal(output);
    
}
void
SWGContentCommentsApi::searchComments(SWGObject* query, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments/search");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = query.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::searchCommentsCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::searchCommentsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCommentSearch* output = static_cast<SWGCommentSearch*>(create(json, QString("SWGCommentSearch")));
    

    worker->deleteLater();

    emit searchCommentsSignal(output);
    
}
void
SWGContentCommentsApi::updateComment(qint64 id, QString* content) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/comments/{id}/content");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = content.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentCommentsApi::updateCommentCallback);

    worker->execute(&input);
}

void
SWGContentCommentsApi::updateCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateCommentSignal();
}
} /* namespace Swagger */
