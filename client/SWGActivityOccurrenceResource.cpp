/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGActivityOccurrenceResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGActivityOccurrenceResource::SWGActivityOccurrenceResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGActivityOccurrenceResource::SWGActivityOccurrenceResource() {
    init();
}

SWGActivityOccurrenceResource::~SWGActivityOccurrenceResource() {
    this->cleanup();
}

void
SWGActivityOccurrenceResource::init() {
    activity_id = 0L;
    challenge_activity_id = 0L;
    created_date = 0L;
    entitlement = new SWGActivityEntitlementResource();
    event_id = 0L;
    id = 0L;
    reward_status = new QString("");
    settings = new QList<SWGSelectedSettingResource*>();
    simulated = false;
    start_date = 0L;
    status = new QString("");
    updated_date = 0L;
    users = new QList<SWGActivityUserResource*>();
}

void
SWGActivityOccurrenceResource::cleanup() {
    



    if(entitlement != nullptr) {
        delete entitlement;
    }



    if(reward_status != nullptr) {
        delete reward_status;
    }

    if(settings != nullptr) {
        QList<SWGSelectedSettingResource*>* arr = settings;
        foreach(SWGSelectedSettingResource* o, *arr) {
            delete o;
        }
        delete settings;
    }



    if(status != nullptr) {
        delete status;
    }


    if(users != nullptr) {
        QList<SWGActivityUserResource*>* arr = users;
        foreach(SWGActivityUserResource* o, *arr) {
            delete o;
        }
        delete users;
    }
}

SWGActivityOccurrenceResource*
SWGActivityOccurrenceResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGActivityOccurrenceResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&activity_id, pJson["activity_id"], "qint64", "");
    ::Swagger::setValue(&challenge_activity_id, pJson["challenge_activity_id"], "qint64", "");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&entitlement, pJson["entitlement"], "SWGActivityEntitlementResource", "SWGActivityEntitlementResource");
    ::Swagger::setValue(&event_id, pJson["event_id"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&reward_status, pJson["reward_status"], "QString", "QString");
    
    ::Swagger::setValue(&settings, pJson["settings"], "QList", "SWGSelectedSettingResource");
    
    ::Swagger::setValue(&simulated, pJson["simulated"], "bool", "");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
    
    ::Swagger::setValue(&users, pJson["users"], "QList", "SWGActivityUserResource");
    
}

QString
SWGActivityOccurrenceResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGActivityOccurrenceResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("activity_id", QJsonValue(activity_id));

    obj->insert("challenge_activity_id", QJsonValue(challenge_activity_id));

    obj->insert("created_date", QJsonValue(created_date));

    toJsonValue(QString("entitlement"), entitlement, obj, QString("SWGActivityEntitlementResource"));

    obj->insert("event_id", QJsonValue(event_id));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("reward_status"), reward_status, obj, QString("QString"));

    QJsonArray settingsJsonArray;
    toJsonArray((QList<void*>*)settings, &settingsJsonArray, "settings", "SWGSelectedSettingResource");
    obj->insert("settings", settingsJsonArray);

    obj->insert("simulated", QJsonValue(simulated));

    obj->insert("start_date", QJsonValue(start_date));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    QJsonArray usersJsonArray;
    toJsonArray((QList<void*>*)users, &usersJsonArray, "users", "SWGActivityUserResource");
    obj->insert("users", usersJsonArray);

    return obj;
}

qint64
SWGActivityOccurrenceResource::getActivityId() {
    return activity_id;
}
void
SWGActivityOccurrenceResource::setActivityId(qint64 activity_id) {
    this->activity_id = activity_id;
}

qint64
SWGActivityOccurrenceResource::getChallengeActivityId() {
    return challenge_activity_id;
}
void
SWGActivityOccurrenceResource::setChallengeActivityId(qint64 challenge_activity_id) {
    this->challenge_activity_id = challenge_activity_id;
}

qint64
SWGActivityOccurrenceResource::getCreatedDate() {
    return created_date;
}
void
SWGActivityOccurrenceResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

SWGActivityEntitlementResource*
SWGActivityOccurrenceResource::getEntitlement() {
    return entitlement;
}
void
SWGActivityOccurrenceResource::setEntitlement(SWGActivityEntitlementResource* entitlement) {
    this->entitlement = entitlement;
}

qint64
SWGActivityOccurrenceResource::getEventId() {
    return event_id;
}
void
SWGActivityOccurrenceResource::setEventId(qint64 event_id) {
    this->event_id = event_id;
}

qint64
SWGActivityOccurrenceResource::getId() {
    return id;
}
void
SWGActivityOccurrenceResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGActivityOccurrenceResource::getRewardStatus() {
    return reward_status;
}
void
SWGActivityOccurrenceResource::setRewardStatus(QString* reward_status) {
    this->reward_status = reward_status;
}

QList<SWGSelectedSettingResource*>*
SWGActivityOccurrenceResource::getSettings() {
    return settings;
}
void
SWGActivityOccurrenceResource::setSettings(QList<SWGSelectedSettingResource*>* settings) {
    this->settings = settings;
}

bool
SWGActivityOccurrenceResource::getSimulated() {
    return simulated;
}
void
SWGActivityOccurrenceResource::setSimulated(bool simulated) {
    this->simulated = simulated;
}

qint64
SWGActivityOccurrenceResource::getStartDate() {
    return start_date;
}
void
SWGActivityOccurrenceResource::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}

QString*
SWGActivityOccurrenceResource::getStatus() {
    return status;
}
void
SWGActivityOccurrenceResource::setStatus(QString* status) {
    this->status = status;
}

qint64
SWGActivityOccurrenceResource::getUpdatedDate() {
    return updated_date;
}
void
SWGActivityOccurrenceResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}

QList<SWGActivityUserResource*>*
SWGActivityOccurrenceResource::getUsers() {
    return users;
}
void
SWGActivityOccurrenceResource::setUsers(QList<SWGActivityUserResource*>* users) {
    this->users = users;
}



} /* namespace Swagger */

