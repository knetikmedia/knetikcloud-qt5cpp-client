/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGActivitiesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGActivitiesApi::SWGActivitiesApi() {}

SWGActivitiesApi::~SWGActivitiesApi() {}

SWGActivitiesApi::SWGActivitiesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGActivitiesApi::createActivity(SWGActivityResource activity_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activities");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = activity_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::createActivityCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::createActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGActivityResource* output = static_cast<SWGActivityResource*>(create(json, QString("SWGActivityResource")));
    

    worker->deleteLater();

    emit createActivitySignal(output);
    
}
void
SWGActivitiesApi::createActivityOccurrence(bool test, SWGActivityOccurrenceResource activity_occurrence_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activity-occurrences");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("test"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(test)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = activity_occurrence_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::createActivityOccurrenceCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::createActivityOccurrenceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGActivityOccurrenceResource* output = static_cast<SWGActivityOccurrenceResource*>(create(json, QString("SWGActivityOccurrenceResource")));
    

    worker->deleteLater();

    emit createActivityOccurrenceSignal(output);
    
}
void
SWGActivitiesApi::deleteActivity(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activities/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::deleteActivityCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::deleteActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteActivitySignal();
}
void
SWGActivitiesApi::getActivities(bool filter_template, QString* filter_name, QString* filter_id, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activities");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_template"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_template)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_id)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::getActivitiesCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::getActivitiesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BareActivityResource»* output = static_cast<SWGPageResource«BareActivityResource»*>(create(json, QString("SWGPageResource«BareActivityResource»")));
    

    worker->deleteLater();

    emit getActivitiesSignal(output);
    
}
void
SWGActivitiesApi::getActivity(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activities/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::getActivityCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::getActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGActivityResource* output = static_cast<SWGActivityResource*>(create(json, QString("SWGActivityResource")));
    

    worker->deleteLater();

    emit getActivitySignal(output);
    
}
void
SWGActivitiesApi::setActivityOccurrenceResults(qint64 activity_occurrence_id, SWGActivityOccurrenceResults activity_occurrence_results) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activity-occurrences/{activity_occurrence_id}/results");

    QString activity_occurrence_idPathParam("{"); activity_occurrence_idPathParam.append("activity_occurrence_id").append("}");
    fullPath.replace(activity_occurrence_idPathParam, stringValue(activity_occurrence_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = activity_occurrence_results.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::setActivityOccurrenceResultsCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::setActivityOccurrenceResultsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGActivityOccurrenceResults* output = static_cast<SWGActivityOccurrenceResults*>(create(json, QString("SWGActivityOccurrenceResults")));
    

    worker->deleteLater();

    emit setActivityOccurrenceResultsSignal(output);
    
}
void
SWGActivitiesApi::updateActivity(qint64 id, SWGActivityResource activity_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activities/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = activity_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::updateActivityCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::updateActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGActivityResource* output = static_cast<SWGActivityResource*>(create(json, QString("SWGActivityResource")));
    

    worker->deleteLater();

    emit updateActivitySignal(output);
    
}
void
SWGActivitiesApi::updateActivityOccurrence(qint64 activity_occurrence_id, QString* activity_cccurrence_status) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/activity-occurrences/{activity_occurrence_id}/status");

    QString activity_occurrence_idPathParam("{"); activity_occurrence_idPathParam.append("activity_occurrence_id").append("}");
    fullPath.replace(activity_occurrence_idPathParam, stringValue(activity_occurrence_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = activity_cccurrence_status.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGActivitiesApi::updateActivityOccurrenceCallback);

    worker->execute(&input);
}

void
SWGActivitiesApi::updateActivityOccurrenceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateActivityOccurrenceSignal();
}
} /* namespace Swagger */
