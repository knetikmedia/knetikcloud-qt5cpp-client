/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGMediaArtistsApi_H_
#define _SWG_SWGMediaArtistsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGArtistResource.h"
#include "SWGPageResource«ArtistResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGMediaArtistsApi: public QObject {
    Q_OBJECT

public:
    SWGMediaArtistsApi();
    SWGMediaArtistsApi(QString host, QString basePath);
    ~SWGMediaArtistsApi();

    QString host;
    QString basePath;

    void addArtist(SWGArtistResource artist_resource);
    void createArtistTemplate(SWGTemplateResource artist_template_resource);
    void deleteArtist(qint64 id);
    void deleteArtistTemplate(QString* id, QString* cascade);
    void getArtist(qint64 id, qint32 show_contributions);
    void getArtistTemplate(QString* id);
    void getArtistTemplates(qint32 size, qint32 page, QString* order);
    void getArtists(QString* filter_artists_by_name, qint32 size, qint32 page, QString* order);
    void updateArtist(qint64 id, SWGArtistResource artist_resource);
    void updateArtistTemplate(QString* id, SWGTemplateResource artist_template_resource);
    
private:
    void addArtistCallback (HttpRequestWorker * worker);
    void createArtistTemplateCallback (HttpRequestWorker * worker);
    void deleteArtistCallback (HttpRequestWorker * worker);
    void deleteArtistTemplateCallback (HttpRequestWorker * worker);
    void getArtistCallback (HttpRequestWorker * worker);
    void getArtistTemplateCallback (HttpRequestWorker * worker);
    void getArtistTemplatesCallback (HttpRequestWorker * worker);
    void getArtistsCallback (HttpRequestWorker * worker);
    void updateArtistCallback (HttpRequestWorker * worker);
    void updateArtistTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void addArtistSignal(SWGArtistResource* summary);
    void createArtistTemplateSignal(SWGTemplateResource* summary);
    void deleteArtistSignal();
    void deleteArtistTemplateSignal();
    void getArtistSignal(SWGArtistResource* summary);
    void getArtistTemplateSignal(SWGTemplateResource* summary);
    void getArtistTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getArtistsSignal(SWGPageResource«ArtistResource»* summary);
    void updateArtistSignal();
    void updateArtistTemplateSignal(SWGTemplateResource* summary);
    
};
}
#endif
