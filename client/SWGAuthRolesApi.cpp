/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAuthRolesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGAuthRolesApi::SWGAuthRolesApi() {}

SWGAuthRolesApi::~SWGAuthRolesApi() {}

SWGAuthRolesApi::SWGAuthRolesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAuthRolesApi::createRole(SWGRoleResource role_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = role_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::createRoleCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::createRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGRoleResource* output = static_cast<SWGRoleResource*>(create(json, QString("SWGRoleResource")));
    

    worker->deleteLater();

    emit createRoleSignal(output);
    
}
void
SWGAuthRolesApi::deleteRole(QString* role, bool force) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles/{role}");

    QString rolePathParam("{"); rolePathParam.append("role").append("}");
    fullPath.replace(rolePathParam, stringValue(role));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("force"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(force)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::deleteRoleCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::deleteRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteRoleSignal();
}
void
SWGAuthRolesApi::getClientRoles(QString* client_key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}/roles");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::getClientRolesCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::getClientRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGRoleResource*>* output = new QList<SWGRoleResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGRoleResource* o = new SWGRoleResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getClientRolesSignal(output);
    
}
void
SWGAuthRolesApi::getRole(QString* role) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles/{role}");

    QString rolePathParam("{"); rolePathParam.append("role").append("}");
    fullPath.replace(rolePathParam, stringValue(role));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::getRoleCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::getRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGRoleResource* output = static_cast<SWGRoleResource*>(create(json, QString("SWGRoleResource")));
    

    worker->deleteLater();

    emit getRoleSignal(output);
    
}
void
SWGAuthRolesApi::getRoles(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::getRolesCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::getRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«RoleResource»* output = static_cast<SWGPageResource«RoleResource»*>(create(json, QString("SWGPageResource«RoleResource»")));
    

    worker->deleteLater();

    emit getRolesSignal(output);
    
}
void
SWGAuthRolesApi::getUserRoles(qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/users/{user_id}/roles");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::getUserRolesCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::getUserRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGRoleResource*>* output = new QList<SWGRoleResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGRoleResource* o = new SWGRoleResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getUserRolesSignal(output);
    
}
void
SWGAuthRolesApi::setClientRoles(QString* client_key, QList<QString*>* roles_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/clients/{client_key}/roles");

    QString client_keyPathParam("{"); client_keyPathParam.append("client_key").append("}");
    fullPath.replace(client_keyPathParam, stringValue(client_key));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QJsonArray* roles_listArray = new QJsonArray();
    toJsonArray((QList<void*>*)roles_list, roles_listArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*roles_listArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::setClientRolesCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::setClientRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGClientResource* output = static_cast<SWGClientResource*>(create(json, QString("SWGClientResource")));
    

    worker->deleteLater();

    emit setClientRolesSignal(output);
    
}
void
SWGAuthRolesApi::setPermissionsForRole(QString* role, QList<QString*>* permissions_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles/{role}/permissions");

    QString rolePathParam("{"); rolePathParam.append("role").append("}");
    fullPath.replace(rolePathParam, stringValue(role));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QJsonArray* permissions_listArray = new QJsonArray();
    toJsonArray((QList<void*>*)permissions_list, permissions_listArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*permissions_listArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::setPermissionsForRoleCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::setPermissionsForRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGRoleResource* output = static_cast<SWGRoleResource*>(create(json, QString("SWGRoleResource")));
    

    worker->deleteLater();

    emit setPermissionsForRoleSignal(output);
    
}
void
SWGAuthRolesApi::setUserRoles(qint32 user_id, QList<QString*>* roles_list) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/users/{user_id}/roles");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QJsonArray* roles_listArray = new QJsonArray();
    toJsonArray((QList<void*>*)roles_list, roles_listArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*roles_listArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::setUserRolesCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::setUserRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUserResource* output = static_cast<SWGUserResource*>(create(json, QString("SWGUserResource")));
    

    worker->deleteLater();

    emit setUserRolesSignal(output);
    
}
void
SWGAuthRolesApi::updateRole(QString* role, SWGRoleResource role_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/roles/{role}");

    QString rolePathParam("{"); rolePathParam.append("role").append("}");
    fullPath.replace(rolePathParam, stringValue(role));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = role_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthRolesApi::updateRoleCallback);

    worker->execute(&input);
}

void
SWGAuthRolesApi::updateRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGRoleResource* output = static_cast<SWGRoleResource*>(create(json, QString("SWGRoleResource")));
    

    worker->deleteLater();

    emit updateRoleSignal(output);
    
}
} /* namespace Swagger */
