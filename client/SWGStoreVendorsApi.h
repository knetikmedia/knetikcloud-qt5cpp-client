/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreVendorsApi_H_
#define _SWG_SWGStoreVendorsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGItemTemplateResource.h"
#include "SWGPageResource«ItemTemplateResource».h"
#include "SWGPageResource«VendorResource».h"
#include "SWGResult.h"
#include "SWGVendorResource.h"

#include <QObject>

namespace Swagger {

class SWGStoreVendorsApi: public QObject {
    Q_OBJECT

public:
    SWGStoreVendorsApi();
    SWGStoreVendorsApi(QString host, QString basePath);
    ~SWGStoreVendorsApi();

    QString host;
    QString basePath;

    void createVendor(SWGVendorResource vendor);
    void createVendorTemplate(SWGItemTemplateResource vendor_template_resource);
    void deleteVendor(qint32 id);
    void deleteVendorTemplate(QString* id, QString* cascade);
    void getVendor(qint32 id);
    void getVendorTemplate(QString* id);
    void getVendorTemplates(qint32 size, qint32 page, QString* order);
    void getVendors(QString* filter_name, qint32 size, qint32 page, QString* order);
    void updateVendor(qint32 id, SWGVendorResource vendor);
    void updateVendorTemplate(QString* id, SWGItemTemplateResource vendor_template_resource);
    
private:
    void createVendorCallback (HttpRequestWorker * worker);
    void createVendorTemplateCallback (HttpRequestWorker * worker);
    void deleteVendorCallback (HttpRequestWorker * worker);
    void deleteVendorTemplateCallback (HttpRequestWorker * worker);
    void getVendorCallback (HttpRequestWorker * worker);
    void getVendorTemplateCallback (HttpRequestWorker * worker);
    void getVendorTemplatesCallback (HttpRequestWorker * worker);
    void getVendorsCallback (HttpRequestWorker * worker);
    void updateVendorCallback (HttpRequestWorker * worker);
    void updateVendorTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createVendorSignal(SWGVendorResource* summary);
    void createVendorTemplateSignal(SWGItemTemplateResource* summary);
    void deleteVendorSignal();
    void deleteVendorTemplateSignal();
    void getVendorSignal(SWGVendorResource* summary);
    void getVendorTemplateSignal(SWGItemTemplateResource* summary);
    void getVendorTemplatesSignal(SWGPageResource«ItemTemplateResource»* summary);
    void getVendorsSignal(SWGPageResource«VendorResource»* summary);
    void updateVendorSignal(SWGVendorResource* summary);
    void updateVendorTemplateSignal(SWGItemTemplateResource* summary);
    
};
}
#endif
