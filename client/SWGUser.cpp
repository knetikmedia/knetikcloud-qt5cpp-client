/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGUser::SWGUser(QString* json) {
    init();
    this->fromJson(*json);
}

SWGUser::SWGUser() {
    init();
}

SWGUser::~SWGUser() {
    this->cleanup();
}

void
SWGUser::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    address = new QString("");
    address2 = new QString("");
    affiliate = new SWGAffiliate();
    avatar_url = new QString("");
    children = new QList<SWGUserRelationship*>();
    city = new QString("");
    country = new SWGCountry();
    currency = new SWGCurrency();
    date_created = 0L;
    date_of_birth = 0L;
    date_updated = 0L;
    description = new QString("");
    display_name = new QString("");
    email = new QString("");
    first_name = new QString("");
    fullname = new QString("");
    gender = new QString("");
    groups = new QList<SWGGroupMember*>();
    guest = false;
    id = 0;
    invite_token = new QString("");
    lang = new SWGLanguage();
    last_activity = 0L;
    last_login = 0L;
    last_name = new QString("");
    lockout_attempts = 0;
    lockout_date = 0L;
    mobile_number = new QString("");
    old_id = 0;
    parents = new QList<SWGUserRelationship*>();
    password = new QString("");
    postal_code = new QString("");
    properties_string = new QString("");
    roles = new QList<SWGRole*>();
    state = new QString("");
    status = new QString("");
    tag_strings = new QList<QString*>();
    tags = new QList<SWGUserTag*>();
    template = new QString("");
    timezone = new SWGTimezone();
    token = new QString("");
    type_hint = new QString("");
    username = new QString("");
}

void
SWGUser::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(address != nullptr) {
        delete address;
    }

    if(address2 != nullptr) {
        delete address2;
    }

    if(affiliate != nullptr) {
        delete affiliate;
    }

    if(avatar_url != nullptr) {
        delete avatar_url;
    }

    if(children != nullptr) {
        QList<SWGUserRelationship*>* arr = children;
        foreach(SWGUserRelationship* o, *arr) {
            delete o;
        }
        delete children;
    }

    if(city != nullptr) {
        delete city;
    }

    if(country != nullptr) {
        delete country;
    }

    if(currency != nullptr) {
        delete currency;
    }




    if(description != nullptr) {
        delete description;
    }

    if(display_name != nullptr) {
        delete display_name;
    }

    if(email != nullptr) {
        delete email;
    }

    if(first_name != nullptr) {
        delete first_name;
    }

    if(fullname != nullptr) {
        delete fullname;
    }

    if(gender != nullptr) {
        delete gender;
    }

    if(groups != nullptr) {
        QList<SWGGroupMember*>* arr = groups;
        foreach(SWGGroupMember* o, *arr) {
            delete o;
        }
        delete groups;
    }



    if(invite_token != nullptr) {
        delete invite_token;
    }

    if(lang != nullptr) {
        delete lang;
    }



    if(last_name != nullptr) {
        delete last_name;
    }



    if(mobile_number != nullptr) {
        delete mobile_number;
    }


    if(parents != nullptr) {
        QList<SWGUserRelationship*>* arr = parents;
        foreach(SWGUserRelationship* o, *arr) {
            delete o;
        }
        delete parents;
    }

    if(password != nullptr) {
        delete password;
    }

    if(postal_code != nullptr) {
        delete postal_code;
    }

    if(properties_string != nullptr) {
        delete properties_string;
    }

    if(roles != nullptr) {
        QList<SWGRole*>* arr = roles;
        foreach(SWGRole* o, *arr) {
            delete o;
        }
        delete roles;
    }

    if(state != nullptr) {
        delete state;
    }

    if(status != nullptr) {
        delete status;
    }

    if(tag_strings != nullptr) {
        QList<QString*>* arr = tag_strings;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete tag_strings;
    }

    if(tags != nullptr) {
        QList<SWGUserTag*>* arr = tags;
        foreach(SWGUserTag* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(template != nullptr) {
        delete template;
    }

    if(timezone != nullptr) {
        delete timezone;
    }

    if(token != nullptr) {
        delete token;
    }

    if(type_hint != nullptr) {
        delete type_hint;
    }

    if(username != nullptr) {
        delete username;
    }
}

SWGUser*
SWGUser::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUser::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&address, pJson["address"], "QString", "QString");
    ::Swagger::setValue(&address2, pJson["address2"], "QString", "QString");
    ::Swagger::setValue(&affiliate, pJson["affiliate"], "SWGAffiliate", "SWGAffiliate");
    ::Swagger::setValue(&avatar_url, pJson["avatar_url"], "QString", "QString");
    
    ::Swagger::setValue(&children, pJson["children"], "QList", "SWGUserRelationship");
    
    ::Swagger::setValue(&city, pJson["city"], "QString", "QString");
    ::Swagger::setValue(&country, pJson["country"], "SWGCountry", "SWGCountry");
    ::Swagger::setValue(&currency, pJson["currency"], "SWGCurrency", "SWGCurrency");
    ::Swagger::setValue(&date_created, pJson["date_created"], "qint64", "");
    ::Swagger::setValue(&date_of_birth, pJson["date_of_birth"], "qint64", "");
    ::Swagger::setValue(&date_updated, pJson["date_updated"], "qint64", "");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&display_name, pJson["display_name"], "QString", "QString");
    ::Swagger::setValue(&email, pJson["email"], "QString", "QString");
    ::Swagger::setValue(&first_name, pJson["first_name"], "QString", "QString");
    ::Swagger::setValue(&fullname, pJson["fullname"], "QString", "QString");
    ::Swagger::setValue(&gender, pJson["gender"], "QString", "QString");
    
    ::Swagger::setValue(&groups, pJson["groups"], "QList", "SWGGroupMember");
    
    ::Swagger::setValue(&guest, pJson["guest"], "bool", "");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&invite_token, pJson["invite_token"], "QString", "QString");
    ::Swagger::setValue(&lang, pJson["lang"], "SWGLanguage", "SWGLanguage");
    ::Swagger::setValue(&last_activity, pJson["last_activity"], "qint64", "");
    ::Swagger::setValue(&last_login, pJson["last_login"], "qint64", "");
    ::Swagger::setValue(&last_name, pJson["last_name"], "QString", "QString");
    ::Swagger::setValue(&lockout_attempts, pJson["lockout_attempts"], "qint32", "");
    ::Swagger::setValue(&lockout_date, pJson["lockout_date"], "qint64", "");
    ::Swagger::setValue(&mobile_number, pJson["mobile_number"], "QString", "QString");
    ::Swagger::setValue(&old_id, pJson["old_id"], "qint32", "");
    
    ::Swagger::setValue(&parents, pJson["parents"], "QList", "SWGUserRelationship");
    
    ::Swagger::setValue(&password, pJson["password"], "QString", "QString");
    ::Swagger::setValue(&postal_code, pJson["postal_code"], "QString", "QString");
    ::Swagger::setValue(&properties_string, pJson["properties_string"], "QString", "QString");
    
    ::Swagger::setValue(&roles, pJson["roles"], "QList", "SWGRole");
    
    ::Swagger::setValue(&state, pJson["state"], "QString", "QString");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    
    ::Swagger::setValue(&tag_strings, pJson["tag_strings"], "QList", "QString");
    
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "SWGUserTag");
    
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&timezone, pJson["timezone"], "SWGTimezone", "SWGTimezone");
    ::Swagger::setValue(&token, pJson["token"], "QString", "QString");
    ::Swagger::setValue(&type_hint, pJson["type_hint"], "QString", "QString");
    ::Swagger::setValue(&username, pJson["username"], "QString", "QString");
}

QString
SWGUser::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGUser::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    toJsonValue(QString("address"), address, obj, QString("QString"));

    toJsonValue(QString("address2"), address2, obj, QString("QString"));

    toJsonValue(QString("affiliate"), affiliate, obj, QString("SWGAffiliate"));

    toJsonValue(QString("avatar_url"), avatar_url, obj, QString("QString"));

    QJsonArray childrenJsonArray;
    toJsonArray((QList<void*>*)children, &childrenJsonArray, "children", "SWGUserRelationship");
    obj->insert("children", childrenJsonArray);

    toJsonValue(QString("city"), city, obj, QString("QString"));

    toJsonValue(QString("country"), country, obj, QString("SWGCountry"));

    toJsonValue(QString("currency"), currency, obj, QString("SWGCurrency"));

    obj->insert("date_created", QJsonValue(date_created));

    obj->insert("date_of_birth", QJsonValue(date_of_birth));

    obj->insert("date_updated", QJsonValue(date_updated));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("display_name"), display_name, obj, QString("QString"));

    toJsonValue(QString("email"), email, obj, QString("QString"));

    toJsonValue(QString("first_name"), first_name, obj, QString("QString"));

    toJsonValue(QString("fullname"), fullname, obj, QString("QString"));

    toJsonValue(QString("gender"), gender, obj, QString("QString"));

    QJsonArray groupsJsonArray;
    toJsonArray((QList<void*>*)groups, &groupsJsonArray, "groups", "SWGGroupMember");
    obj->insert("groups", groupsJsonArray);

    obj->insert("guest", QJsonValue(guest));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("invite_token"), invite_token, obj, QString("QString"));

    toJsonValue(QString("lang"), lang, obj, QString("SWGLanguage"));

    obj->insert("last_activity", QJsonValue(last_activity));

    obj->insert("last_login", QJsonValue(last_login));

    toJsonValue(QString("last_name"), last_name, obj, QString("QString"));

    obj->insert("lockout_attempts", QJsonValue(lockout_attempts));

    obj->insert("lockout_date", QJsonValue(lockout_date));

    toJsonValue(QString("mobile_number"), mobile_number, obj, QString("QString"));

    obj->insert("old_id", QJsonValue(old_id));

    QJsonArray parentsJsonArray;
    toJsonArray((QList<void*>*)parents, &parentsJsonArray, "parents", "SWGUserRelationship");
    obj->insert("parents", parentsJsonArray);

    toJsonValue(QString("password"), password, obj, QString("QString"));

    toJsonValue(QString("postal_code"), postal_code, obj, QString("QString"));

    toJsonValue(QString("properties_string"), properties_string, obj, QString("QString"));

    QJsonArray rolesJsonArray;
    toJsonArray((QList<void*>*)roles, &rolesJsonArray, "roles", "SWGRole");
    obj->insert("roles", rolesJsonArray);

    toJsonValue(QString("state"), state, obj, QString("QString"));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    QJsonArray tag_stringsJsonArray;
    toJsonArray((QList<void*>*)tag_strings, &tag_stringsJsonArray, "tag_strings", "QString");
    obj->insert("tag_strings", tag_stringsJsonArray);

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "SWGUserTag");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("template"), template, obj, QString("QString"));

    toJsonValue(QString("timezone"), timezone, obj, QString("SWGTimezone"));

    toJsonValue(QString("token"), token, obj, QString("QString"));

    toJsonValue(QString("type_hint"), type_hint, obj, QString("QString"));

    toJsonValue(QString("username"), username, obj, QString("QString"));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGUser::getAdditionalProperties() {
    return additional_properties;
}
void
SWGUser::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QString*
SWGUser::getAddress() {
    return address;
}
void
SWGUser::setAddress(QString* address) {
    this->address = address;
}

QString*
SWGUser::getAddress2() {
    return address2;
}
void
SWGUser::setAddress2(QString* address2) {
    this->address2 = address2;
}

SWGAffiliate*
SWGUser::getAffiliate() {
    return affiliate;
}
void
SWGUser::setAffiliate(SWGAffiliate* affiliate) {
    this->affiliate = affiliate;
}

QString*
SWGUser::getAvatarUrl() {
    return avatar_url;
}
void
SWGUser::setAvatarUrl(QString* avatar_url) {
    this->avatar_url = avatar_url;
}

QList<SWGUserRelationship*>*
SWGUser::getChildren() {
    return children;
}
void
SWGUser::setChildren(QList<SWGUserRelationship*>* children) {
    this->children = children;
}

QString*
SWGUser::getCity() {
    return city;
}
void
SWGUser::setCity(QString* city) {
    this->city = city;
}

SWGCountry*
SWGUser::getCountry() {
    return country;
}
void
SWGUser::setCountry(SWGCountry* country) {
    this->country = country;
}

SWGCurrency*
SWGUser::getCurrency() {
    return currency;
}
void
SWGUser::setCurrency(SWGCurrency* currency) {
    this->currency = currency;
}

qint64
SWGUser::getDateCreated() {
    return date_created;
}
void
SWGUser::setDateCreated(qint64 date_created) {
    this->date_created = date_created;
}

qint64
SWGUser::getDateOfBirth() {
    return date_of_birth;
}
void
SWGUser::setDateOfBirth(qint64 date_of_birth) {
    this->date_of_birth = date_of_birth;
}

qint64
SWGUser::getDateUpdated() {
    return date_updated;
}
void
SWGUser::setDateUpdated(qint64 date_updated) {
    this->date_updated = date_updated;
}

QString*
SWGUser::getDescription() {
    return description;
}
void
SWGUser::setDescription(QString* description) {
    this->description = description;
}

QString*
SWGUser::getDisplayName() {
    return display_name;
}
void
SWGUser::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

QString*
SWGUser::getEmail() {
    return email;
}
void
SWGUser::setEmail(QString* email) {
    this->email = email;
}

QString*
SWGUser::getFirstName() {
    return first_name;
}
void
SWGUser::setFirstName(QString* first_name) {
    this->first_name = first_name;
}

QString*
SWGUser::getFullname() {
    return fullname;
}
void
SWGUser::setFullname(QString* fullname) {
    this->fullname = fullname;
}

QString*
SWGUser::getGender() {
    return gender;
}
void
SWGUser::setGender(QString* gender) {
    this->gender = gender;
}

QList<SWGGroupMember*>*
SWGUser::getGroups() {
    return groups;
}
void
SWGUser::setGroups(QList<SWGGroupMember*>* groups) {
    this->groups = groups;
}

bool
SWGUser::getGuest() {
    return guest;
}
void
SWGUser::setGuest(bool guest) {
    this->guest = guest;
}

qint32
SWGUser::getId() {
    return id;
}
void
SWGUser::setId(qint32 id) {
    this->id = id;
}

QString*
SWGUser::getInviteToken() {
    return invite_token;
}
void
SWGUser::setInviteToken(QString* invite_token) {
    this->invite_token = invite_token;
}

SWGLanguage*
SWGUser::getLang() {
    return lang;
}
void
SWGUser::setLang(SWGLanguage* lang) {
    this->lang = lang;
}

qint64
SWGUser::getLastActivity() {
    return last_activity;
}
void
SWGUser::setLastActivity(qint64 last_activity) {
    this->last_activity = last_activity;
}

qint64
SWGUser::getLastLogin() {
    return last_login;
}
void
SWGUser::setLastLogin(qint64 last_login) {
    this->last_login = last_login;
}

QString*
SWGUser::getLastName() {
    return last_name;
}
void
SWGUser::setLastName(QString* last_name) {
    this->last_name = last_name;
}

qint32
SWGUser::getLockoutAttempts() {
    return lockout_attempts;
}
void
SWGUser::setLockoutAttempts(qint32 lockout_attempts) {
    this->lockout_attempts = lockout_attempts;
}

qint64
SWGUser::getLockoutDate() {
    return lockout_date;
}
void
SWGUser::setLockoutDate(qint64 lockout_date) {
    this->lockout_date = lockout_date;
}

QString*
SWGUser::getMobileNumber() {
    return mobile_number;
}
void
SWGUser::setMobileNumber(QString* mobile_number) {
    this->mobile_number = mobile_number;
}

qint32
SWGUser::getOldId() {
    return old_id;
}
void
SWGUser::setOldId(qint32 old_id) {
    this->old_id = old_id;
}

QList<SWGUserRelationship*>*
SWGUser::getParents() {
    return parents;
}
void
SWGUser::setParents(QList<SWGUserRelationship*>* parents) {
    this->parents = parents;
}

QString*
SWGUser::getPassword() {
    return password;
}
void
SWGUser::setPassword(QString* password) {
    this->password = password;
}

QString*
SWGUser::getPostalCode() {
    return postal_code;
}
void
SWGUser::setPostalCode(QString* postal_code) {
    this->postal_code = postal_code;
}

QString*
SWGUser::getPropertiesString() {
    return properties_string;
}
void
SWGUser::setPropertiesString(QString* properties_string) {
    this->properties_string = properties_string;
}

QList<SWGRole*>*
SWGUser::getRoles() {
    return roles;
}
void
SWGUser::setRoles(QList<SWGRole*>* roles) {
    this->roles = roles;
}

QString*
SWGUser::getState() {
    return state;
}
void
SWGUser::setState(QString* state) {
    this->state = state;
}

QString*
SWGUser::getStatus() {
    return status;
}
void
SWGUser::setStatus(QString* status) {
    this->status = status;
}

QList<QString*>*
SWGUser::getTagStrings() {
    return tag_strings;
}
void
SWGUser::setTagStrings(QList<QString*>* tag_strings) {
    this->tag_strings = tag_strings;
}

QList<SWGUserTag*>*
SWGUser::getTags() {
    return tags;
}
void
SWGUser::setTags(QList<SWGUserTag*>* tags) {
    this->tags = tags;
}

QString*
SWGUser::getTemplate() {
    return template;
}
void
SWGUser::setTemplate(QString* template) {
    this->template = template;
}

SWGTimezone*
SWGUser::getTimezone() {
    return timezone;
}
void
SWGUser::setTimezone(SWGTimezone* timezone) {
    this->timezone = timezone;
}

QString*
SWGUser::getToken() {
    return token;
}
void
SWGUser::setToken(QString* token) {
    this->token = token;
}

QString*
SWGUser::getTypeHint() {
    return type_hint;
}
void
SWGUser::setTypeHint(QString* type_hint) {
    this->type_hint = type_hint;
}

QString*
SWGUser::getUsername() {
    return username;
}
void
SWGUser::setUsername(QString* username) {
    this->username = username;
}



} /* namespace Swagger */

