/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGArtistResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGArtistResource::SWGArtistResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGArtistResource::SWGArtistResource() {
    init();
}

SWGArtistResource::~SWGArtistResource() {
    this->cleanup();
}

void
SWGArtistResource::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    born = new QString("");
    contribution_count = 0;
    contributions = new QList<SWGContributionResource*>();
    created_date = 0L;
    died = new QString("");
    id = 0L;
    long_description = new QString("");
    name = new QString("");
    priority = 0;
    short_description = new QString("");
    template = new QString("");
    updated_date = 0L;
}

void
SWGArtistResource::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(born != nullptr) {
        delete born;
    }


    if(contributions != nullptr) {
        QList<SWGContributionResource*>* arr = contributions;
        foreach(SWGContributionResource* o, *arr) {
            delete o;
        }
        delete contributions;
    }


    if(died != nullptr) {
        delete died;
    }


    if(long_description != nullptr) {
        delete long_description;
    }

    if(name != nullptr) {
        delete name;
    }


    if(short_description != nullptr) {
        delete short_description;
    }

    if(template != nullptr) {
        delete template;
    }

}

SWGArtistResource*
SWGArtistResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGArtistResource::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&born, pJson["born"], "QString", "QString");
    ::Swagger::setValue(&contribution_count, pJson["contribution_count"], "qint32", "");
    
    ::Swagger::setValue(&contributions, pJson["contributions"], "QList", "SWGContributionResource");
    
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&died, pJson["died"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&priority, pJson["priority"], "qint32", "");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&template, pJson["template"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGArtistResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGArtistResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    toJsonValue(QString("born"), born, obj, QString("QString"));

    obj->insert("contribution_count", QJsonValue(contribution_count));

    QJsonArray contributionsJsonArray;
    toJsonArray((QList<void*>*)contributions, &contributionsJsonArray, "contributions", "SWGContributionResource");
    obj->insert("contributions", contributionsJsonArray);

    obj->insert("created_date", QJsonValue(created_date));

    toJsonValue(QString("died"), died, obj, QString("QString"));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("priority", QJsonValue(priority));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    toJsonValue(QString("template"), template, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGArtistResource::getAdditionalProperties() {
    return additional_properties;
}
void
SWGArtistResource::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QString*
SWGArtistResource::getBorn() {
    return born;
}
void
SWGArtistResource::setBorn(QString* born) {
    this->born = born;
}

qint32
SWGArtistResource::getContributionCount() {
    return contribution_count;
}
void
SWGArtistResource::setContributionCount(qint32 contribution_count) {
    this->contribution_count = contribution_count;
}

QList<SWGContributionResource*>*
SWGArtistResource::getContributions() {
    return contributions;
}
void
SWGArtistResource::setContributions(QList<SWGContributionResource*>* contributions) {
    this->contributions = contributions;
}

qint64
SWGArtistResource::getCreatedDate() {
    return created_date;
}
void
SWGArtistResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QString*
SWGArtistResource::getDied() {
    return died;
}
void
SWGArtistResource::setDied(QString* died) {
    this->died = died;
}

qint64
SWGArtistResource::getId() {
    return id;
}
void
SWGArtistResource::setId(qint64 id) {
    this->id = id;
}

QString*
SWGArtistResource::getLongDescription() {
    return long_description;
}
void
SWGArtistResource::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGArtistResource::getName() {
    return name;
}
void
SWGArtistResource::setName(QString* name) {
    this->name = name;
}

qint32
SWGArtistResource::getPriority() {
    return priority;
}
void
SWGArtistResource::setPriority(qint32 priority) {
    this->priority = priority;
}

QString*
SWGArtistResource::getShortDescription() {
    return short_description;
}
void
SWGArtistResource::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

QString*
SWGArtistResource::getTemplate() {
    return template;
}
void
SWGArtistResource::setTemplate(QString* template) {
    this->template = template;
}

qint64
SWGArtistResource::getUpdatedDate() {
    return updated_date;
}
void
SWGArtistResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

