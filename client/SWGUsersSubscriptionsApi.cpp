/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUsersSubscriptionsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGUsersSubscriptionsApi::SWGUsersSubscriptionsApi() {}

SWGUsersSubscriptionsApi::~SWGUsersSubscriptionsApi() {}

SWGUsersSubscriptionsApi::SWGUsersSubscriptionsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUsersSubscriptionsApi::getUserSubscriptionDetails(qint32 user_id, qint32 inventory_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::getUserSubscriptionDetailsCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::getUserSubscriptionDetailsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInventorySubscriptionResource* output = static_cast<SWGInventorySubscriptionResource*>(create(json, QString("SWGInventorySubscriptionResource")));
    

    worker->deleteLater();

    emit getUserSubscriptionDetailsSignal(output);
    
}
void
SWGUsersSubscriptionsApi::getUsersSubscriptionDetails(qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::getUsersSubscriptionDetailsCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::getUsersSubscriptionDetailsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGInventorySubscriptionResource*>* output = new QList<SWGInventorySubscriptionResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGInventorySubscriptionResource* o = new SWGInventorySubscriptionResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getUsersSubscriptionDetailsSignal(output);
    
}
void
SWGUsersSubscriptionsApi::reactivateUserSubscription(qint32 user_id, qint32 inventory_id, SWGReactivateSubscriptionRequest reactivate_subscription_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}/reactivate");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = reactivate_subscription_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::reactivateUserSubscriptionCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::reactivateUserSubscriptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInvoiceResource* output = static_cast<SWGInvoiceResource*>(create(json, QString("SWGInvoiceResource")));
    

    worker->deleteLater();

    emit reactivateUserSubscriptionSignal(output);
    
}
void
SWGUsersSubscriptionsApi::setSubscriptionBillDate(qint32 user_id, qint32 inventory_id, qint64 bill_date) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}/bill-date");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = bill_date.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::setSubscriptionBillDateCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::setSubscriptionBillDateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setSubscriptionBillDateSignal();
}
void
SWGUsersSubscriptionsApi::setSubscriptionPaymentMethod(qint32 user_id, qint32 inventory_id, qint32 payment_method_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}/payment-method");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = payment_method_id.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::setSubscriptionPaymentMethodCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::setSubscriptionPaymentMethodCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setSubscriptionPaymentMethodSignal();
}
void
SWGUsersSubscriptionsApi::setSubscriptionStatus(qint32 user_id, qint32 inventory_id, QString* status) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}/status");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = status.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::setSubscriptionStatusCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::setSubscriptionStatusCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setSubscriptionStatusSignal();
}
void
SWGUsersSubscriptionsApi::setUserSubscriptionPlan(qint32 user_id, qint32 inventory_id, QString* plan_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/subscriptions/{inventory_id}/plan");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString inventory_idPathParam("{"); inventory_idPathParam.append("inventory_id").append("}");
    fullPath.replace(inventory_idPathParam, stringValue(inventory_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = plan_id.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersSubscriptionsApi::setUserSubscriptionPlanCallback);

    worker->execute(&input);
}

void
SWGUsersSubscriptionsApi::setUserSubscriptionPlanCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setUserSubscriptionPlanSignal();
}
} /* namespace Swagger */
