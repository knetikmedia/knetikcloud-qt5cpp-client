/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGPaymentsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGPaymentsApi::SWGPaymentsApi() {}

SWGPaymentsApi::~SWGPaymentsApi() {}

SWGPaymentsApi::SWGPaymentsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPaymentsApi::createPaymentMethod(qint32 user_id, SWGPaymentMethodResource payment_method) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/payment-methods");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = payment_method.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::createPaymentMethodCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::createPaymentMethodCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPaymentMethodResource* output = static_cast<SWGPaymentMethodResource*>(create(json, QString("SWGPaymentMethodResource")));
    

    worker->deleteLater();

    emit createPaymentMethodSignal(output);
    
}
void
SWGPaymentsApi::deletePaymentMethod(qint32 user_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/payment-methods/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::deletePaymentMethodCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::deletePaymentMethodCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deletePaymentMethodSignal();
}
void
SWGPaymentsApi::getPaymentMethod(qint32 user_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/payment-methods/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::getPaymentMethodCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::getPaymentMethodCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPaymentMethodResource* output = static_cast<SWGPaymentMethodResource*>(create(json, QString("SWGPaymentMethodResource")));
    

    worker->deleteLater();

    emit getPaymentMethodSignal(output);
    
}
void
SWGPaymentsApi::getPaymentMethods(qint32 user_id, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/payment-methods");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::getPaymentMethodsCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::getPaymentMethodsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGPaymentMethodResource*>* output = new QList<SWGPaymentMethodResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGPaymentMethodResource* o = new SWGPaymentMethodResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getPaymentMethodsSignal(output);
    
}
void
SWGPaymentsApi::paymentAuthorization(SWGPaymentAuthorizationResource request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/authorizations");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::paymentAuthorizationCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::paymentAuthorizationCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPaymentAuthorizationResource* output = static_cast<SWGPaymentAuthorizationResource*>(create(json, QString("SWGPaymentAuthorizationResource")));
    

    worker->deleteLater();

    emit paymentAuthorizationSignal(output);
    
}
void
SWGPaymentsApi::paymentCapture(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/payment/authorizations/{id}/capture");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::paymentCaptureCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::paymentCaptureCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit paymentCaptureSignal();
}
void
SWGPaymentsApi::updatePaymentMethod(qint32 user_id, qint32 id, SWGPaymentMethodResource payment_method) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/payment-methods/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = payment_method.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGPaymentsApi::updatePaymentMethodCallback);

    worker->execute(&input);
}

void
SWGPaymentsApi::updatePaymentMethodCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPaymentMethodResource* output = static_cast<SWGPaymentMethodResource*>(create(json, QString("SWGPaymentMethodResource")));
    

    worker->deleteLater();

    emit updatePaymentMethodSignal(output);
    
}
} /* namespace Swagger */
