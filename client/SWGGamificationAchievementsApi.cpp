/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGGamificationAchievementsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGGamificationAchievementsApi::SWGGamificationAchievementsApi() {}

SWGGamificationAchievementsApi::~SWGGamificationAchievementsApi() {}

SWGGamificationAchievementsApi::SWGGamificationAchievementsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGGamificationAchievementsApi::createAchievement(SWGAchievementDefinitionResource achievement) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = achievement.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::createAchievementCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::createAchievementCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAchievementDefinitionResource* output = static_cast<SWGAchievementDefinitionResource*>(create(json, QString("SWGAchievementDefinitionResource")));
    

    worker->deleteLater();

    emit createAchievementSignal(output);
    
}
void
SWGGamificationAchievementsApi::createAchievementTemplate(SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::createAchievementTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::createAchievementTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createAchievementTemplateSignal(output);
    
}
void
SWGGamificationAchievementsApi::deleteAchievement(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::deleteAchievementCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::deleteAchievementCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteAchievementSignal();
}
void
SWGGamificationAchievementsApi::deleteAchievementTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::deleteAchievementTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::deleteAchievementTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteAchievementTemplateSignal();
}
void
SWGGamificationAchievementsApi::getAchievement(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getAchievementCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getAchievementCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAchievementDefinitionResource* output = static_cast<SWGAchievementDefinitionResource*>(create(json, QString("SWGAchievementDefinitionResource")));
    

    worker->deleteLater();

    emit getAchievementSignal(output);
    
}
void
SWGGamificationAchievementsApi::getAchievementTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getAchievementTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getAchievementTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getAchievementTemplateSignal(output);
    
}
void
SWGGamificationAchievementsApi::getAchievementTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getAchievementTemplatesCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getAchievementTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getAchievementTemplatesSignal(output);
    
}
void
SWGGamificationAchievementsApi::getAchievementTriggers() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/triggers");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getAchievementTriggersCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getAchievementTriggersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGBreTriggerResource*>* output = new QList<SWGBreTriggerResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGBreTriggerResource* o = new SWGBreTriggerResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getAchievementTriggersSignal(output);
    
}
void
SWGGamificationAchievementsApi::getAchievements(QString* filter_tagset, QString* filter_name, bool filter_hidden, bool filter_derived, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_hidden"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_hidden)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_derived"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_derived)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getAchievementsCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getAchievementsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«AchievementDefinitionResource»* output = static_cast<SWGPageResource«AchievementDefinitionResource»*>(create(json, QString("SWGPageResource«AchievementDefinitionResource»")));
    

    worker->deleteLater();

    emit getAchievementsSignal(output);
    
}
void
SWGGamificationAchievementsApi::getDerivedAchievements(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/derived/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getDerivedAchievementsCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getDerivedAchievementsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGAchievementDefinitionResource*>* output = new QList<SWGAchievementDefinitionResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGAchievementDefinitionResource* o = new SWGAchievementDefinitionResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getDerivedAchievementsSignal(output);
    
}
void
SWGGamificationAchievementsApi::getUserAchievementProgress(qint32 user_id, QString* achievement_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/achievements/{achievement_name}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString achievement_namePathParam("{"); achievement_namePathParam.append("achievement_name").append("}");
    fullPath.replace(achievement_namePathParam, stringValue(achievement_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getUserAchievementProgressCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getUserAchievementProgressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUserAchievementGroupResource* output = static_cast<SWGUserAchievementGroupResource*>(create(json, QString("SWGUserAchievementGroupResource")));
    

    worker->deleteLater();

    emit getUserAchievementProgressSignal(output);
    
}
void
SWGGamificationAchievementsApi::getUserAchievementsProgress(qint32 user_id, bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/achievements");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_derived"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_derived)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getUserAchievementsProgressCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getUserAchievementsProgressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UserAchievementGroupResource»* output = static_cast<SWGPageResource«UserAchievementGroupResource»*>(create(json, QString("SWGPageResource«UserAchievementGroupResource»")));
    

    worker->deleteLater();

    emit getUserAchievementsProgressSignal(output);
    
}
void
SWGGamificationAchievementsApi::getUsersAchievementProgress(QString* achievement_name, bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/achievements/{achievement_name}");

    QString achievement_namePathParam("{"); achievement_namePathParam.append("achievement_name").append("}");
    fullPath.replace(achievement_namePathParam, stringValue(achievement_name));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_derived"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_derived)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getUsersAchievementProgressCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getUsersAchievementProgressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UserAchievementGroupResource»* output = static_cast<SWGPageResource«UserAchievementGroupResource»*>(create(json, QString("SWGPageResource«UserAchievementGroupResource»")));
    

    worker->deleteLater();

    emit getUsersAchievementProgressSignal(output);
    
}
void
SWGGamificationAchievementsApi::getUsersAchievementsProgress(bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/achievements");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_derived"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_derived)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_achievement_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_achievement_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::getUsersAchievementsProgressCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::getUsersAchievementsProgressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UserAchievementGroupResource»* output = static_cast<SWGPageResource«UserAchievementGroupResource»*>(create(json, QString("SWGPageResource«UserAchievementGroupResource»")));
    

    worker->deleteLater();

    emit getUsersAchievementsProgressSignal(output);
    
}
void
SWGGamificationAchievementsApi::updateAchievement(QString* name, SWGAchievementDefinitionResource achievement) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = achievement.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::updateAchievementCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::updateAchievementCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAchievementDefinitionResource* output = static_cast<SWGAchievementDefinitionResource*>(create(json, QString("SWGAchievementDefinitionResource")));
    

    worker->deleteLater();

    emit updateAchievementSignal(output);
    
}
void
SWGGamificationAchievementsApi::updateAchievementProgress(qint32 user_id, QString* achievement_name, SWGAchievementProgressUpdateRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/achievements/{achievement_name}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString achievement_namePathParam("{"); achievement_namePathParam.append("achievement_name").append("}");
    fullPath.replace(achievement_namePathParam, stringValue(achievement_name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::updateAchievementProgressCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::updateAchievementProgressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUserAchievementGroupResource* output = static_cast<SWGUserAchievementGroupResource*>(create(json, QString("SWGUserAchievementGroupResource")));
    

    worker->deleteLater();

    emit updateAchievementProgressSignal(output);
    
}
void
SWGGamificationAchievementsApi::updateAchievementTemplate(QString* id, SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/achievements/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationAchievementsApi::updateAchievementTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationAchievementsApi::updateAchievementTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateAchievementTemplateSignal(output);
    
}
} /* namespace Swagger */
