/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSku.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSku::SWGSku(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSku::SWGSku() {
    init();
}

SWGSku::~SWGSku() {
    this->cleanup();
}

void
SWGSku::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    currency_code = new QString("");
    description = new QString("");
    inventory = 0;
    min_inventory_threshold = 0;
    original_price = 0.0;
    price = 0.0;
    published = false;
    sale_id = 0;
    sale_name = new QString("");
    sku = new QString("");
    start_date = 0L;
    stop_date = 0L;
}

void
SWGSku::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }

    if(currency_code != nullptr) {
        delete currency_code;
    }

    if(description != nullptr) {
        delete description;
    }







    if(sale_name != nullptr) {
        delete sale_name;
    }

    if(sku != nullptr) {
        delete sku;
    }


}

SWGSku*
SWGSku::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSku::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&currency_code, pJson["currency_code"], "QString", "QString");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&inventory, pJson["inventory"], "qint32", "");
    ::Swagger::setValue(&min_inventory_threshold, pJson["min_inventory_threshold"], "qint32", "");
    ::Swagger::setValue(&original_price, pJson["original_price"], "double", "");
    ::Swagger::setValue(&price, pJson["price"], "double", "");
    ::Swagger::setValue(&published, pJson["published"], "bool", "");
    ::Swagger::setValue(&sale_id, pJson["sale_id"], "qint32", "");
    ::Swagger::setValue(&sale_name, pJson["sale_name"], "QString", "QString");
    ::Swagger::setValue(&sku, pJson["sku"], "QString", "QString");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
    ::Swagger::setValue(&stop_date, pJson["stop_date"], "qint64", "");
}

QString
SWGSku::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSku::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    toJsonValue(QString("currency_code"), currency_code, obj, QString("QString"));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    obj->insert("inventory", QJsonValue(inventory));

    obj->insert("min_inventory_threshold", QJsonValue(min_inventory_threshold));

    obj->insert("original_price", QJsonValue(original_price));

    obj->insert("price", QJsonValue(price));

    obj->insert("published", QJsonValue(published));

    obj->insert("sale_id", QJsonValue(sale_id));

    toJsonValue(QString("sale_name"), sale_name, obj, QString("QString"));

    toJsonValue(QString("sku"), sku, obj, QString("QString"));

    obj->insert("start_date", QJsonValue(start_date));

    obj->insert("stop_date", QJsonValue(stop_date));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGSku::getAdditionalProperties() {
    return additional_properties;
}
void
SWGSku::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

QString*
SWGSku::getCurrencyCode() {
    return currency_code;
}
void
SWGSku::setCurrencyCode(QString* currency_code) {
    this->currency_code = currency_code;
}

QString*
SWGSku::getDescription() {
    return description;
}
void
SWGSku::setDescription(QString* description) {
    this->description = description;
}

qint32
SWGSku::getInventory() {
    return inventory;
}
void
SWGSku::setInventory(qint32 inventory) {
    this->inventory = inventory;
}

qint32
SWGSku::getMinInventoryThreshold() {
    return min_inventory_threshold;
}
void
SWGSku::setMinInventoryThreshold(qint32 min_inventory_threshold) {
    this->min_inventory_threshold = min_inventory_threshold;
}

double
SWGSku::getOriginalPrice() {
    return original_price;
}
void
SWGSku::setOriginalPrice(double original_price) {
    this->original_price = original_price;
}

double
SWGSku::getPrice() {
    return price;
}
void
SWGSku::setPrice(double price) {
    this->price = price;
}

bool
SWGSku::getPublished() {
    return published;
}
void
SWGSku::setPublished(bool published) {
    this->published = published;
}

qint32
SWGSku::getSaleId() {
    return sale_id;
}
void
SWGSku::setSaleId(qint32 sale_id) {
    this->sale_id = sale_id;
}

QString*
SWGSku::getSaleName() {
    return sale_name;
}
void
SWGSku::setSaleName(QString* sale_name) {
    this->sale_name = sale_name;
}

QString*
SWGSku::getSku() {
    return sku;
}
void
SWGSku::setSku(QString* sku) {
    this->sku = sku;
}

qint64
SWGSku::getStartDate() {
    return start_date;
}
void
SWGSku::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}

qint64
SWGSku::getStopDate() {
    return stop_date;
}
void
SWGSku::setStopDate(qint64 stop_date) {
    this->stop_date = stop_date;
}



} /* namespace Swagger */

