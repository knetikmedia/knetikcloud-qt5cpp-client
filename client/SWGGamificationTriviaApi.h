/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGGamificationTriviaApi_H_
#define _SWG_SWGGamificationTriviaApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGAnswerResource.h"
#include "SWGCollection«string».h"
#include "SWGDeltaResource.h"
#include "SWGImportJobResource.h"
#include "SWGPageResource«ImportJobResource».h"
#include "SWGPageResource«QuestionResource».h"
#include "SWGPageResource«QuestionTemplateResource».h"
#include "SWGQuestionResource.h"
#include "SWGQuestionTemplateResource.h"
#include "SWGResult.h"

#include <QObject>

namespace Swagger {

class SWGGamificationTriviaApi: public QObject {
    Q_OBJECT

public:
    SWGGamificationTriviaApi();
    SWGGamificationTriviaApi(QString host, QString basePath);
    ~SWGGamificationTriviaApi();

    QString host;
    QString basePath;

    void addQuestionAnswers(QString* question_id, SWGAnswerResource answer);
    void addQuestionTag(QString* id, QString* tag);
    void addTagToQuestionsBatch(QString* tag, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id);
    void createImportJob(SWGImportJobResource request);
    void createQuestion(SWGQuestionResource question);
    void createQuestionTemplate(SWGQuestionTemplateResource question_template_resource);
    void deleteImportJob(qint64 id);
    void deleteQuestion(QString* id);
    void deleteQuestionAnswers(QString* question_id, QString* id);
    void deleteQuestionTemplate(QString* id, QString* cascade);
    void getImportJob(qint64 id);
    void getImportJobs(QString* filter_vendor, QString* filter_category, QString* filter_name, QString* filter_status, qint32 size, qint32 page, QString* order);
    void getQuestion(QString* id);
    void getQuestionAnswer(QString* question_id, QString* id);
    void getQuestionAnswers(QString* question_id);
    void getQuestionDeltas(qint64 since);
    void getQuestionTags(QString* id);
    void getQuestionTemplate(QString* id);
    void getQuestionTemplates(qint32 size, qint32 page, QString* order);
    void getQuestions(qint32 size, qint32 page, QString* order, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tagset, QString* filter_tag, QString* filter_type, bool filter_published, qint64 filter_import_id);
    void getQuestionsCount(QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published);
    void processImportJob(qint64 id, bool publish_now);
    void removeQuestionTag(QString* id, QString* tag);
    void removeTagToQuestionsBatch(QString* tag, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id);
    void searchQuestionTags(QString* filter_search, QString* filter_category, qint64 filter_import_id);
    void updateImportJob(qint64 id, SWGImportJobResource request);
    void updateQuestion(QString* id, SWGQuestionResource question);
    void updateQuestionAnswer(QString* question_id, QString* id, SWGAnswerResource answer);
    void updateQuestionTemplate(QString* id, SWGQuestionTemplateResource question_template_resource);
    void updateQuestionsInBulk(SWGQuestionResource question, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id);
    
private:
    void addQuestionAnswersCallback (HttpRequestWorker * worker);
    void addQuestionTagCallback (HttpRequestWorker * worker);
    void addTagToQuestionsBatchCallback (HttpRequestWorker * worker);
    void createImportJobCallback (HttpRequestWorker * worker);
    void createQuestionCallback (HttpRequestWorker * worker);
    void createQuestionTemplateCallback (HttpRequestWorker * worker);
    void deleteImportJobCallback (HttpRequestWorker * worker);
    void deleteQuestionCallback (HttpRequestWorker * worker);
    void deleteQuestionAnswersCallback (HttpRequestWorker * worker);
    void deleteQuestionTemplateCallback (HttpRequestWorker * worker);
    void getImportJobCallback (HttpRequestWorker * worker);
    void getImportJobsCallback (HttpRequestWorker * worker);
    void getQuestionCallback (HttpRequestWorker * worker);
    void getQuestionAnswerCallback (HttpRequestWorker * worker);
    void getQuestionAnswersCallback (HttpRequestWorker * worker);
    void getQuestionDeltasCallback (HttpRequestWorker * worker);
    void getQuestionTagsCallback (HttpRequestWorker * worker);
    void getQuestionTemplateCallback (HttpRequestWorker * worker);
    void getQuestionTemplatesCallback (HttpRequestWorker * worker);
    void getQuestionsCallback (HttpRequestWorker * worker);
    void getQuestionsCountCallback (HttpRequestWorker * worker);
    void processImportJobCallback (HttpRequestWorker * worker);
    void removeQuestionTagCallback (HttpRequestWorker * worker);
    void removeTagToQuestionsBatchCallback (HttpRequestWorker * worker);
    void searchQuestionTagsCallback (HttpRequestWorker * worker);
    void updateImportJobCallback (HttpRequestWorker * worker);
    void updateQuestionCallback (HttpRequestWorker * worker);
    void updateQuestionAnswerCallback (HttpRequestWorker * worker);
    void updateQuestionTemplateCallback (HttpRequestWorker * worker);
    void updateQuestionsInBulkCallback (HttpRequestWorker * worker);
    
signals:
    void addQuestionAnswersSignal(SWGAnswerResource* summary);
    void addQuestionTagSignal();
    void addTagToQuestionsBatchSignal(qint32 summary);
    void createImportJobSignal(SWGImportJobResource* summary);
    void createQuestionSignal(SWGQuestionResource* summary);
    void createQuestionTemplateSignal(SWGQuestionTemplateResource* summary);
    void deleteImportJobSignal();
    void deleteQuestionSignal();
    void deleteQuestionAnswersSignal();
    void deleteQuestionTemplateSignal();
    void getImportJobSignal(SWGImportJobResource* summary);
    void getImportJobsSignal(SWGPageResource«ImportJobResource»* summary);
    void getQuestionSignal(SWGQuestionResource* summary);
    void getQuestionAnswerSignal(SWGAnswerResource* summary);
    void getQuestionAnswersSignal(QList<SWGAnswerResource*>* summary);
    void getQuestionDeltasSignal(QList<SWGDeltaResource*>* summary);
    void getQuestionTagsSignal(QList<QString*>* summary);
    void getQuestionTemplateSignal(SWGQuestionTemplateResource* summary);
    void getQuestionTemplatesSignal(SWGPageResource«QuestionTemplateResource»* summary);
    void getQuestionsSignal(SWGPageResource«QuestionResource»* summary);
    void getQuestionsCountSignal(qint64 summary);
    void processImportJobSignal(SWGImportJobResource* summary);
    void removeQuestionTagSignal();
    void removeTagToQuestionsBatchSignal(qint32 summary);
    void searchQuestionTagsSignal(SWGCollection«string»* summary);
    void updateImportJobSignal(SWGImportJobResource* summary);
    void updateQuestionSignal(SWGQuestionResource* summary);
    void updateQuestionAnswerSignal();
    void updateQuestionTemplateSignal(SWGQuestionTemplateResource* summary);
    void updateQuestionsInBulkSignal(qint32 summary);
    
};
}
#endif
