/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUtilMaintenanceApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGUtilMaintenanceApi::SWGUtilMaintenanceApi() {}

SWGUtilMaintenanceApi::~SWGUtilMaintenanceApi() {}

SWGUtilMaintenanceApi::SWGUtilMaintenanceApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUtilMaintenanceApi::deleteMaintenance() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/maintenance");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUtilMaintenanceApi::deleteMaintenanceCallback);

    worker->execute(&input);
}

void
SWGUtilMaintenanceApi::deleteMaintenanceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteMaintenanceSignal();
}
void
SWGUtilMaintenanceApi::getMaintenance() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/maintenance");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUtilMaintenanceApi::getMaintenanceCallback);

    worker->execute(&input);
}

void
SWGUtilMaintenanceApi::getMaintenanceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGMaintenance* output = static_cast<SWGMaintenance*>(create(json, QString("SWGMaintenance")));
    

    worker->deleteLater();

    emit getMaintenanceSignal(output);
    
}
void
SWGUtilMaintenanceApi::setMaintenance(SWGMaintenance maintenance) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/maintenance");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = maintenance.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUtilMaintenanceApi::setMaintenanceCallback);

    worker->execute(&input);
}

void
SWGUtilMaintenanceApi::setMaintenanceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setMaintenanceSignal();
}
void
SWGUtilMaintenanceApi::updateMaintenance(SWGMaintenance maintenance) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/maintenance");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = maintenance.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUtilMaintenanceApi::updateMaintenanceCallback);

    worker->execute(&input);
}

void
SWGUtilMaintenanceApi::updateMaintenanceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateMaintenanceSignal();
}
} /* namespace Swagger */
