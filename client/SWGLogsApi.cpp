/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGLogsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGLogsApi::SWGLogsApi() {}

SWGLogsApi::~SWGLogsApi() {}

SWGLogsApi::SWGLogsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGLogsApi::addUserLog(SWGUserActionLog log_entry) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/audit/logs");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = log_entry.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::addUserLogCallback);

    worker->execute(&input);
}

void
SWGLogsApi::addUserLogCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addUserLogSignal();
}
void
SWGLogsApi::getBREEventLog(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/logs/event-log/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getBREEventLogCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getBREEventLogCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreEventLog* output = static_cast<SWGBreEventLog*>(create(json, QString("SWGBreEventLog")));
    

    worker->deleteLater();

    emit getBREEventLogSignal(output);
    
}
void
SWGLogsApi::getBREEventLogs(QString* filter_start_date, QString* filter_event_name, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/logs/event-log");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_event_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_event_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getBREEventLogsCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getBREEventLogsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BreEventLog»* output = static_cast<SWGPageResource«BreEventLog»*>(create(json, QString("SWGPageResource«BreEventLog»")));
    

    worker->deleteLater();

    emit getBREEventLogsSignal(output);
    
}
void
SWGLogsApi::getBREForwardLog(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/logs/forward-log/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getBREForwardLogCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getBREForwardLogCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGForwardLog* output = static_cast<SWGForwardLog*>(create(json, QString("SWGForwardLog")));
    

    worker->deleteLater();

    emit getBREForwardLogSignal(output);
    
}
void
SWGLogsApi::getBREForwardLogs(QString* filter_start_date, QString* filter_end_date, qint32 filter_status_code, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/logs/forward-log");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_status_code"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_status_code)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getBREForwardLogsCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getBREForwardLogsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ForwardLog»* output = static_cast<SWGPageResource«ForwardLog»*>(create(json, QString("SWGPageResource«ForwardLog»")));
    

    worker->deleteLater();

    emit getBREForwardLogsSignal(output);
    
}
void
SWGLogsApi::getUserLog(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/audit/logs/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getUserLogCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getUserLogCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGUserActionLog* output = static_cast<SWGUserActionLog*>(create(json, QString("SWGUserActionLog")));
    

    worker->deleteLater();

    emit getUserLogSignal(output);
    
}
void
SWGLogsApi::getUserLogs(qint32 filter_user, QString* filter_action_name, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/audit/logs");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_user"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_user)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_action_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_action_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGLogsApi::getUserLogsCallback);

    worker->execute(&input);
}

void
SWGLogsApi::getUserLogsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UserActionLog»* output = static_cast<SWGPageResource«UserActionLog»*>(create(json, QString("SWGPageResource«UserActionLog»")));
    

    worker->deleteLater();

    emit getUserLogsSignal(output);
    
}
} /* namespace Swagger */
