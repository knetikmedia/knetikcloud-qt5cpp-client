/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreShoppingCartsApi_H_
#define _SWG_SWGStoreShoppingCartsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCart.h"
#include "SWGCartItemRequest.h"
#include "SWGCartShippableResponse.h"
#include "SWGCartShippingAddressRequest.h"
#include "SWGCouponDefinition.h"
#include "SWGPageResource«CartSummary».h"
#include "SWGResult.h"
#include "SWGSampleCountriesResponse.h"
#include "SWGSkuRequest.h"

#include <QObject>

namespace Swagger {

class SWGStoreShoppingCartsApi: public QObject {
    Q_OBJECT

public:
    SWGStoreShoppingCartsApi();
    SWGStoreShoppingCartsApi(QString host, QString basePath);
    ~SWGStoreShoppingCartsApi();

    QString host;
    QString basePath;

    void addCustomDiscount(QString* id, SWGCouponDefinition custom_discount);
    void addDiscountToCart(QString* id, SWGSkuRequest sku_request);
    void addItemToCart(QString* id, SWGCartItemRequest cart_item_request);
    void createCart(qint32 owner, QString* currency_code);
    void getCart(QString* id);
    void getCarts(qint32 filter_owner_id, qint32 size, qint32 page, QString* order);
    void getShippable(QString* id);
    void getShippingCountries(QString* id);
    void removeDiscountFromCart(QString* id, QString* code);
    void setCartCurrency(QString* id, QString* currency_code);
    void setCartOwner(QString* id, qint32 user_id);
    void updateItemInCart(QString* id, SWGCartItemRequest cart_item_request);
    void updateShippingAddress(QString* id, SWGCartShippingAddressRequest cart_shipping_address_request);
    
private:
    void addCustomDiscountCallback (HttpRequestWorker * worker);
    void addDiscountToCartCallback (HttpRequestWorker * worker);
    void addItemToCartCallback (HttpRequestWorker * worker);
    void createCartCallback (HttpRequestWorker * worker);
    void getCartCallback (HttpRequestWorker * worker);
    void getCartsCallback (HttpRequestWorker * worker);
    void getShippableCallback (HttpRequestWorker * worker);
    void getShippingCountriesCallback (HttpRequestWorker * worker);
    void removeDiscountFromCartCallback (HttpRequestWorker * worker);
    void setCartCurrencyCallback (HttpRequestWorker * worker);
    void setCartOwnerCallback (HttpRequestWorker * worker);
    void updateItemInCartCallback (HttpRequestWorker * worker);
    void updateShippingAddressCallback (HttpRequestWorker * worker);
    
signals:
    void addCustomDiscountSignal();
    void addDiscountToCartSignal();
    void addItemToCartSignal();
    void createCartSignal(QString* summary);
    void getCartSignal(SWGCart* summary);
    void getCartsSignal(SWGPageResource«CartSummary»* summary);
    void getShippableSignal(SWGCartShippableResponse* summary);
    void getShippingCountriesSignal(SWGSampleCountriesResponse* summary);
    void removeDiscountFromCartSignal();
    void setCartCurrencySignal();
    void setCartOwnerSignal();
    void updateItemInCartSignal();
    void updateShippingAddressSignal();
    
};
}
#endif
