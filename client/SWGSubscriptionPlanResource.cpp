/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSubscriptionPlanResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGSubscriptionPlanResource::SWGSubscriptionPlanResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSubscriptionPlanResource::SWGSubscriptionPlanResource() {
    init();
}

SWGSubscriptionPlanResource::~SWGSubscriptionPlanResource() {
    this->cleanup();
}

void
SWGSubscriptionPlanResource::init() {
    additional_properties = new QMap<QString, SWGProperty>();
    billing_cycle_length = 0;
    billing_cycle_unit = new QString("");
    consolidated = false;
    currency_code = new QString("");
    end_date = 0L;
    first_billing_cycle_length = 0;
    first_billing_cycle_unit = new QString("");
    grace_period = 0;
    id = new QString("");
    initial_fee = 0.0;
    initial_sku = new QString("");
    late_payment_fee = 0.0;
    late_payment_sku = new QString("");
    locked = false;
    max_bill_attempts = 0;
    max_cycles = 0;
    migrate_to_plan = new QString("");
    min_cycles = 0;
    name = new QString("");
    published = false;
    reactivation_fee = 0.0;
    reactivation_sku = new QString("");
    recurring_fee = 0.0;
    recurring_sku = new QString("");
    start_date = 0L;
}

void
SWGSubscriptionPlanResource::cleanup() {
    
    if(additional_properties != nullptr) {
        QList<SWGProperty*>* arr = additional_properties;
        foreach(SWGProperty* o, *arr) {
            delete o;
        }
        delete additional_properties;
    }


    if(billing_cycle_unit != nullptr) {
        delete billing_cycle_unit;
    }


    if(currency_code != nullptr) {
        delete currency_code;
    }



    if(first_billing_cycle_unit != nullptr) {
        delete first_billing_cycle_unit;
    }


    if(id != nullptr) {
        delete id;
    }


    if(initial_sku != nullptr) {
        delete initial_sku;
    }


    if(late_payment_sku != nullptr) {
        delete late_payment_sku;
    }




    if(migrate_to_plan != nullptr) {
        delete migrate_to_plan;
    }


    if(name != nullptr) {
        delete name;
    }



    if(reactivation_sku != nullptr) {
        delete reactivation_sku;
    }


    if(recurring_sku != nullptr) {
        delete recurring_sku;
    }

}

SWGSubscriptionPlanResource*
SWGSubscriptionPlanResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSubscriptionPlanResource::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&additional_properties, pJson["additional_properties"], "QMap", "SWGProperty");
    
    ::Swagger::setValue(&billing_cycle_length, pJson["billing_cycle_length"], "qint32", "");
    ::Swagger::setValue(&billing_cycle_unit, pJson["billing_cycle_unit"], "QString", "QString");
    ::Swagger::setValue(&consolidated, pJson["consolidated"], "bool", "");
    ::Swagger::setValue(&currency_code, pJson["currency_code"], "QString", "QString");
    ::Swagger::setValue(&end_date, pJson["end_date"], "qint64", "");
    ::Swagger::setValue(&first_billing_cycle_length, pJson["first_billing_cycle_length"], "qint32", "");
    ::Swagger::setValue(&first_billing_cycle_unit, pJson["first_billing_cycle_unit"], "QString", "QString");
    ::Swagger::setValue(&grace_period, pJson["grace_period"], "qint32", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&initial_fee, pJson["initial_fee"], "double", "");
    ::Swagger::setValue(&initial_sku, pJson["initial_sku"], "QString", "QString");
    ::Swagger::setValue(&late_payment_fee, pJson["late_payment_fee"], "double", "");
    ::Swagger::setValue(&late_payment_sku, pJson["late_payment_sku"], "QString", "QString");
    ::Swagger::setValue(&locked, pJson["locked"], "bool", "");
    ::Swagger::setValue(&max_bill_attempts, pJson["max_bill_attempts"], "qint32", "");
    ::Swagger::setValue(&max_cycles, pJson["max_cycles"], "qint32", "");
    ::Swagger::setValue(&migrate_to_plan, pJson["migrate_to_plan"], "QString", "QString");
    ::Swagger::setValue(&min_cycles, pJson["min_cycles"], "qint32", "");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&published, pJson["published"], "bool", "");
    ::Swagger::setValue(&reactivation_fee, pJson["reactivation_fee"], "double", "");
    ::Swagger::setValue(&reactivation_sku, pJson["reactivation_sku"], "QString", "QString");
    ::Swagger::setValue(&recurring_fee, pJson["recurring_fee"], "double", "");
    ::Swagger::setValue(&recurring_sku, pJson["recurring_sku"], "QString", "QString");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
}

QString
SWGSubscriptionPlanResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGSubscriptionPlanResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray additional_propertiesJsonArray;
    toJsonArray((QList<void*>*)additional_properties, &additional_propertiesJsonArray, "additional_properties", "SWGProperty");
    obj->insert("additional_properties", additional_propertiesJsonArray);

    obj->insert("billing_cycle_length", QJsonValue(billing_cycle_length));

    toJsonValue(QString("billing_cycle_unit"), billing_cycle_unit, obj, QString("QString"));

    obj->insert("consolidated", QJsonValue(consolidated));

    toJsonValue(QString("currency_code"), currency_code, obj, QString("QString"));

    obj->insert("end_date", QJsonValue(end_date));

    obj->insert("first_billing_cycle_length", QJsonValue(first_billing_cycle_length));

    toJsonValue(QString("first_billing_cycle_unit"), first_billing_cycle_unit, obj, QString("QString"));

    obj->insert("grace_period", QJsonValue(grace_period));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    obj->insert("initial_fee", QJsonValue(initial_fee));

    toJsonValue(QString("initial_sku"), initial_sku, obj, QString("QString"));

    obj->insert("late_payment_fee", QJsonValue(late_payment_fee));

    toJsonValue(QString("late_payment_sku"), late_payment_sku, obj, QString("QString"));

    obj->insert("locked", QJsonValue(locked));

    obj->insert("max_bill_attempts", QJsonValue(max_bill_attempts));

    obj->insert("max_cycles", QJsonValue(max_cycles));

    toJsonValue(QString("migrate_to_plan"), migrate_to_plan, obj, QString("QString"));

    obj->insert("min_cycles", QJsonValue(min_cycles));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("published", QJsonValue(published));

    obj->insert("reactivation_fee", QJsonValue(reactivation_fee));

    toJsonValue(QString("reactivation_sku"), reactivation_sku, obj, QString("QString"));

    obj->insert("recurring_fee", QJsonValue(recurring_fee));

    toJsonValue(QString("recurring_sku"), recurring_sku, obj, QString("QString"));

    obj->insert("start_date", QJsonValue(start_date));

    return obj;
}

QMap<QString, SWGProperty*>*
SWGSubscriptionPlanResource::getAdditionalProperties() {
    return additional_properties;
}
void
SWGSubscriptionPlanResource::setAdditionalProperties(QMap<QString, SWGProperty*>* additional_properties) {
    this->additional_properties = additional_properties;
}

qint32
SWGSubscriptionPlanResource::getBillingCycleLength() {
    return billing_cycle_length;
}
void
SWGSubscriptionPlanResource::setBillingCycleLength(qint32 billing_cycle_length) {
    this->billing_cycle_length = billing_cycle_length;
}

QString*
SWGSubscriptionPlanResource::getBillingCycleUnit() {
    return billing_cycle_unit;
}
void
SWGSubscriptionPlanResource::setBillingCycleUnit(QString* billing_cycle_unit) {
    this->billing_cycle_unit = billing_cycle_unit;
}

bool
SWGSubscriptionPlanResource::getConsolidated() {
    return consolidated;
}
void
SWGSubscriptionPlanResource::setConsolidated(bool consolidated) {
    this->consolidated = consolidated;
}

QString*
SWGSubscriptionPlanResource::getCurrencyCode() {
    return currency_code;
}
void
SWGSubscriptionPlanResource::setCurrencyCode(QString* currency_code) {
    this->currency_code = currency_code;
}

qint64
SWGSubscriptionPlanResource::getEndDate() {
    return end_date;
}
void
SWGSubscriptionPlanResource::setEndDate(qint64 end_date) {
    this->end_date = end_date;
}

qint32
SWGSubscriptionPlanResource::getFirstBillingCycleLength() {
    return first_billing_cycle_length;
}
void
SWGSubscriptionPlanResource::setFirstBillingCycleLength(qint32 first_billing_cycle_length) {
    this->first_billing_cycle_length = first_billing_cycle_length;
}

QString*
SWGSubscriptionPlanResource::getFirstBillingCycleUnit() {
    return first_billing_cycle_unit;
}
void
SWGSubscriptionPlanResource::setFirstBillingCycleUnit(QString* first_billing_cycle_unit) {
    this->first_billing_cycle_unit = first_billing_cycle_unit;
}

qint32
SWGSubscriptionPlanResource::getGracePeriod() {
    return grace_period;
}
void
SWGSubscriptionPlanResource::setGracePeriod(qint32 grace_period) {
    this->grace_period = grace_period;
}

QString*
SWGSubscriptionPlanResource::getId() {
    return id;
}
void
SWGSubscriptionPlanResource::setId(QString* id) {
    this->id = id;
}

double
SWGSubscriptionPlanResource::getInitialFee() {
    return initial_fee;
}
void
SWGSubscriptionPlanResource::setInitialFee(double initial_fee) {
    this->initial_fee = initial_fee;
}

QString*
SWGSubscriptionPlanResource::getInitialSku() {
    return initial_sku;
}
void
SWGSubscriptionPlanResource::setInitialSku(QString* initial_sku) {
    this->initial_sku = initial_sku;
}

double
SWGSubscriptionPlanResource::getLatePaymentFee() {
    return late_payment_fee;
}
void
SWGSubscriptionPlanResource::setLatePaymentFee(double late_payment_fee) {
    this->late_payment_fee = late_payment_fee;
}

QString*
SWGSubscriptionPlanResource::getLatePaymentSku() {
    return late_payment_sku;
}
void
SWGSubscriptionPlanResource::setLatePaymentSku(QString* late_payment_sku) {
    this->late_payment_sku = late_payment_sku;
}

bool
SWGSubscriptionPlanResource::getLocked() {
    return locked;
}
void
SWGSubscriptionPlanResource::setLocked(bool locked) {
    this->locked = locked;
}

qint32
SWGSubscriptionPlanResource::getMaxBillAttempts() {
    return max_bill_attempts;
}
void
SWGSubscriptionPlanResource::setMaxBillAttempts(qint32 max_bill_attempts) {
    this->max_bill_attempts = max_bill_attempts;
}

qint32
SWGSubscriptionPlanResource::getMaxCycles() {
    return max_cycles;
}
void
SWGSubscriptionPlanResource::setMaxCycles(qint32 max_cycles) {
    this->max_cycles = max_cycles;
}

QString*
SWGSubscriptionPlanResource::getMigrateToPlan() {
    return migrate_to_plan;
}
void
SWGSubscriptionPlanResource::setMigrateToPlan(QString* migrate_to_plan) {
    this->migrate_to_plan = migrate_to_plan;
}

qint32
SWGSubscriptionPlanResource::getMinCycles() {
    return min_cycles;
}
void
SWGSubscriptionPlanResource::setMinCycles(qint32 min_cycles) {
    this->min_cycles = min_cycles;
}

QString*
SWGSubscriptionPlanResource::getName() {
    return name;
}
void
SWGSubscriptionPlanResource::setName(QString* name) {
    this->name = name;
}

bool
SWGSubscriptionPlanResource::getPublished() {
    return published;
}
void
SWGSubscriptionPlanResource::setPublished(bool published) {
    this->published = published;
}

double
SWGSubscriptionPlanResource::getReactivationFee() {
    return reactivation_fee;
}
void
SWGSubscriptionPlanResource::setReactivationFee(double reactivation_fee) {
    this->reactivation_fee = reactivation_fee;
}

QString*
SWGSubscriptionPlanResource::getReactivationSku() {
    return reactivation_sku;
}
void
SWGSubscriptionPlanResource::setReactivationSku(QString* reactivation_sku) {
    this->reactivation_sku = reactivation_sku;
}

double
SWGSubscriptionPlanResource::getRecurringFee() {
    return recurring_fee;
}
void
SWGSubscriptionPlanResource::setRecurringFee(double recurring_fee) {
    this->recurring_fee = recurring_fee;
}

QString*
SWGSubscriptionPlanResource::getRecurringSku() {
    return recurring_sku;
}
void
SWGSubscriptionPlanResource::setRecurringSku(QString* recurring_sku) {
    this->recurring_sku = recurring_sku;
}

qint64
SWGSubscriptionPlanResource::getStartDate() {
    return start_date;
}
void
SWGSubscriptionPlanResource::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}



} /* namespace Swagger */

