/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreBundlesApi_H_
#define _SWG_SWGStoreBundlesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGBundleItem.h"
#include "SWGItemTemplateResource.h"
#include "SWGPageResource«ItemTemplateResource».h"
#include "SWGResult.h"

#include <QObject>

namespace Swagger {

class SWGStoreBundlesApi: public QObject {
    Q_OBJECT

public:
    SWGStoreBundlesApi();
    SWGStoreBundlesApi(QString host, QString basePath);
    ~SWGStoreBundlesApi();

    QString host;
    QString basePath;

    void createBundleItem(bool cascade, SWGBundleItem bundle_item);
    void createBundleTemplate(SWGItemTemplateResource bundle_template_resource);
    void deleteBundleItem(qint32 id);
    void deleteBundleTemplate(QString* id, QString* cascade);
    void getBundleItem(qint32 id);
    void getBundleTemplate(QString* id);
    void getBundleTemplates(qint32 size, qint32 page, QString* order);
    void updateBundleItem(qint32 id, bool cascade, SWGBundleItem bundle_item);
    void updateBundleTemplate(QString* id, SWGItemTemplateResource bundle_template_resource);
    
private:
    void createBundleItemCallback (HttpRequestWorker * worker);
    void createBundleTemplateCallback (HttpRequestWorker * worker);
    void deleteBundleItemCallback (HttpRequestWorker * worker);
    void deleteBundleTemplateCallback (HttpRequestWorker * worker);
    void getBundleItemCallback (HttpRequestWorker * worker);
    void getBundleTemplateCallback (HttpRequestWorker * worker);
    void getBundleTemplatesCallback (HttpRequestWorker * worker);
    void updateBundleItemCallback (HttpRequestWorker * worker);
    void updateBundleTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createBundleItemSignal(SWGBundleItem* summary);
    void createBundleTemplateSignal(SWGItemTemplateResource* summary);
    void deleteBundleItemSignal();
    void deleteBundleTemplateSignal();
    void getBundleItemSignal(SWGBundleItem* summary);
    void getBundleTemplateSignal(SWGItemTemplateResource* summary);
    void getBundleTemplatesSignal(SWGPageResource«ItemTemplateResource»* summary);
    void updateBundleItemSignal(SWGBundleItem* summary);
    void updateBundleTemplateSignal(SWGItemTemplateResource* summary);
    
};
}
#endif
