/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGMediaVideosApi_H_
#define _SWG_SWGMediaVideosApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCommentResource.h"
#include "SWGContributionResource.h"
#include "SWGDispositionResource.h"
#include "SWGFlagResource.h"
#include "SWGPageResource«CommentResource».h"
#include "SWGPageResource«DispositionResource».h"
#include "SWGPageResource«VideoRelationshipResource».h"
#include "SWGPageResource«VideoResource».h"
#include "SWGResult.h"
#include "SWGVideoRelationshipResource.h"
#include "SWGVideoResource.h"

#include <QObject>

namespace Swagger {

class SWGMediaVideosApi: public QObject {
    Q_OBJECT

public:
    SWGMediaVideosApi();
    SWGMediaVideosApi(QString host, QString basePath);
    ~SWGMediaVideosApi();

    QString host;
    QString basePath;

    void addUserToVideoWhitelist(qint64 id, qint32 user_id);
    void addVideo(SWGVideoResource video_resource);
    void addVideoComment(qint32 video_id, SWGCommentResource comment_resource);
    void addVideoContributor(qint64 video_id, SWGContributionResource contribution_resource);
    void addVideoFlag(qint64 video_id, QString* reason);
    void addVideoRelationships(qint64 video_id, SWGVideoRelationshipResource video_relationship_resource);
    void createVideoDisposition(qint32 video_id, SWGDispositionResource disposition_resource);
    void deleteVideo(qint64 id);
    void deleteVideoComment(qint64 video_id, qint64 id);
    void deleteVideoDisposition(qint64 disposition_id);
    void deleteVideoFlag(qint64 video_id);
    void deleteVideoRelationship(qint64 video_id, qint64 id);
    void getUserVideos(qint32 user_id, bool exclude_flagged, qint32 size, qint32 page);
    void getVideo(qint64 id);
    void getVideoComments(qint32 video_id, qint32 size, qint32 page);
    void getVideoDispositions(qint32 video_id, qint32 size, qint32 page);
    void getVideoRelationships(qint64 video_id, qint32 size, qint32 page);
    void getVideos(bool exclude_flagged, QString* filter_videos_by_uploader, QString* filter_category, QString* filter_tagset, QString* filter_videos_by_name, QString* filter_videos_by_contributor, QString* filter_videos_by_author, bool filter_has_author, bool filter_has_uploader, QString* filter_related_to, bool filter_friends, QString* filter_disposition, qint32 size, qint32 page, QString* order);
    void removeUserFromVideoWhitelist(qint64 video_id, qint32 id);
    void removeVideoContributor(qint64 video_id, qint32 id);
    void updateVideo(qint64 id, SWGVideoResource video_resource);
    void updateVideoComment(qint64 video_id, qint64 id, QString* content);
    void updateVideoRelationship(qint64 video_id, qint64 relationship_id, QString* details);
    void viewVideo(qint64 id);
    
private:
    void addUserToVideoWhitelistCallback (HttpRequestWorker * worker);
    void addVideoCallback (HttpRequestWorker * worker);
    void addVideoCommentCallback (HttpRequestWorker * worker);
    void addVideoContributorCallback (HttpRequestWorker * worker);
    void addVideoFlagCallback (HttpRequestWorker * worker);
    void addVideoRelationshipsCallback (HttpRequestWorker * worker);
    void createVideoDispositionCallback (HttpRequestWorker * worker);
    void deleteVideoCallback (HttpRequestWorker * worker);
    void deleteVideoCommentCallback (HttpRequestWorker * worker);
    void deleteVideoDispositionCallback (HttpRequestWorker * worker);
    void deleteVideoFlagCallback (HttpRequestWorker * worker);
    void deleteVideoRelationshipCallback (HttpRequestWorker * worker);
    void getUserVideosCallback (HttpRequestWorker * worker);
    void getVideoCallback (HttpRequestWorker * worker);
    void getVideoCommentsCallback (HttpRequestWorker * worker);
    void getVideoDispositionsCallback (HttpRequestWorker * worker);
    void getVideoRelationshipsCallback (HttpRequestWorker * worker);
    void getVideosCallback (HttpRequestWorker * worker);
    void removeUserFromVideoWhitelistCallback (HttpRequestWorker * worker);
    void removeVideoContributorCallback (HttpRequestWorker * worker);
    void updateVideoCallback (HttpRequestWorker * worker);
    void updateVideoCommentCallback (HttpRequestWorker * worker);
    void updateVideoRelationshipCallback (HttpRequestWorker * worker);
    void viewVideoCallback (HttpRequestWorker * worker);
    
signals:
    void addUserToVideoWhitelistSignal();
    void addVideoSignal(SWGVideoResource* summary);
    void addVideoCommentSignal(SWGCommentResource* summary);
    void addVideoContributorSignal();
    void addVideoFlagSignal(SWGFlagResource* summary);
    void addVideoRelationshipsSignal(SWGVideoRelationshipResource* summary);
    void createVideoDispositionSignal(SWGDispositionResource* summary);
    void deleteVideoSignal();
    void deleteVideoCommentSignal();
    void deleteVideoDispositionSignal();
    void deleteVideoFlagSignal();
    void deleteVideoRelationshipSignal();
    void getUserVideosSignal(SWGPageResource«VideoResource»* summary);
    void getVideoSignal(SWGVideoResource* summary);
    void getVideoCommentsSignal(SWGPageResource«CommentResource»* summary);
    void getVideoDispositionsSignal(SWGPageResource«DispositionResource»* summary);
    void getVideoRelationshipsSignal(SWGPageResource«VideoRelationshipResource»* summary);
    void getVideosSignal(SWGPageResource«VideoResource»* summary);
    void removeUserFromVideoWhitelistSignal();
    void removeVideoContributorSignal();
    void updateVideoSignal();
    void updateVideoCommentSignal();
    void updateVideoRelationshipSignal();
    void viewVideoSignal();
    
};
}
#endif
