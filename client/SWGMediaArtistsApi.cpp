/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGMediaArtistsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGMediaArtistsApi::SWGMediaArtistsApi() {}

SWGMediaArtistsApi::~SWGMediaArtistsApi() {}

SWGMediaArtistsApi::SWGMediaArtistsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGMediaArtistsApi::addArtist(SWGArtistResource artist_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = artist_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::addArtistCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::addArtistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGArtistResource* output = static_cast<SWGArtistResource*>(create(json, QString("SWGArtistResource")));
    

    worker->deleteLater();

    emit addArtistSignal(output);
    
}
void
SWGMediaArtistsApi::createArtistTemplate(SWGTemplateResource artist_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = artist_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::createArtistTemplateCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::createArtistTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createArtistTemplateSignal(output);
    
}
void
SWGMediaArtistsApi::deleteArtist(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::deleteArtistCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::deleteArtistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteArtistSignal();
}
void
SWGMediaArtistsApi::deleteArtistTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::deleteArtistTemplateCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::deleteArtistTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteArtistTemplateSignal();
}
void
SWGMediaArtistsApi::getArtist(qint64 id, qint32 show_contributions) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("show_contributions"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(show_contributions)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::getArtistCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::getArtistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGArtistResource* output = static_cast<SWGArtistResource*>(create(json, QString("SWGArtistResource")));
    

    worker->deleteLater();

    emit getArtistSignal(output);
    
}
void
SWGMediaArtistsApi::getArtistTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::getArtistTemplateCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::getArtistTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getArtistTemplateSignal(output);
    
}
void
SWGMediaArtistsApi::getArtistTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::getArtistTemplatesCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::getArtistTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getArtistTemplatesSignal(output);
    
}
void
SWGMediaArtistsApi::getArtists(QString* filter_artists_by_name, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_artists_by_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_artists_by_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::getArtistsCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::getArtistsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ArtistResource»* output = static_cast<SWGPageResource«ArtistResource»*>(create(json, QString("SWGPageResource«ArtistResource»")));
    

    worker->deleteLater();

    emit getArtistsSignal(output);
    
}
void
SWGMediaArtistsApi::updateArtist(qint64 id, SWGArtistResource artist_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = artist_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::updateArtistCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::updateArtistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateArtistSignal();
}
void
SWGMediaArtistsApi::updateArtistTemplate(QString* id, SWGTemplateResource artist_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/artists/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = artist_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaArtistsApi::updateArtistTemplateCallback);

    worker->execute(&input);
}

void
SWGMediaArtistsApi::updateArtistTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateArtistTemplateSignal(output);
    
}
} /* namespace Swagger */
