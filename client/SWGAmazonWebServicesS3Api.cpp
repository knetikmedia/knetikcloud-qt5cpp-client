/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAmazonWebServicesS3Api.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGAmazonWebServicesS3Api::SWGAmazonWebServicesS3Api() {}

SWGAmazonWebServicesS3Api::~SWGAmazonWebServicesS3Api() {}

SWGAmazonWebServicesS3Api::SWGAmazonWebServicesS3Api(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAmazonWebServicesS3Api::getSignedS3URL(QString* filename, QString* content_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/amazon/s3/signedposturl");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filename"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filename)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("content_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(content_type)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAmazonWebServicesS3Api::getSignedS3URLCallback);

    worker->execute(&input);
}

void
SWGAmazonWebServicesS3Api::getSignedS3URLCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAmazonS3Activity* output = static_cast<SWGAmazonS3Activity*>(create(json, QString("SWGAmazonS3Activity")));
    

    worker->deleteLater();

    emit getSignedS3URLSignal(output);
    
}
} /* namespace Swagger */
