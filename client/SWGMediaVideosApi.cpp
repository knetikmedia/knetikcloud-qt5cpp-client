/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGMediaVideosApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGMediaVideosApi::SWGMediaVideosApi() {}

SWGMediaVideosApi::~SWGMediaVideosApi() {}

SWGMediaVideosApi::SWGMediaVideosApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGMediaVideosApi::addUserToVideoWhitelist(qint64 id, qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{id}/whitelist");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = user_id.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addUserToVideoWhitelistCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addUserToVideoWhitelistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addUserToVideoWhitelistSignal();
}
void
SWGMediaVideosApi::addVideo(SWGVideoResource video_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = video_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addVideoCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addVideoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVideoResource* output = static_cast<SWGVideoResource*>(create(json, QString("SWGVideoResource")));
    

    worker->deleteLater();

    emit addVideoSignal(output);
    
}
void
SWGMediaVideosApi::addVideoComment(qint32 video_id, SWGCommentResource comment_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/comments");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = comment_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addVideoCommentCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addVideoCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCommentResource* output = static_cast<SWGCommentResource*>(create(json, QString("SWGCommentResource")));
    

    worker->deleteLater();

    emit addVideoCommentSignal(output);
    
}
void
SWGMediaVideosApi::addVideoContributor(qint64 video_id, SWGContributionResource contribution_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/contributors");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = contribution_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addVideoContributorCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addVideoContributorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addVideoContributorSignal();
}
void
SWGMediaVideosApi::addVideoFlag(qint64 video_id, QString* reason) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/moderation");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = reason.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addVideoFlagCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addVideoFlagCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGFlagResource* output = static_cast<SWGFlagResource*>(create(json, QString("SWGFlagResource")));
    

    worker->deleteLater();

    emit addVideoFlagSignal(output);
    
}
void
SWGMediaVideosApi::addVideoRelationships(qint64 video_id, SWGVideoRelationshipResource video_relationship_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/related");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = video_relationship_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::addVideoRelationshipsCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::addVideoRelationshipsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVideoRelationshipResource* output = static_cast<SWGVideoRelationshipResource*>(create(json, QString("SWGVideoRelationshipResource")));
    

    worker->deleteLater();

    emit addVideoRelationshipsSignal(output);
    
}
void
SWGMediaVideosApi::createVideoDisposition(qint32 video_id, SWGDispositionResource disposition_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/dispositions");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = disposition_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::createVideoDispositionCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::createVideoDispositionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGDispositionResource* output = static_cast<SWGDispositionResource*>(create(json, QString("SWGDispositionResource")));
    

    worker->deleteLater();

    emit createVideoDispositionSignal(output);
    
}
void
SWGMediaVideosApi::deleteVideo(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::deleteVideoCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::deleteVideoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVideoSignal();
}
void
SWGMediaVideosApi::deleteVideoComment(qint64 video_id, qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/comments/{id}");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::deleteVideoCommentCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::deleteVideoCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVideoCommentSignal();
}
void
SWGMediaVideosApi::deleteVideoDisposition(qint64 disposition_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/dispositions/{disposition_id}");

    QString disposition_idPathParam("{"); disposition_idPathParam.append("disposition_id").append("}");
    fullPath.replace(disposition_idPathParam, stringValue(disposition_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::deleteVideoDispositionCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::deleteVideoDispositionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVideoDispositionSignal();
}
void
SWGMediaVideosApi::deleteVideoFlag(qint64 video_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/moderation");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::deleteVideoFlagCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::deleteVideoFlagCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVideoFlagSignal();
}
void
SWGMediaVideosApi::deleteVideoRelationship(qint64 video_id, qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/related/{id}");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::deleteVideoRelationshipCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::deleteVideoRelationshipCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVideoRelationshipSignal();
}
void
SWGMediaVideosApi::getUserVideos(qint32 user_id, bool exclude_flagged, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/videos");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude_flagged"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(exclude_flagged)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getUserVideosCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getUserVideosCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«VideoResource»* output = static_cast<SWGPageResource«VideoResource»*>(create(json, QString("SWGPageResource«VideoResource»")));
    

    worker->deleteLater();

    emit getUserVideosSignal(output);
    
}
void
SWGMediaVideosApi::getVideo(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getVideoCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getVideoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVideoResource* output = static_cast<SWGVideoResource*>(create(json, QString("SWGVideoResource")));
    

    worker->deleteLater();

    emit getVideoSignal(output);
    
}
void
SWGMediaVideosApi::getVideoComments(qint32 video_id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/comments");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getVideoCommentsCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getVideoCommentsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«CommentResource»* output = static_cast<SWGPageResource«CommentResource»*>(create(json, QString("SWGPageResource«CommentResource»")));
    

    worker->deleteLater();

    emit getVideoCommentsSignal(output);
    
}
void
SWGMediaVideosApi::getVideoDispositions(qint32 video_id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/dispositions");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getVideoDispositionsCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getVideoDispositionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«DispositionResource»* output = static_cast<SWGPageResource«DispositionResource»*>(create(json, QString("SWGPageResource«DispositionResource»")));
    

    worker->deleteLater();

    emit getVideoDispositionsSignal(output);
    
}
void
SWGMediaVideosApi::getVideoRelationships(qint64 video_id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/related");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getVideoRelationshipsCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getVideoRelationshipsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«VideoRelationshipResource»* output = static_cast<SWGPageResource«VideoRelationshipResource»*>(create(json, QString("SWGPageResource«VideoRelationshipResource»")));
    

    worker->deleteLater();

    emit getVideoRelationshipsSignal(output);
    
}
void
SWGMediaVideosApi::getVideos(bool exclude_flagged, QString* filter_videos_by_uploader, QString* filter_category, QString* filter_tagset, QString* filter_videos_by_name, QString* filter_videos_by_contributor, QString* filter_videos_by_author, bool filter_has_author, bool filter_has_uploader, QString* filter_related_to, bool filter_friends, QString* filter_disposition, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude_flagged"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(exclude_flagged)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_videos_by_uploader"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_videos_by_uploader)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_videos_by_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_videos_by_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_videos_by_contributor"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_videos_by_contributor)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_videos_by_author"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_videos_by_author)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_has_author"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_has_author)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_has_uploader"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_has_uploader)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_related_to"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_related_to)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_friends"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_friends)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_disposition"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_disposition)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::getVideosCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::getVideosCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«VideoResource»* output = static_cast<SWGPageResource«VideoResource»*>(create(json, QString("SWGPageResource«VideoResource»")));
    

    worker->deleteLater();

    emit getVideosSignal(output);
    
}
void
SWGMediaVideosApi::removeUserFromVideoWhitelist(qint64 video_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/whitelist/{id}");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::removeUserFromVideoWhitelistCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::removeUserFromVideoWhitelistCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit removeUserFromVideoWhitelistSignal();
}
void
SWGMediaVideosApi::removeVideoContributor(qint64 video_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/contributors/{id}");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::removeVideoContributorCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::removeVideoContributorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit removeVideoContributorSignal();
}
void
SWGMediaVideosApi::updateVideo(qint64 id, SWGVideoResource video_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = video_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::updateVideoCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::updateVideoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateVideoSignal();
}
void
SWGMediaVideosApi::updateVideoComment(qint64 video_id, qint64 id, QString* content) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/comments/{id}/content");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = content.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::updateVideoCommentCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::updateVideoCommentCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateVideoCommentSignal();
}
void
SWGMediaVideosApi::updateVideoRelationship(qint64 video_id, qint64 relationship_id, QString* details) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{video_id}/related/{id}/relationship_details");

    QString video_idPathParam("{"); video_idPathParam.append("video_id").append("}");
    fullPath.replace(video_idPathParam, stringValue(video_id));
    QString relationship_idPathParam("{"); relationship_idPathParam.append("relationship_id").append("}");
    fullPath.replace(relationship_idPathParam, stringValue(relationship_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = details.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::updateVideoRelationshipCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::updateVideoRelationshipCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateVideoRelationshipSignal();
}
void
SWGMediaVideosApi::viewVideo(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/videos/{id}/views");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMediaVideosApi::viewVideoCallback);

    worker->execute(&input);
}

void
SWGMediaVideosApi::viewVideoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit viewVideoSignal();
}
} /* namespace Swagger */
