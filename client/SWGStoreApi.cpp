/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGStoreApi::SWGStoreApi() {}

SWGStoreApi::~SWGStoreApi() {}

SWGStoreApi::SWGStoreApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStoreApi::createItemTemplate(SWGStoreItemTemplateResource item_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = item_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::createItemTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreApi::createItemTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItemTemplateResource* output = static_cast<SWGStoreItemTemplateResource*>(create(json, QString("SWGStoreItemTemplateResource")));
    

    worker->deleteLater();

    emit createItemTemplateSignal(output);
    
}
void
SWGStoreApi::createStoreItem(bool cascade, SWGStoreItem store_item) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = store_item.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::createStoreItemCallback);

    worker->execute(&input);
}

void
SWGStoreApi::createStoreItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItem* output = static_cast<SWGStoreItem*>(create(json, QString("SWGStoreItem")));
    

    worker->deleteLater();

    emit createStoreItemSignal(output);
    
}
void
SWGStoreApi::deleteItemTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::deleteItemTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreApi::deleteItemTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteItemTemplateSignal();
}
void
SWGStoreApi::deleteStoreItem(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::deleteStoreItemCallback);

    worker->execute(&input);
}

void
SWGStoreApi::deleteStoreItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteStoreItemSignal();
}
void
SWGStoreApi::getBehaviors() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/behaviors");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getBehaviorsCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getBehaviorsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGBehaviorDefinitionResource*>* output = new QList<SWGBehaviorDefinitionResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGBehaviorDefinitionResource* o = new SWGBehaviorDefinitionResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getBehaviorsSignal(output);
    
}
void
SWGStoreApi::getItemTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getItemTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getItemTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItemTemplateResource* output = static_cast<SWGStoreItemTemplateResource*>(create(json, QString("SWGStoreItemTemplateResource")));
    

    worker->deleteLater();

    emit getItemTemplateSignal(output);
    
}
void
SWGStoreApi::getItemTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getItemTemplatesCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getItemTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«StoreItemTemplateResource»* output = static_cast<SWGPageResource«StoreItemTemplateResource»*>(create(json, QString("SWGPageResource«StoreItemTemplateResource»")));
    

    worker->deleteLater();

    emit getItemTemplatesSignal(output);
    
}
void
SWGStoreApi::getStore(qint32 limit, qint32 page, bool use_catalog, bool ignore_location, bool in_stock_only) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("use_catalog"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_catalog)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ignore_location"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(ignore_location)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("in_stock_only"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(in_stock_only)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getStoreCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getStoreCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«StoreItem»* output = static_cast<SWGPageResource«StoreItem»*>(create(json, QString("SWGPageResource«StoreItem»")));
    

    worker->deleteLater();

    emit getStoreSignal(output);
    
}
void
SWGStoreApi::getStoreItem(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getStoreItemCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getStoreItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItem* output = static_cast<SWGStoreItem*>(create(json, QString("SWGStoreItem")));
    

    worker->deleteLater();

    emit getStoreItemSignal(output);
    
}
void
SWGStoreApi::getStoreItems(QString* filter_name_search, QString* filter_unique_key, bool filter_published, bool filter_displayable, QString* filter_start, QString* filter_end, QString* filter_start_date, QString* filter_stop_date, QString* filter_sku, QString* filter_price, QString* filter_tag, QString* filter_items_by_type, QString* filter_bundled_skus, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_unique_key"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_unique_key)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_displayable"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_displayable)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_start"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_start)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_end"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_end)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_stop_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_stop_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_sku"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_sku)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_price"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_price)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tag"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tag)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_items_by_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_items_by_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_bundled_skus"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_bundled_skus)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::getStoreItemsCallback);

    worker->execute(&input);
}

void
SWGStoreApi::getStoreItemsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«StoreItem»* output = static_cast<SWGPageResource«StoreItem»*>(create(json, QString("SWGPageResource«StoreItem»")));
    

    worker->deleteLater();

    emit getStoreItemsSignal(output);
    
}
void
SWGStoreApi::updateItemTemplate(QString* id, SWGStoreItemTemplateResource item_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = item_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::updateItemTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreApi::updateItemTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItemTemplateResource* output = static_cast<SWGStoreItemTemplateResource*>(create(json, QString("SWGStoreItemTemplateResource")));
    

    worker->deleteLater();

    emit updateItemTemplateSignal(output);
    
}
void
SWGStoreApi::updateStoreItem(qint32 id, bool cascade, SWGStoreItem store_item) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/items/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = store_item.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreApi::updateStoreItemCallback);

    worker->execute(&input);
}

void
SWGStoreApi::updateStoreItemCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStoreItem* output = static_cast<SWGStoreItem*>(create(json, QString("SWGStoreItem")));
    

    worker->deleteLater();

    emit updateStoreItemSignal(output);
    
}
} /* namespace Swagger */
