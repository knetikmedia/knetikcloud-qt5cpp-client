/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGInvoicesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGInvoicesApi::SWGInvoicesApi() {}

SWGInvoicesApi::~SWGInvoicesApi() {}

SWGInvoicesApi::SWGInvoicesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGInvoicesApi::createInvoice(SWGInvoiceCreateRequest req) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = req.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::createInvoiceCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::createInvoiceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGInvoiceResource*>* output = new QList<SWGInvoiceResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGInvoiceResource* o = new SWGInvoiceResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit createInvoiceSignal(output);
    
}
void
SWGInvoicesApi::getFulFillmentStatuses() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/fulfillment-statuses");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::getFulFillmentStatusesCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::getFulFillmentStatusesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getFulFillmentStatusesSignal(output);
    
}
void
SWGInvoicesApi::getInvoice(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::getInvoiceCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::getInvoiceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGInvoiceResource* output = static_cast<SWGInvoiceResource*>(create(json, QString("SWGInvoiceResource")));
    

    worker->deleteLater();

    emit getInvoiceSignal(output);
    
}
void
SWGInvoicesApi::getInvoiceLogs(qint32 id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/logs");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::getInvoiceLogsCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::getInvoiceLogsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«InvoiceLogEntry»* output = static_cast<SWGPageResource«InvoiceLogEntry»*>(create(json, QString("SWGPageResource«InvoiceLogEntry»")));
    

    worker->deleteLater();

    emit getInvoiceLogsSignal(output);
    
}
void
SWGInvoicesApi::getInvoices(qint32 filter_user, QString* filter_email, QString* filter_fulfillment_status, QString* filter_payment_status, QString* filter_item_name, QString* filter_external_ref, QString* filter_created_date, QString* filter_vendor_ids, QString* filter_currency, QString* filter_shipping_state_name, QString* filter_shipping_country_name, float filter_shipping, QString* filter_vendor_name, QString* filter_sku, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_user"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_user)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_email"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_email)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_fulfillment_status"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_fulfillment_status)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_payment_status"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_payment_status)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_item_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_item_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_external_ref"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_external_ref)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_created_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_created_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_vendor_ids"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_vendor_ids)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_currency)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_shipping_state_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_shipping_state_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_shipping_country_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_shipping_country_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_shipping"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_shipping)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_vendor_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_vendor_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_sku"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_sku)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::getInvoicesCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::getInvoicesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«InvoiceResource»* output = static_cast<SWGPageResource«InvoiceResource»*>(create(json, QString("SWGPageResource«InvoiceResource»")));
    

    worker->deleteLater();

    emit getInvoicesSignal(output);
    
}
void
SWGInvoicesApi::getPaymentStatuses() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/payment-statuses");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::getPaymentStatusesCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::getPaymentStatusesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getPaymentStatusesSignal(output);
    
}
void
SWGInvoicesApi::payInvoice(qint32 id, SWGPayBySavedMethodRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/payments");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::payInvoiceCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::payInvoiceCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit payInvoiceSignal();
}
void
SWGInvoicesApi::setExternalRef(qint32 id, QString* external_ref) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/external-ref");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = external_ref.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::setExternalRefCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::setExternalRefCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setExternalRefSignal();
}
void
SWGInvoicesApi::setInvoiceItemFulfillmentStatus(qint32 id, QString* sku, QString* status) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/items/{sku}/fulfillment-status");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));
    QString skuPathParam("{"); skuPathParam.append("sku").append("}");
    fullPath.replace(skuPathParam, stringValue(sku));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = status.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::setInvoiceItemFulfillmentStatusCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::setInvoiceItemFulfillmentStatusCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setInvoiceItemFulfillmentStatusSignal();
}
void
SWGInvoicesApi::setOrderNotes(qint32 id, QString* order_notes) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/order-notes");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = order_notes.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::setOrderNotesCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::setOrderNotesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setOrderNotesSignal();
}
void
SWGInvoicesApi::setPaymentStatus(qint32 id, SWGInvoicePaymentStatusRequest request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/payment-status");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::setPaymentStatusCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::setPaymentStatusCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setPaymentStatusSignal();
}
void
SWGInvoicesApi::updateBillingInfo(qint32 id, SWGAddressResource billing_info_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invoices/{id}/billing-address");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = billing_info_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGInvoicesApi::updateBillingInfoCallback);

    worker->execute(&input);
}

void
SWGInvoicesApi::updateBillingInfoCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateBillingInfoSignal();
}
} /* namespace Swagger */
