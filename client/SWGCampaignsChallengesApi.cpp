/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGCampaignsChallengesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGCampaignsChallengesApi::SWGCampaignsChallengesApi() {}

SWGCampaignsChallengesApi::~SWGCampaignsChallengesApi() {}

SWGCampaignsChallengesApi::SWGCampaignsChallengesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGCampaignsChallengesApi::createChallenge(SWGChallengeResource challenge_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = challenge_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::createChallengeCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::createChallengeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeResource* output = static_cast<SWGChallengeResource*>(create(json, QString("SWGChallengeResource")));
    

    worker->deleteLater();

    emit createChallengeSignal(output);
    
}
void
SWGCampaignsChallengesApi::createChallengeActivity(qint64 challenge_id, SWGChallengeActivityResource challenge_activity_resource, bool validate_settings) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{challenge_id}/activities");

    QString challenge_idPathParam("{"); challenge_idPathParam.append("challenge_id").append("}");
    fullPath.replace(challenge_idPathParam, stringValue(challenge_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("validateSettings"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(validate_settings)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = challenge_activity_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::createChallengeActivityCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::createChallengeActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeActivityResource* output = static_cast<SWGChallengeActivityResource*>(create(json, QString("SWGChallengeActivityResource")));
    

    worker->deleteLater();

    emit createChallengeActivitySignal(output);
    
}
void
SWGCampaignsChallengesApi::createChallengeTemplate(SWGTemplateResource challenge_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = challenge_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::createChallengeTemplateCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::createChallengeTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createChallengeTemplateSignal(output);
    
}
void
SWGCampaignsChallengesApi::deleteChallenge(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::deleteChallengeCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::deleteChallengeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteChallengeSignal();
}
void
SWGCampaignsChallengesApi::deleteChallengeActivity(qint64 activity_id, qint64 challenge_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{challenge_id}/activities/{activity_id}");

    QString activity_idPathParam("{"); activity_idPathParam.append("activity_id").append("}");
    fullPath.replace(activity_idPathParam, stringValue(activity_id));
    QString challenge_idPathParam("{"); challenge_idPathParam.append("challenge_id").append("}");
    fullPath.replace(challenge_idPathParam, stringValue(challenge_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::deleteChallengeActivityCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::deleteChallengeActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteChallengeActivitySignal();
}
void
SWGCampaignsChallengesApi::deleteChallengeEvent(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/events/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::deleteChallengeEventCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::deleteChallengeEventCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteChallengeEventSignal();
}
void
SWGCampaignsChallengesApi::deleteChallengeTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::deleteChallengeTemplateCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::deleteChallengeTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteChallengeTemplateSignal();
}
void
SWGCampaignsChallengesApi::getChallenge(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeResource* output = static_cast<SWGChallengeResource*>(create(json, QString("SWGChallengeResource")));
    

    worker->deleteLater();

    emit getChallengeSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeActivities(qint64 challenge_id, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{challenge_id}/activities");

    QString challenge_idPathParam("{"); challenge_idPathParam.append("challenge_id").append("}");
    fullPath.replace(challenge_idPathParam, stringValue(challenge_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeActivitiesCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeActivitiesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BareChallengeActivityResource»* output = static_cast<SWGPageResource«BareChallengeActivityResource»*>(create(json, QString("SWGPageResource«BareChallengeActivityResource»")));
    

    worker->deleteLater();

    emit getChallengeActivitiesSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeActivity(qint64 activity_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{challenge_id}/activities/{activity_id}");

    QString activity_idPathParam("{"); activity_idPathParam.append("activity_id").append("}");
    fullPath.replace(activity_idPathParam, stringValue(activity_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeActivityCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeActivityResource* output = static_cast<SWGChallengeActivityResource*>(create(json, QString("SWGChallengeActivityResource")));
    

    worker->deleteLater();

    emit getChallengeActivitySignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeEvent(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/events/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeEventCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeEventCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeEventResource* output = static_cast<SWGChallengeEventResource*>(create(json, QString("SWGChallengeEventResource")));
    

    worker->deleteLater();

    emit getChallengeEventSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeEvents(QString* filter_start_date, QString* filter_end_date, bool filter_campaigns, qint64 filter_challenge, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/events");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_campaigns"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_campaigns)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_challenge"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_challenge)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeEventsCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeEventsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ChallengeEventResource»* output = static_cast<SWGPageResource«ChallengeEventResource»*>(create(json, QString("SWGPageResource«ChallengeEventResource»")));
    

    worker->deleteLater();

    emit getChallengeEventsSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeTemplateCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getChallengeTemplateSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallengeTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengeTemplatesCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengeTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getChallengeTemplatesSignal(output);
    
}
void
SWGCampaignsChallengesApi::getChallenges(bool filter_template, bool filter_active_campaign) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_template"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_template)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_active_campaign"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_active_campaign)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::getChallengesCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::getChallengesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ChallengeResource»* output = static_cast<SWGPageResource«ChallengeResource»*>(create(json, QString("SWGPageResource«ChallengeResource»")));
    

    worker->deleteLater();

    emit getChallengesSignal(output);
    
}
void
SWGCampaignsChallengesApi::updateChallenge(qint64 id, SWGChallengeResource challenge_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = challenge_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::updateChallengeCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::updateChallengeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeResource* output = static_cast<SWGChallengeResource*>(create(json, QString("SWGChallengeResource")));
    

    worker->deleteLater();

    emit updateChallengeSignal(output);
    
}
void
SWGCampaignsChallengesApi::updateChallengeActivity(qint64 activity_id, qint64 challenge_id, SWGChallengeActivityResource challenge_activity_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/{challenge_id}/activities/{activity_id}");

    QString activity_idPathParam("{"); activity_idPathParam.append("activity_id").append("}");
    fullPath.replace(activity_idPathParam, stringValue(activity_id));
    QString challenge_idPathParam("{"); challenge_idPathParam.append("challenge_id").append("}");
    fullPath.replace(challenge_idPathParam, stringValue(challenge_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = challenge_activity_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::updateChallengeActivityCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::updateChallengeActivityCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGChallengeActivityResource* output = static_cast<SWGChallengeActivityResource*>(create(json, QString("SWGChallengeActivityResource")));
    

    worker->deleteLater();

    emit updateChallengeActivitySignal(output);
    
}
void
SWGCampaignsChallengesApi::updateChallengeTemplate(QString* id, SWGTemplateResource challenge_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/challenges/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = challenge_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGCampaignsChallengesApi::updateChallengeTemplateCallback);

    worker->execute(&input);
}

void
SWGCampaignsChallengesApi::updateChallengeTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateChallengeTemplateSignal(output);
    
}
} /* namespace Swagger */
