/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGTaxesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGTaxesApi::SWGTaxesApi() {}

SWGTaxesApi::~SWGTaxesApi() {}

SWGTaxesApi::SWGTaxesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGTaxesApi::createCountryTax(SWGCountryTaxResource tax_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = tax_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::createCountryTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::createCountryTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCountryTaxResource* output = static_cast<SWGCountryTaxResource*>(create(json, QString("SWGCountryTaxResource")));
    

    worker->deleteLater();

    emit createCountryTaxSignal(output);
    
}
void
SWGTaxesApi::createStateTax(QString* country_code_iso3, SWGStateTaxResource tax_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}/states");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = tax_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::createStateTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::createStateTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStateTaxResource* output = static_cast<SWGStateTaxResource*>(create(json, QString("SWGStateTaxResource")));
    

    worker->deleteLater();

    emit createStateTaxSignal(output);
    
}
void
SWGTaxesApi::deleteCountryTax(QString* country_code_iso3) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::deleteCountryTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::deleteCountryTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteCountryTaxSignal();
}
void
SWGTaxesApi::deleteStateTax(QString* country_code_iso3, QString* state_code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}/states/{state_code}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));
    QString state_codePathParam("{"); state_codePathParam.append("state_code").append("}");
    fullPath.replace(state_codePathParam, stringValue(state_code));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::deleteStateTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::deleteStateTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteStateTaxSignal();
}
void
SWGTaxesApi::getCountryTax(QString* country_code_iso3) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::getCountryTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::getCountryTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCountryTaxResource* output = static_cast<SWGCountryTaxResource*>(create(json, QString("SWGCountryTaxResource")));
    

    worker->deleteLater();

    emit getCountryTaxSignal(output);
    
}
void
SWGTaxesApi::getCountryTaxes(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::getCountryTaxesCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::getCountryTaxesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«CountryTaxResource»* output = static_cast<SWGPageResource«CountryTaxResource»*>(create(json, QString("SWGPageResource«CountryTaxResource»")));
    

    worker->deleteLater();

    emit getCountryTaxesSignal(output);
    
}
void
SWGTaxesApi::getStateTax(QString* country_code_iso3, QString* state_code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}/states/{state_code}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));
    QString state_codePathParam("{"); state_codePathParam.append("state_code").append("}");
    fullPath.replace(state_codePathParam, stringValue(state_code));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::getStateTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::getStateTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStateTaxResource* output = static_cast<SWGStateTaxResource*>(create(json, QString("SWGStateTaxResource")));
    

    worker->deleteLater();

    emit getStateTaxSignal(output);
    
}
void
SWGTaxesApi::getStateTaxesForCountries(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/states");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::getStateTaxesForCountriesCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::getStateTaxesForCountriesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«StateTaxResource»* output = static_cast<SWGPageResource«StateTaxResource»*>(create(json, QString("SWGPageResource«StateTaxResource»")));
    

    worker->deleteLater();

    emit getStateTaxesForCountriesSignal(output);
    
}
void
SWGTaxesApi::getStateTaxesForCountry(QString* country_code_iso3, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}/states");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::getStateTaxesForCountryCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::getStateTaxesForCountryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«StateTaxResource»* output = static_cast<SWGPageResource«StateTaxResource»*>(create(json, QString("SWGPageResource«StateTaxResource»")));
    

    worker->deleteLater();

    emit getStateTaxesForCountrySignal(output);
    
}
void
SWGTaxesApi::updateCountryTax(QString* country_code_iso3, SWGCountryTaxResource tax_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = tax_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::updateCountryTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::updateCountryTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCountryTaxResource* output = static_cast<SWGCountryTaxResource*>(create(json, QString("SWGCountryTaxResource")));
    

    worker->deleteLater();

    emit updateCountryTaxSignal(output);
    
}
void
SWGTaxesApi::updateStateTax(QString* country_code_iso3, QString* state_code, SWGStateTaxResource tax_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/tax/countries/{country_code_iso3}/states/{state_code}");

    QString country_code_iso3PathParam("{"); country_code_iso3PathParam.append("country_code_iso3").append("}");
    fullPath.replace(country_code_iso3PathParam, stringValue(country_code_iso3));
    QString state_codePathParam("{"); state_codePathParam.append("state_code").append("}");
    fullPath.replace(state_codePathParam, stringValue(state_code));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = tax_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGTaxesApi::updateStateTaxCallback);

    worker->execute(&input);
}

void
SWGTaxesApi::updateStateTaxCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGStateTaxResource* output = static_cast<SWGStateTaxResource*>(create(json, QString("SWGStateTaxResource")));
    

    worker->deleteLater();

    emit updateStateTaxSignal(output);
    
}
} /* namespace Swagger */
