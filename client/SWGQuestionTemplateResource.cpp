/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGQuestionTemplateResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGQuestionTemplateResource::SWGQuestionTemplateResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGQuestionTemplateResource::SWGQuestionTemplateResource() {
    init();
}

SWGQuestionTemplateResource::~SWGQuestionTemplateResource() {
    this->cleanup();
}

void
SWGQuestionTemplateResource::init() {
    answer_property = new SWGPropertyDefinitionResource();
    created_date = 0L;
    id = new QString("");
    name = new QString("");
    properties = new QList<SWGPropertyDefinitionResource*>();
    question_property = new SWGPropertyDefinitionResource();
    updated_date = 0L;
}

void
SWGQuestionTemplateResource::cleanup() {
    
    if(answer_property != nullptr) {
        delete answer_property;
    }


    if(id != nullptr) {
        delete id;
    }

    if(name != nullptr) {
        delete name;
    }

    if(properties != nullptr) {
        QList<SWGPropertyDefinitionResource*>* arr = properties;
        foreach(SWGPropertyDefinitionResource* o, *arr) {
            delete o;
        }
        delete properties;
    }

    if(question_property != nullptr) {
        delete question_property;
    }

}

SWGQuestionTemplateResource*
SWGQuestionTemplateResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGQuestionTemplateResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&answer_property, pJson["answer_property"], "SWGPropertyDefinitionResource", "SWGPropertyDefinitionResource");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&properties, pJson["properties"], "QList", "SWGPropertyDefinitionResource");
    
    ::Swagger::setValue(&question_property, pJson["question_property"], "SWGPropertyDefinitionResource", "SWGPropertyDefinitionResource");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGQuestionTemplateResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGQuestionTemplateResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("answer_property"), answer_property, obj, QString("SWGPropertyDefinitionResource"));

    obj->insert("created_date", QJsonValue(created_date));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    QJsonArray propertiesJsonArray;
    toJsonArray((QList<void*>*)properties, &propertiesJsonArray, "properties", "SWGPropertyDefinitionResource");
    obj->insert("properties", propertiesJsonArray);

    toJsonValue(QString("question_property"), question_property, obj, QString("SWGPropertyDefinitionResource"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

SWGPropertyDefinitionResource*
SWGQuestionTemplateResource::getAnswerProperty() {
    return answer_property;
}
void
SWGQuestionTemplateResource::setAnswerProperty(SWGPropertyDefinitionResource* answer_property) {
    this->answer_property = answer_property;
}

qint64
SWGQuestionTemplateResource::getCreatedDate() {
    return created_date;
}
void
SWGQuestionTemplateResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QString*
SWGQuestionTemplateResource::getId() {
    return id;
}
void
SWGQuestionTemplateResource::setId(QString* id) {
    this->id = id;
}

QString*
SWGQuestionTemplateResource::getName() {
    return name;
}
void
SWGQuestionTemplateResource::setName(QString* name) {
    this->name = name;
}

QList<SWGPropertyDefinitionResource*>*
SWGQuestionTemplateResource::getProperties() {
    return properties;
}
void
SWGQuestionTemplateResource::setProperties(QList<SWGPropertyDefinitionResource*>* properties) {
    this->properties = properties;
}

SWGPropertyDefinitionResource*
SWGQuestionTemplateResource::getQuestionProperty() {
    return question_property;
}
void
SWGQuestionTemplateResource::setQuestionProperty(SWGPropertyDefinitionResource* question_property) {
    this->question_property = question_property;
}

qint64
SWGQuestionTemplateResource::getUpdatedDate() {
    return updated_date;
}
void
SWGQuestionTemplateResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

