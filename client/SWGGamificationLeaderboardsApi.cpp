/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGGamificationLeaderboardsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGGamificationLeaderboardsApi::SWGGamificationLeaderboardsApi() {}

SWGGamificationLeaderboardsApi::~SWGGamificationLeaderboardsApi() {}

SWGGamificationLeaderboardsApi::SWGGamificationLeaderboardsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGGamificationLeaderboardsApi::getLeaderboard(QString* context_type, QString* context_id, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leaderboards/{context_type}/{context_id}");

    QString context_typePathParam("{"); context_typePathParam.append("context_type").append("}");
    fullPath.replace(context_typePathParam, stringValue(context_type));
    QString context_idPathParam("{"); context_idPathParam.append("context_id").append("}");
    fullPath.replace(context_idPathParam, stringValue(context_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLeaderboardsApi::getLeaderboardCallback);

    worker->execute(&input);
}

void
SWGGamificationLeaderboardsApi::getLeaderboardCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLeaderboardResource* output = static_cast<SWGLeaderboardResource*>(create(json, QString("SWGLeaderboardResource")));
    

    worker->deleteLater();

    emit getLeaderboardSignal(output);
    
}
void
SWGGamificationLeaderboardsApi::getLeaderboardRank(QString* context_type, QString* context_id, QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leaderboards/{context_type}/{context_id}/users/{id}/rank");

    QString context_typePathParam("{"); context_typePathParam.append("context_type").append("}");
    fullPath.replace(context_typePathParam, stringValue(context_type));
    QString context_idPathParam("{"); context_idPathParam.append("context_id").append("}");
    fullPath.replace(context_idPathParam, stringValue(context_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLeaderboardsApi::getLeaderboardRankCallback);

    worker->execute(&input);
}

void
SWGGamificationLeaderboardsApi::getLeaderboardRankCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGLeaderboardEntryResource* output = static_cast<SWGLeaderboardEntryResource*>(create(json, QString("SWGLeaderboardEntryResource")));
    

    worker->deleteLater();

    emit getLeaderboardRankSignal(output);
    
}
void
SWGGamificationLeaderboardsApi::getLeaderboardStrategies() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/leaderboards/strategies");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationLeaderboardsApi::getLeaderboardStrategiesCallback);

    worker->execute(&input);
}

void
SWGGamificationLeaderboardsApi::getLeaderboardStrategiesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getLeaderboardStrategiesSignal(output);
    
}
} /* namespace Swagger */
