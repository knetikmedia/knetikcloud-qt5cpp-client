/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGAuthRolesApi_H_
#define _SWG_SWGAuthRolesApi_H_

#include "SWGHttpRequest.h"

#include <QList>
#include <QString>
#include "SWGClientResource.h"
#include "SWGPageResource«RoleResource».h"
#include "SWGResult.h"
#include "SWGRoleResource.h"
#include "SWGUserResource.h"

#include <QObject>

namespace Swagger {

class SWGAuthRolesApi: public QObject {
    Q_OBJECT

public:
    SWGAuthRolesApi();
    SWGAuthRolesApi(QString host, QString basePath);
    ~SWGAuthRolesApi();

    QString host;
    QString basePath;

    void createRole(SWGRoleResource role_resource);
    void deleteRole(QString* role, bool force);
    void getClientRoles(QString* client_key);
    void getRole(QString* role);
    void getRoles(qint32 size, qint32 page, QString* order);
    void getUserRoles(qint32 user_id);
    void setClientRoles(QString* client_key, QList<QString*>* roles_list);
    void setPermissionsForRole(QString* role, QList<QString*>* permissions_list);
    void setUserRoles(qint32 user_id, QList<QString*>* roles_list);
    void updateRole(QString* role, SWGRoleResource role_resource);
    
private:
    void createRoleCallback (HttpRequestWorker * worker);
    void deleteRoleCallback (HttpRequestWorker * worker);
    void getClientRolesCallback (HttpRequestWorker * worker);
    void getRoleCallback (HttpRequestWorker * worker);
    void getRolesCallback (HttpRequestWorker * worker);
    void getUserRolesCallback (HttpRequestWorker * worker);
    void setClientRolesCallback (HttpRequestWorker * worker);
    void setPermissionsForRoleCallback (HttpRequestWorker * worker);
    void setUserRolesCallback (HttpRequestWorker * worker);
    void updateRoleCallback (HttpRequestWorker * worker);
    
signals:
    void createRoleSignal(SWGRoleResource* summary);
    void deleteRoleSignal();
    void getClientRolesSignal(QList<SWGRoleResource*>* summary);
    void getRoleSignal(SWGRoleResource* summary);
    void getRolesSignal(SWGPageResource«RoleResource»* summary);
    void getUserRolesSignal(QList<SWGRoleResource*>* summary);
    void setClientRolesSignal(SWGClientResource* summary);
    void setPermissionsForRoleSignal(SWGRoleResource* summary);
    void setUserRolesSignal(SWGUserResource* summary);
    void updateRoleSignal(SWGRoleResource* summary);
    
};
}
#endif
