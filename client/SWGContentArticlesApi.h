/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGContentArticlesApi_H_
#define _SWG_SWGContentArticlesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGArticleResource.h"
#include "SWGPageResource«ArticleResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGContentArticlesApi: public QObject {
    Q_OBJECT

public:
    SWGContentArticlesApi();
    SWGContentArticlesApi(QString host, QString basePath);
    ~SWGContentArticlesApi();

    QString host;
    QString basePath;

    void createArticle(SWGArticleResource article_resource);
    void createArticleTemplate(SWGTemplateResource article_template_resource);
    void deleteArticle(QString* id);
    void deleteArticleTemplate(QString* id, QString* cascade);
    void getArticle(QString* id);
    void getArticleTemplate(QString* id);
    void getArticleTemplates(qint32 size, qint32 page, QString* order);
    void getArticles(QString* filter_category, QString* filter_tagset, QString* filter_title, qint32 size, qint32 page, QString* order);
    void updateArticle(QString* id, SWGArticleResource article_resource);
    void updateArticleTemplate(QString* id, SWGTemplateResource article_template_resource);
    
private:
    void createArticleCallback (HttpRequestWorker * worker);
    void createArticleTemplateCallback (HttpRequestWorker * worker);
    void deleteArticleCallback (HttpRequestWorker * worker);
    void deleteArticleTemplateCallback (HttpRequestWorker * worker);
    void getArticleCallback (HttpRequestWorker * worker);
    void getArticleTemplateCallback (HttpRequestWorker * worker);
    void getArticleTemplatesCallback (HttpRequestWorker * worker);
    void getArticlesCallback (HttpRequestWorker * worker);
    void updateArticleCallback (HttpRequestWorker * worker);
    void updateArticleTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createArticleSignal(SWGArticleResource* summary);
    void createArticleTemplateSignal(SWGTemplateResource* summary);
    void deleteArticleSignal();
    void deleteArticleTemplateSignal();
    void getArticleSignal(SWGArticleResource* summary);
    void getArticleTemplateSignal(SWGTemplateResource* summary);
    void getArticleTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getArticlesSignal(SWGPageResource«ArticleResource»* summary);
    void updateArticleSignal(SWGArticleResource* summary);
    void updateArticleTemplateSignal(SWGTemplateResource* summary);
    
};
}
#endif
