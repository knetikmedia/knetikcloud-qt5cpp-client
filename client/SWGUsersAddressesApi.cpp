/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUsersAddressesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGUsersAddressesApi::SWGUsersAddressesApi() {}

SWGUsersAddressesApi::~SWGUsersAddressesApi() {}

SWGUsersAddressesApi::SWGUsersAddressesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUsersAddressesApi::createAddress(QString* user_id, SWGSavedAddressResource saved_address_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/addresses");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = saved_address_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersAddressesApi::createAddressCallback);

    worker->execute(&input);
}

void
SWGUsersAddressesApi::createAddressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSavedAddressResource* output = static_cast<SWGSavedAddressResource*>(create(json, QString("SWGSavedAddressResource")));
    

    worker->deleteLater();

    emit createAddressSignal(output);
    
}
void
SWGUsersAddressesApi::deleteAddress(QString* user_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/addresses/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersAddressesApi::deleteAddressCallback);

    worker->execute(&input);
}

void
SWGUsersAddressesApi::deleteAddressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteAddressSignal();
}
void
SWGUsersAddressesApi::getAddress(QString* user_id, qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/addresses/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersAddressesApi::getAddressCallback);

    worker->execute(&input);
}

void
SWGUsersAddressesApi::getAddressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSavedAddressResource* output = static_cast<SWGSavedAddressResource*>(create(json, QString("SWGSavedAddressResource")));
    

    worker->deleteLater();

    emit getAddressSignal(output);
    
}
void
SWGUsersAddressesApi::getAddresses(QString* user_id, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/addresses");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersAddressesApi::getAddressesCallback);

    worker->execute(&input);
}

void
SWGUsersAddressesApi::getAddressesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«SavedAddressResource»* output = static_cast<SWGPageResource«SavedAddressResource»*>(create(json, QString("SWGPageResource«SavedAddressResource»")));
    

    worker->deleteLater();

    emit getAddressesSignal(output);
    
}
void
SWGUsersAddressesApi::updateAddress(QString* user_id, qint32 id, SWGSavedAddressResource saved_address_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/{user_id}/addresses/{id}");

    QString user_idPathParam("{"); user_idPathParam.append("user_id").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = saved_address_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGUsersAddressesApi::updateAddressCallback);

    worker->execute(&input);
}

void
SWGUsersAddressesApi::updateAddressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSavedAddressResource* output = static_cast<SWGSavedAddressResource*>(create(json, QString("SWGSavedAddressResource")));
    

    worker->deleteLater();

    emit updateAddressSignal(output);
    
}
} /* namespace Swagger */
