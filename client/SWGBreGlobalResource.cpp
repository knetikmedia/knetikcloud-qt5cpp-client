/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBreGlobalResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBreGlobalResource::SWGBreGlobalResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBreGlobalResource::SWGBreGlobalResource() {
    init();
}

SWGBreGlobalResource::~SWGBreGlobalResource() {
    this->cleanup();
}

void
SWGBreGlobalResource::init() {
    description = new QString("");
    id = new QString("");
    key = new QString("");
    name = new QString("");
    scopes = new QList<SWGBreGlobalScopeDefinition*>();
    system_global = false;
    type = new QString("");
}

void
SWGBreGlobalResource::cleanup() {
    
    if(description != nullptr) {
        delete description;
    }

    if(id != nullptr) {
        delete id;
    }

    if(key != nullptr) {
        delete key;
    }

    if(name != nullptr) {
        delete name;
    }

    if(scopes != nullptr) {
        QList<SWGBreGlobalScopeDefinition*>* arr = scopes;
        foreach(SWGBreGlobalScopeDefinition* o, *arr) {
            delete o;
        }
        delete scopes;
    }


    if(type != nullptr) {
        delete type;
    }
}

SWGBreGlobalResource*
SWGBreGlobalResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBreGlobalResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&key, pJson["key"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&scopes, pJson["scopes"], "QList", "SWGBreGlobalScopeDefinition");
    
    ::Swagger::setValue(&system_global, pJson["system_global"], "bool", "");
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
}

QString
SWGBreGlobalResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBreGlobalResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("key"), key, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    QJsonArray scopesJsonArray;
    toJsonArray((QList<void*>*)scopes, &scopesJsonArray, "scopes", "SWGBreGlobalScopeDefinition");
    obj->insert("scopes", scopesJsonArray);

    obj->insert("system_global", QJsonValue(system_global));

    toJsonValue(QString("type"), type, obj, QString("QString"));

    return obj;
}

QString*
SWGBreGlobalResource::getDescription() {
    return description;
}
void
SWGBreGlobalResource::setDescription(QString* description) {
    this->description = description;
}

QString*
SWGBreGlobalResource::getId() {
    return id;
}
void
SWGBreGlobalResource::setId(QString* id) {
    this->id = id;
}

QString*
SWGBreGlobalResource::getKey() {
    return key;
}
void
SWGBreGlobalResource::setKey(QString* key) {
    this->key = key;
}

QString*
SWGBreGlobalResource::getName() {
    return name;
}
void
SWGBreGlobalResource::setName(QString* name) {
    this->name = name;
}

QList<SWGBreGlobalScopeDefinition*>*
SWGBreGlobalResource::getScopes() {
    return scopes;
}
void
SWGBreGlobalResource::setScopes(QList<SWGBreGlobalScopeDefinition*>* scopes) {
    this->scopes = scopes;
}

bool
SWGBreGlobalResource::getSystemGlobal() {
    return system_global;
}
void
SWGBreGlobalResource::setSystemGlobal(bool system_global) {
    this->system_global = system_global;
}

QString*
SWGBreGlobalResource::getType() {
    return type;
}
void
SWGBreGlobalResource::setType(QString* type) {
    this->type = type;
}



} /* namespace Swagger */

