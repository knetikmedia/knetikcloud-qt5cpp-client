/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGSearchApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGSearchApi::SWGSearchApi() {}

SWGSearchApi::~SWGSearchApi() {}

SWGSearchApi::SWGSearchApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGSearchApi::addSearchIndex(QString* type, QString* id, SWGObject* object) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/search/index/{type}/{id}");

    QString typePathParam("{"); typePathParam.append("type").append("}");
    fullPath.replace(typePathParam, stringValue(type));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = object.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSearchApi::addSearchIndexCallback);

    worker->execute(&input);
}

void
SWGSearchApi::addSearchIndexCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addSearchIndexSignal();
}
void
SWGSearchApi::addSearchMappings(QList<SWGSearchReferenceMapping*>* mappings) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/search/mappings");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QJsonArray* mappingsArray = new QJsonArray();
    toJsonArray((QList<void*>*)mappings, mappingsArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*mappingsArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSearchApi::addSearchMappingsCallback);

    worker->execute(&input);
}

void
SWGSearchApi::addSearchMappingsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addSearchMappingsSignal();
}
void
SWGSearchApi::deleteSearchIndex(QString* type, QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/search/index/{type}/{id}");

    QString typePathParam("{"); typePathParam.append("type").append("}");
    fullPath.replace(typePathParam, stringValue(type));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSearchApi::deleteSearchIndexCallback);

    worker->execute(&input);
}

void
SWGSearchApi::deleteSearchIndexCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSearchIndexSignal();
}
void
SWGSearchApi::deleteSearchIndexes(QString* type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/search/index/{type}");

    QString typePathParam("{"); typePathParam.append("type").append("}");
    fullPath.replace(typePathParam, stringValue(type));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSearchApi::deleteSearchIndexesCallback);

    worker->execute(&input);
}

void
SWGSearchApi::deleteSearchIndexesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSearchIndexesSignal();
}
void
SWGSearchApi::searchIndex(QString* type, SWGObject* query, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/search/index/{type}");

    QString typePathParam("{"); typePathParam.append("type").append("}");
    fullPath.replace(typePathParam, stringValue(type));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = query.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGSearchApi::searchIndexCallback);

    worker->execute(&input);
}

void
SWGSearchApi::searchIndexCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«Map«string,object»»* output = static_cast<SWGPageResource«Map«string,object»»*>(create(json, QString("SWGPageResource«Map«string,object»»")));
    

    worker->deleteLater();

    emit searchIndexSignal(output);
    
}
} /* namespace Swagger */
