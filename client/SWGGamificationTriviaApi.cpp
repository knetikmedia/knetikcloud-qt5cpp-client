/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGGamificationTriviaApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGGamificationTriviaApi::SWGGamificationTriviaApi() {}

SWGGamificationTriviaApi::~SWGGamificationTriviaApi() {}

SWGGamificationTriviaApi::SWGGamificationTriviaApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGGamificationTriviaApi::addQuestionAnswers(QString* question_id, SWGAnswerResource answer) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{question_id}/answers");

    QString question_idPathParam("{"); question_idPathParam.append("question_id").append("}");
    fullPath.replace(question_idPathParam, stringValue(question_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = answer.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::addQuestionAnswersCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::addQuestionAnswersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAnswerResource* output = static_cast<SWGAnswerResource*>(create(json, QString("SWGAnswerResource")));
    

    worker->deleteLater();

    emit addQuestionAnswersSignal(output);
    
}
void
SWGGamificationTriviaApi::addQuestionTag(QString* id, QString* tag) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}/tags");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = tag.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::addQuestionTagCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::addQuestionTagCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addQuestionTagSignal();
}
void
SWGGamificationTriviaApi::addTagToQuestionsBatch(QString* tag, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/tags");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_idset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_idset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tag"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tag)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_import_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_import_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = tag.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::addTagToQuestionsBatchCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::addTagToQuestionsBatchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint32 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit addTagToQuestionsBatchSignal(output);
    
}
void
SWGGamificationTriviaApi::createImportJob(SWGImportJobResource request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::createImportJobCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::createImportJobCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGImportJobResource* output = static_cast<SWGImportJobResource*>(create(json, QString("SWGImportJobResource")));
    

    worker->deleteLater();

    emit createImportJobSignal(output);
    
}
void
SWGGamificationTriviaApi::createQuestion(SWGQuestionResource question) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = question.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::createQuestionCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::createQuestionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionResource* output = static_cast<SWGQuestionResource*>(create(json, QString("SWGQuestionResource")));
    

    worker->deleteLater();

    emit createQuestionSignal(output);
    
}
void
SWGGamificationTriviaApi::createQuestionTemplate(SWGQuestionTemplateResource question_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = question_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::createQuestionTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::createQuestionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionTemplateResource* output = static_cast<SWGQuestionTemplateResource*>(create(json, QString("SWGQuestionTemplateResource")));
    

    worker->deleteLater();

    emit createQuestionTemplateSignal(output);
    
}
void
SWGGamificationTriviaApi::deleteImportJob(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::deleteImportJobCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::deleteImportJobCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteImportJobSignal();
}
void
SWGGamificationTriviaApi::deleteQuestion(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::deleteQuestionCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::deleteQuestionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteQuestionSignal();
}
void
SWGGamificationTriviaApi::deleteQuestionAnswers(QString* question_id, QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{question_id}/answers/{id}");

    QString question_idPathParam("{"); question_idPathParam.append("question_id").append("}");
    fullPath.replace(question_idPathParam, stringValue(question_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::deleteQuestionAnswersCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::deleteQuestionAnswersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteQuestionAnswersSignal();
}
void
SWGGamificationTriviaApi::deleteQuestionTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::deleteQuestionTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::deleteQuestionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteQuestionTemplateSignal();
}
void
SWGGamificationTriviaApi::getImportJob(qint64 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getImportJobCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getImportJobCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGImportJobResource* output = static_cast<SWGImportJobResource*>(create(json, QString("SWGImportJobResource")));
    

    worker->deleteLater();

    emit getImportJobSignal(output);
    
}
void
SWGGamificationTriviaApi::getImportJobs(QString* filter_vendor, QString* filter_category, QString* filter_name, QString* filter_status, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_vendor"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_vendor)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_status"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_status)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getImportJobsCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getImportJobsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ImportJobResource»* output = static_cast<SWGPageResource«ImportJobResource»*>(create(json, QString("SWGPageResource«ImportJobResource»")));
    

    worker->deleteLater();

    emit getImportJobsSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestion(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionResource* output = static_cast<SWGQuestionResource*>(create(json, QString("SWGQuestionResource")));
    

    worker->deleteLater();

    emit getQuestionSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionAnswer(QString* question_id, QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{question_id}/answers/{id}");

    QString question_idPathParam("{"); question_idPathParam.append("question_id").append("}");
    fullPath.replace(question_idPathParam, stringValue(question_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionAnswerCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionAnswerCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAnswerResource* output = static_cast<SWGAnswerResource*>(create(json, QString("SWGAnswerResource")));
    

    worker->deleteLater();

    emit getQuestionAnswerSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionAnswers(QString* question_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{question_id}/answers");

    QString question_idPathParam("{"); question_idPathParam.append("question_id").append("}");
    fullPath.replace(question_idPathParam, stringValue(question_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionAnswersCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionAnswersCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGAnswerResource*>* output = new QList<SWGAnswerResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGAnswerResource* o = new SWGAnswerResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getQuestionAnswersSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionDeltas(qint64 since) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/delta");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("since"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(since)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionDeltasCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionDeltasCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<SWGDeltaResource*>* output = new QList<SWGDeltaResource*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        SWGDeltaResource* o = new SWGDeltaResource();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getQuestionDeltasSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionTags(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}/tags");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionTagsCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionTagsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getQuestionTagsSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionTemplateResource* output = static_cast<SWGQuestionTemplateResource*>(create(json, QString("SWGQuestionTemplateResource")));
    

    worker->deleteLater();

    emit getQuestionTemplateSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionTemplatesCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«QuestionTemplateResource»* output = static_cast<SWGPageResource«QuestionTemplateResource»*>(create(json, QString("SWGPageResource«QuestionTemplateResource»")));
    

    worker->deleteLater();

    emit getQuestionTemplatesSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestions(qint32 size, qint32 page, QString* order, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tagset, QString* filter_tag, QString* filter_type, bool filter_published, qint64 filter_import_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_idset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_idset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tag"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tag)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_import_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_import_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionsCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«QuestionResource»* output = static_cast<SWGPageResource«QuestionResource»*>(create(json, QString("SWGPageResource«QuestionResource»")));
    

    worker->deleteLater();

    emit getQuestionsSignal(output);
    
}
void
SWGGamificationTriviaApi::getQuestionsCount(QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/count");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_idset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_idset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tag"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tag)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::getQuestionsCountCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::getQuestionsCountCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint64 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit getQuestionsCountSignal(output);
    
}
void
SWGGamificationTriviaApi::processImportJob(qint64 id, bool publish_now) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import/{id}/process");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("publish_now"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(publish_now)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::processImportJobCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::processImportJobCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGImportJobResource* output = static_cast<SWGImportJobResource*>(create(json, QString("SWGImportJobResource")));
    

    worker->deleteLater();

    emit processImportJobSignal(output);
    
}
void
SWGGamificationTriviaApi::removeQuestionTag(QString* id, QString* tag) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}/tags/{tag}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));
    QString tagPathParam("{"); tagPathParam.append("tag").append("}");
    fullPath.replace(tagPathParam, stringValue(tag));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::removeQuestionTagCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::removeQuestionTagCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit removeQuestionTagSignal();
}
void
SWGGamificationTriviaApi::removeTagToQuestionsBatch(QString* tag, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tag, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/tags/{tag}");

    QString tagPathParam("{"); tagPathParam.append("tag").append("}");
    fullPath.replace(tagPathParam, stringValue(tag));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_idset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_idset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tag"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tag)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_import_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_import_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::removeTagToQuestionsBatchCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::removeTagToQuestionsBatchCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint32 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit removeTagToQuestionsBatchSignal(output);
    
}
void
SWGGamificationTriviaApi::searchQuestionTags(QString* filter_search, QString* filter_category, qint64 filter_import_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/tags");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_import_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_import_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::searchQuestionTagsCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::searchQuestionTagsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCollection«string»* output = static_cast<SWGCollection«string»*>(create(json, QString("SWGCollection«string»")));
    

    worker->deleteLater();

    emit searchQuestionTagsSignal(output);
    
}
void
SWGGamificationTriviaApi::updateImportJob(qint64 id, SWGImportJobResource request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/import/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::updateImportJobCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::updateImportJobCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGImportJobResource* output = static_cast<SWGImportJobResource*>(create(json, QString("SWGImportJobResource")));
    

    worker->deleteLater();

    emit updateImportJobSignal(output);
    
}
void
SWGGamificationTriviaApi::updateQuestion(QString* id, SWGQuestionResource question) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = question.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::updateQuestionCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::updateQuestionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionResource* output = static_cast<SWGQuestionResource*>(create(json, QString("SWGQuestionResource")));
    

    worker->deleteLater();

    emit updateQuestionSignal(output);
    
}
void
SWGGamificationTriviaApi::updateQuestionAnswer(QString* question_id, QString* id, SWGAnswerResource answer) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/{question_id}/answers/{id}");

    QString question_idPathParam("{"); question_idPathParam.append("question_id").append("}");
    fullPath.replace(question_idPathParam, stringValue(question_id));
    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = answer.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::updateQuestionAnswerCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::updateQuestionAnswerCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateQuestionAnswerSignal();
}
void
SWGGamificationTriviaApi::updateQuestionTemplate(QString* id, SWGQuestionTemplateResource question_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = question_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::updateQuestionTemplateCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::updateQuestionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGQuestionTemplateResource* output = static_cast<SWGQuestionTemplateResource*>(create(json, QString("SWGQuestionTemplateResource")));
    

    worker->deleteLater();

    emit updateQuestionTemplateSignal(output);
    
}
void
SWGGamificationTriviaApi::updateQuestionsInBulk(SWGQuestionResource question, QString* filter_search, QString* filter_idset, QString* filter_category, QString* filter_tagset, QString* filter_type, bool filter_published, qint64 filter_import_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/trivia/questions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_search"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_search)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_idset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_idset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_type"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_type)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_published"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_published)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_import_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_import_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = question.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGGamificationTriviaApi::updateQuestionsInBulkCallback);

    worker->execute(&input);
}

void
SWGGamificationTriviaApi::updateQuestionsInBulkCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    
    qint32 output;  // TODO add primitive output support
        

    worker->deleteLater();

    emit updateQuestionsInBulkSignal(output);
    
}
} /* namespace Swagger */
