/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreShoppingCartsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGStoreShoppingCartsApi::SWGStoreShoppingCartsApi() {}

SWGStoreShoppingCartsApi::~SWGStoreShoppingCartsApi() {}

SWGStoreShoppingCartsApi::SWGStoreShoppingCartsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStoreShoppingCartsApi::addCustomDiscount(QString* id, SWGCouponDefinition custom_discount) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/custom-discounts");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = custom_discount.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::addCustomDiscountCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::addCustomDiscountCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addCustomDiscountSignal();
}
void
SWGStoreShoppingCartsApi::addDiscountToCart(QString* id, SWGSkuRequest sku_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/discounts");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = sku_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::addDiscountToCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::addDiscountToCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addDiscountToCartSignal();
}
void
SWGStoreShoppingCartsApi::addItemToCart(QString* id, SWGCartItemRequest cart_item_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/items");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = cart_item_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::addItemToCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::addItemToCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit addItemToCartSignal();
}
void
SWGStoreShoppingCartsApi::createCart(qint32 owner, QString* currency_code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("owner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency_code"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency_code)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::createCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::createCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    

    worker->deleteLater();

    emit createCartSignal(output);
    
}
void
SWGStoreShoppingCartsApi::getCart(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::getCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::getCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCart* output = static_cast<SWGCart*>(create(json, QString("SWGCart")));
    

    worker->deleteLater();

    emit getCartSignal(output);
    
}
void
SWGStoreShoppingCartsApi::getCarts(qint32 filter_owner_id, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_owner_id"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_owner_id)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::getCartsCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::getCartsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«CartSummary»* output = static_cast<SWGPageResource«CartSummary»*>(create(json, QString("SWGPageResource«CartSummary»")));
    

    worker->deleteLater();

    emit getCartsSignal(output);
    
}
void
SWGStoreShoppingCartsApi::getShippable(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/shippable");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::getShippableCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::getShippableCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGCartShippableResponse* output = static_cast<SWGCartShippableResponse*>(create(json, QString("SWGCartShippableResponse")));
    

    worker->deleteLater();

    emit getShippableSignal(output);
    
}
void
SWGStoreShoppingCartsApi::getShippingCountries(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/countries");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::getShippingCountriesCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::getShippingCountriesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSampleCountriesResponse* output = static_cast<SWGSampleCountriesResponse*>(create(json, QString("SWGSampleCountriesResponse")));
    

    worker->deleteLater();

    emit getShippingCountriesSignal(output);
    
}
void
SWGStoreShoppingCartsApi::removeDiscountFromCart(QString* id, QString* code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/discounts/{code}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));
    QString codePathParam("{"); codePathParam.append("code").append("}");
    fullPath.replace(codePathParam, stringValue(code));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::removeDiscountFromCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::removeDiscountFromCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit removeDiscountFromCartSignal();
}
void
SWGStoreShoppingCartsApi::setCartCurrency(QString* id, QString* currency_code) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/currency");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = currency_code.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::setCartCurrencyCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::setCartCurrencyCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setCartCurrencySignal();
}
void
SWGStoreShoppingCartsApi::setCartOwner(QString* id, qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/owner");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = user_id.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::setCartOwnerCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::setCartOwnerCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit setCartOwnerSignal();
}
void
SWGStoreShoppingCartsApi::updateItemInCart(QString* id, SWGCartItemRequest cart_item_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/items");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = cart_item_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::updateItemInCartCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::updateItemInCartCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateItemInCartSignal();
}
void
SWGStoreShoppingCartsApi::updateShippingAddress(QString* id, SWGCartShippingAddressRequest cart_shipping_address_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/carts/{id}/shipping-address");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = cart_shipping_address_request.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreShoppingCartsApi::updateShippingAddressCallback);

    worker->execute(&input);
}

void
SWGStoreShoppingCartsApi::updateShippingAddressCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateShippingAddressSignal();
}
} /* namespace Swagger */
