/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGForwardLog.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGForwardLog::SWGForwardLog(QString* json) {
    init();
    this->fromJson(*json);
}

SWGForwardLog::SWGForwardLog() {
    init();
}

SWGForwardLog::~SWGForwardLog() {
    this->cleanup();
}

void
SWGForwardLog::init() {
    end_date = 0L;
    error_msg = new QString("");
    http_status_code = 0;
    id = new QString("");
    payload = NULL;
    response = new QString("");
    retry_count = 0;
    start_date = 0L;
    url = new QString("");
}

void
SWGForwardLog::cleanup() {
    

    if(error_msg != nullptr) {
        delete error_msg;
    }


    if(id != nullptr) {
        delete id;
    }

    if(payload != nullptr) {
        delete payload;
    }

    if(response != nullptr) {
        delete response;
    }



    if(url != nullptr) {
        delete url;
    }
}

SWGForwardLog*
SWGForwardLog::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGForwardLog::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&end_date, pJson["end_date"], "qint64", "");
    ::Swagger::setValue(&error_msg, pJson["error_msg"], "QString", "QString");
    ::Swagger::setValue(&http_status_code, pJson["http_status_code"], "qint32", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&payload, pJson["payload"], "SWGObject", "SWGObject");
    ::Swagger::setValue(&response, pJson["response"], "QString", "QString");
    ::Swagger::setValue(&retry_count, pJson["retry_count"], "qint32", "");
    ::Swagger::setValue(&start_date, pJson["start_date"], "qint64", "");
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
}

QString
SWGForwardLog::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGForwardLog::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("end_date", QJsonValue(end_date));

    toJsonValue(QString("error_msg"), error_msg, obj, QString("QString"));

    obj->insert("http_status_code", QJsonValue(http_status_code));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("payload"), payload, obj, QString("SWGObject"));

    toJsonValue(QString("response"), response, obj, QString("QString"));

    obj->insert("retry_count", QJsonValue(retry_count));

    obj->insert("start_date", QJsonValue(start_date));

    toJsonValue(QString("url"), url, obj, QString("QString"));

    return obj;
}

qint64
SWGForwardLog::getEndDate() {
    return end_date;
}
void
SWGForwardLog::setEndDate(qint64 end_date) {
    this->end_date = end_date;
}

QString*
SWGForwardLog::getErrorMsg() {
    return error_msg;
}
void
SWGForwardLog::setErrorMsg(QString* error_msg) {
    this->error_msg = error_msg;
}

qint32
SWGForwardLog::getHttpStatusCode() {
    return http_status_code;
}
void
SWGForwardLog::setHttpStatusCode(qint32 http_status_code) {
    this->http_status_code = http_status_code;
}

QString*
SWGForwardLog::getId() {
    return id;
}
void
SWGForwardLog::setId(QString* id) {
    this->id = id;
}

SWGObject*
SWGForwardLog::getPayload() {
    return payload;
}
void
SWGForwardLog::setPayload(SWGObject* payload) {
    this->payload = payload;
}

QString*
SWGForwardLog::getResponse() {
    return response;
}
void
SWGForwardLog::setResponse(QString* response) {
    this->response = response;
}

qint32
SWGForwardLog::getRetryCount() {
    return retry_count;
}
void
SWGForwardLog::setRetryCount(qint32 retry_count) {
    this->retry_count = retry_count;
}

qint64
SWGForwardLog::getStartDate() {
    return start_date;
}
void
SWGForwardLog::setStartDate(qint64 start_date) {
    this->start_date = start_date;
}

QString*
SWGForwardLog::getUrl() {
    return url;
}
void
SWGForwardLog::setUrl(QString* url) {
    this->url = url;
}



} /* namespace Swagger */

