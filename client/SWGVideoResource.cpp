/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVideoResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGVideoResource::SWGVideoResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVideoResource::SWGVideoResource() {
    init();
}

SWGVideoResource::~SWGVideoResource() {
    this->cleanup();
}

void
SWGVideoResource::init() {
    active = false;
    author = new SWGSimpleReferenceResource«long»();
    authored = 0L;
    banned = false;
    category = new SWGSimpleReferenceResource«string»();
    comments = new QList<SWGCommentResource*>();
    contributors = new QList<SWGContributionResource*>();
    created_date = 0L;
    embed = new QString("");
    extension = new QString("");
    height = 0;
    id = 0L;
    length = 0;
    location = new QString("");
    long_description = new QString("");
    mime_type = new QString("");
    name = new QString("");
    priority = 0;
    privacy = new QString("");
    published = false;
    short_description = new QString("");
    size = 0L;
    tags = new QList<QString*>();
    thumbnail = new QString("");
    updated_date = 0L;
    uploader = new SWGSimpleUserResource();
    views = 0L;
    width = 0;
}

void
SWGVideoResource::cleanup() {
    

    if(author != nullptr) {
        delete author;
    }



    if(category != nullptr) {
        delete category;
    }

    if(comments != nullptr) {
        QList<SWGCommentResource*>* arr = comments;
        foreach(SWGCommentResource* o, *arr) {
            delete o;
        }
        delete comments;
    }

    if(contributors != nullptr) {
        QList<SWGContributionResource*>* arr = contributors;
        foreach(SWGContributionResource* o, *arr) {
            delete o;
        }
        delete contributors;
    }


    if(embed != nullptr) {
        delete embed;
    }

    if(extension != nullptr) {
        delete extension;
    }




    if(location != nullptr) {
        delete location;
    }

    if(long_description != nullptr) {
        delete long_description;
    }

    if(mime_type != nullptr) {
        delete mime_type;
    }

    if(name != nullptr) {
        delete name;
    }


    if(privacy != nullptr) {
        delete privacy;
    }


    if(short_description != nullptr) {
        delete short_description;
    }


    if(tags != nullptr) {
        QList<QString*>* arr = tags;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(thumbnail != nullptr) {
        delete thumbnail;
    }


    if(uploader != nullptr) {
        delete uploader;
    }


}

SWGVideoResource*
SWGVideoResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVideoResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&active, pJson["active"], "bool", "");
    ::Swagger::setValue(&author, pJson["author"], "SWGSimpleReferenceResource«long»", "SWGSimpleReferenceResource«long»");
    ::Swagger::setValue(&authored, pJson["authored"], "qint64", "");
    ::Swagger::setValue(&banned, pJson["banned"], "bool", "");
    ::Swagger::setValue(&category, pJson["category"], "SWGSimpleReferenceResource«string»", "SWGSimpleReferenceResource«string»");
    
    ::Swagger::setValue(&comments, pJson["comments"], "QList", "SWGCommentResource");
    
    
    ::Swagger::setValue(&contributors, pJson["contributors"], "QList", "SWGContributionResource");
    
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&embed, pJson["embed"], "QString", "QString");
    ::Swagger::setValue(&extension, pJson["extension"], "QString", "QString");
    ::Swagger::setValue(&height, pJson["height"], "qint32", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&length, pJson["length"], "qint32", "");
    ::Swagger::setValue(&location, pJson["location"], "QString", "QString");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&mime_type, pJson["mime_type"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&priority, pJson["priority"], "qint32", "");
    ::Swagger::setValue(&privacy, pJson["privacy"], "QString", "QString");
    ::Swagger::setValue(&published, pJson["published"], "bool", "");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&size, pJson["size"], "qint64", "");
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "QString");
    
    ::Swagger::setValue(&thumbnail, pJson["thumbnail"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
    ::Swagger::setValue(&uploader, pJson["uploader"], "SWGSimpleUserResource", "SWGSimpleUserResource");
    ::Swagger::setValue(&views, pJson["views"], "qint64", "");
    ::Swagger::setValue(&width, pJson["width"], "qint32", "");
}

QString
SWGVideoResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVideoResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("active", QJsonValue(active));

    toJsonValue(QString("author"), author, obj, QString("SWGSimpleReferenceResource«long»"));

    obj->insert("authored", QJsonValue(authored));

    obj->insert("banned", QJsonValue(banned));

    toJsonValue(QString("category"), category, obj, QString("SWGSimpleReferenceResource«string»"));

    QJsonArray commentsJsonArray;
    toJsonArray((QList<void*>*)comments, &commentsJsonArray, "comments", "SWGCommentResource");
    obj->insert("comments", commentsJsonArray);

    QJsonArray contributorsJsonArray;
    toJsonArray((QList<void*>*)contributors, &contributorsJsonArray, "contributors", "SWGContributionResource");
    obj->insert("contributors", contributorsJsonArray);

    obj->insert("created_date", QJsonValue(created_date));

    toJsonValue(QString("embed"), embed, obj, QString("QString"));

    toJsonValue(QString("extension"), extension, obj, QString("QString"));

    obj->insert("height", QJsonValue(height));

    obj->insert("id", QJsonValue(id));

    obj->insert("length", QJsonValue(length));

    toJsonValue(QString("location"), location, obj, QString("QString"));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("mime_type"), mime_type, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("priority", QJsonValue(priority));

    toJsonValue(QString("privacy"), privacy, obj, QString("QString"));

    obj->insert("published", QJsonValue(published));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    obj->insert("size", QJsonValue(size));

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "QString");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("thumbnail"), thumbnail, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    toJsonValue(QString("uploader"), uploader, obj, QString("SWGSimpleUserResource"));

    obj->insert("views", QJsonValue(views));

    obj->insert("width", QJsonValue(width));

    return obj;
}

bool
SWGVideoResource::getActive() {
    return active;
}
void
SWGVideoResource::setActive(bool active) {
    this->active = active;
}

SWGSimpleReferenceResource«long»*
SWGVideoResource::getAuthor() {
    return author;
}
void
SWGVideoResource::setAuthor(SWGSimpleReferenceResource«long»* author) {
    this->author = author;
}

qint64
SWGVideoResource::getAuthored() {
    return authored;
}
void
SWGVideoResource::setAuthored(qint64 authored) {
    this->authored = authored;
}

bool
SWGVideoResource::getBanned() {
    return banned;
}
void
SWGVideoResource::setBanned(bool banned) {
    this->banned = banned;
}

SWGSimpleReferenceResource«string»*
SWGVideoResource::getCategory() {
    return category;
}
void
SWGVideoResource::setCategory(SWGSimpleReferenceResource«string»* category) {
    this->category = category;
}

QList<SWGCommentResource*>*
SWGVideoResource::getComments() {
    return comments;
}
void
SWGVideoResource::setComments(QList<SWGCommentResource*>* comments) {
    this->comments = comments;
}

QList<SWGContributionResource*>*
SWGVideoResource::getContributors() {
    return contributors;
}
void
SWGVideoResource::setContributors(QList<SWGContributionResource*>* contributors) {
    this->contributors = contributors;
}

qint64
SWGVideoResource::getCreatedDate() {
    return created_date;
}
void
SWGVideoResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QString*
SWGVideoResource::getEmbed() {
    return embed;
}
void
SWGVideoResource::setEmbed(QString* embed) {
    this->embed = embed;
}

QString*
SWGVideoResource::getExtension() {
    return extension;
}
void
SWGVideoResource::setExtension(QString* extension) {
    this->extension = extension;
}

qint32
SWGVideoResource::getHeight() {
    return height;
}
void
SWGVideoResource::setHeight(qint32 height) {
    this->height = height;
}

qint64
SWGVideoResource::getId() {
    return id;
}
void
SWGVideoResource::setId(qint64 id) {
    this->id = id;
}

qint32
SWGVideoResource::getLength() {
    return length;
}
void
SWGVideoResource::setLength(qint32 length) {
    this->length = length;
}

QString*
SWGVideoResource::getLocation() {
    return location;
}
void
SWGVideoResource::setLocation(QString* location) {
    this->location = location;
}

QString*
SWGVideoResource::getLongDescription() {
    return long_description;
}
void
SWGVideoResource::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGVideoResource::getMimeType() {
    return mime_type;
}
void
SWGVideoResource::setMimeType(QString* mime_type) {
    this->mime_type = mime_type;
}

QString*
SWGVideoResource::getName() {
    return name;
}
void
SWGVideoResource::setName(QString* name) {
    this->name = name;
}

qint32
SWGVideoResource::getPriority() {
    return priority;
}
void
SWGVideoResource::setPriority(qint32 priority) {
    this->priority = priority;
}

QString*
SWGVideoResource::getPrivacy() {
    return privacy;
}
void
SWGVideoResource::setPrivacy(QString* privacy) {
    this->privacy = privacy;
}

bool
SWGVideoResource::getPublished() {
    return published;
}
void
SWGVideoResource::setPublished(bool published) {
    this->published = published;
}

QString*
SWGVideoResource::getShortDescription() {
    return short_description;
}
void
SWGVideoResource::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

qint64
SWGVideoResource::getSize() {
    return size;
}
void
SWGVideoResource::setSize(qint64 size) {
    this->size = size;
}

QList<QString*>*
SWGVideoResource::getTags() {
    return tags;
}
void
SWGVideoResource::setTags(QList<QString*>* tags) {
    this->tags = tags;
}

QString*
SWGVideoResource::getThumbnail() {
    return thumbnail;
}
void
SWGVideoResource::setThumbnail(QString* thumbnail) {
    this->thumbnail = thumbnail;
}

qint64
SWGVideoResource::getUpdatedDate() {
    return updated_date;
}
void
SWGVideoResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}

SWGSimpleUserResource*
SWGVideoResource::getUploader() {
    return uploader;
}
void
SWGVideoResource::setUploader(SWGSimpleUserResource* uploader) {
    this->uploader = uploader;
}

qint64
SWGVideoResource::getViews() {
    return views;
}
void
SWGVideoResource::setViews(qint64 views) {
    this->views = views;
}

qint32
SWGVideoResource::getWidth() {
    return width;
}
void
SWGVideoResource::setWidth(qint32 width) {
    this->width = width;
}



} /* namespace Swagger */

