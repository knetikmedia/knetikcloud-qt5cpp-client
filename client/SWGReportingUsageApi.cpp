/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGReportingUsageApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGReportingUsageApi::SWGReportingUsageApi() {}

SWGReportingUsageApi::~SWGReportingUsageApi() {}

SWGReportingUsageApi::SWGReportingUsageApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGReportingUsageApi::getUsageByDay(qint64 start_date, qint64 end_date, bool combine_endpoints, QString* method, QString* url, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/day");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combine_endpoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_endpoints)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("method"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(method)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(url)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageByDayCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageByDayCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UsageInfo»* output = static_cast<SWGPageResource«UsageInfo»*>(create(json, QString("SWGPageResource«UsageInfo»")));
    

    worker->deleteLater();

    emit getUsageByDaySignal(output);
    
}
void
SWGReportingUsageApi::getUsageByHour(qint64 start_date, qint64 end_date, bool combine_endpoints, QString* method, QString* url, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/hour");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combine_endpoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_endpoints)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("method"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(method)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(url)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageByHourCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageByHourCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UsageInfo»* output = static_cast<SWGPageResource«UsageInfo»*>(create(json, QString("SWGPageResource«UsageInfo»")));
    

    worker->deleteLater();

    emit getUsageByHourSignal(output);
    
}
void
SWGReportingUsageApi::getUsageByMinute(qint64 start_date, qint64 end_date, bool combine_endpoints, QString* method, QString* url, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/minute");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combine_endpoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_endpoints)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("method"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(method)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(url)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageByMinuteCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageByMinuteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UsageInfo»* output = static_cast<SWGPageResource«UsageInfo»*>(create(json, QString("SWGPageResource«UsageInfo»")));
    

    worker->deleteLater();

    emit getUsageByMinuteSignal(output);
    
}
void
SWGReportingUsageApi::getUsageByMonth(qint64 start_date, qint64 end_date, bool combine_endpoints, QString* method, QString* url, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/month");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combine_endpoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_endpoints)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("method"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(method)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(url)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageByMonthCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageByMonthCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UsageInfo»* output = static_cast<SWGPageResource«UsageInfo»*>(create(json, QString("SWGPageResource«UsageInfo»")));
    

    worker->deleteLater();

    emit getUsageByMonthSignal(output);
    
}
void
SWGReportingUsageApi::getUsageByYear(qint64 start_date, qint64 end_date, bool combine_endpoints, QString* method, QString* url, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/year");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combine_endpoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_endpoints)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("method"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(method)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("url"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(url)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageByYearCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageByYearCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«UsageInfo»* output = static_cast<SWGPageResource«UsageInfo»*>(create(json, QString("SWGPageResource«UsageInfo»")));
    

    worker->deleteLater();

    emit getUsageByYearSignal(output);
    
}
void
SWGReportingUsageApi::getUsageEndpoints(qint64 start_date, qint64 end_date) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reporting/usage/endpoints");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start_date)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("end_date"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(end_date)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGReportingUsageApi::getUsageEndpointsCallback);

    worker->execute(&input);
}

void
SWGReportingUsageApi::getUsageEndpointsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    

    worker->deleteLater();

    emit getUsageEndpointsSignal(output);
    
}
} /* namespace Swagger */
