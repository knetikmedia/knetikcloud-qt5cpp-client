/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGTaxesApi_H_
#define _SWG_SWGTaxesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCountryTaxResource.h"
#include "SWGPageResource«CountryTaxResource».h"
#include "SWGPageResource«StateTaxResource».h"
#include "SWGResult.h"
#include "SWGStateTaxResource.h"

#include <QObject>

namespace Swagger {

class SWGTaxesApi: public QObject {
    Q_OBJECT

public:
    SWGTaxesApi();
    SWGTaxesApi(QString host, QString basePath);
    ~SWGTaxesApi();

    QString host;
    QString basePath;

    void createCountryTax(SWGCountryTaxResource tax_resource);
    void createStateTax(QString* country_code_iso3, SWGStateTaxResource tax_resource);
    void deleteCountryTax(QString* country_code_iso3);
    void deleteStateTax(QString* country_code_iso3, QString* state_code);
    void getCountryTax(QString* country_code_iso3);
    void getCountryTaxes(qint32 size, qint32 page, QString* order);
    void getStateTax(QString* country_code_iso3, QString* state_code);
    void getStateTaxesForCountries(qint32 size, qint32 page, QString* order);
    void getStateTaxesForCountry(QString* country_code_iso3, qint32 size, qint32 page, QString* order);
    void updateCountryTax(QString* country_code_iso3, SWGCountryTaxResource tax_resource);
    void updateStateTax(QString* country_code_iso3, QString* state_code, SWGStateTaxResource tax_resource);
    
private:
    void createCountryTaxCallback (HttpRequestWorker * worker);
    void createStateTaxCallback (HttpRequestWorker * worker);
    void deleteCountryTaxCallback (HttpRequestWorker * worker);
    void deleteStateTaxCallback (HttpRequestWorker * worker);
    void getCountryTaxCallback (HttpRequestWorker * worker);
    void getCountryTaxesCallback (HttpRequestWorker * worker);
    void getStateTaxCallback (HttpRequestWorker * worker);
    void getStateTaxesForCountriesCallback (HttpRequestWorker * worker);
    void getStateTaxesForCountryCallback (HttpRequestWorker * worker);
    void updateCountryTaxCallback (HttpRequestWorker * worker);
    void updateStateTaxCallback (HttpRequestWorker * worker);
    
signals:
    void createCountryTaxSignal(SWGCountryTaxResource* summary);
    void createStateTaxSignal(SWGStateTaxResource* summary);
    void deleteCountryTaxSignal();
    void deleteStateTaxSignal();
    void getCountryTaxSignal(SWGCountryTaxResource* summary);
    void getCountryTaxesSignal(SWGPageResource«CountryTaxResource»* summary);
    void getStateTaxSignal(SWGStateTaxResource* summary);
    void getStateTaxesForCountriesSignal(SWGPageResource«StateTaxResource»* summary);
    void getStateTaxesForCountrySignal(SWGPageResource«StateTaxResource»* summary);
    void updateCountryTaxSignal(SWGCountryTaxResource* summary);
    void updateStateTaxSignal(SWGStateTaxResource* summary);
    
};
}
#endif
