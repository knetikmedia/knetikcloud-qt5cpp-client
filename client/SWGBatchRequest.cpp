/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBatchRequest.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBatchRequest::SWGBatchRequest(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBatchRequest::SWGBatchRequest() {
    init();
}

SWGBatchRequest::~SWGBatchRequest() {
    this->cleanup();
}

void
SWGBatchRequest::init() {
    body = NULL;
    content_type = new QString("");
    method = new QString("");
    timeout = 0;
    token = new QString("");
    uri = new QString("");
}

void
SWGBatchRequest::cleanup() {
    
    if(body != nullptr) {
        delete body;
    }

    if(content_type != nullptr) {
        delete content_type;
    }

    if(method != nullptr) {
        delete method;
    }


    if(token != nullptr) {
        delete token;
    }

    if(uri != nullptr) {
        delete uri;
    }
}

SWGBatchRequest*
SWGBatchRequest::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBatchRequest::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&body, pJson["body"], "SWGObject", "SWGObject");
    ::Swagger::setValue(&content_type, pJson["content_type"], "QString", "QString");
    ::Swagger::setValue(&method, pJson["method"], "QString", "QString");
    ::Swagger::setValue(&timeout, pJson["timeout"], "qint32", "");
    ::Swagger::setValue(&token, pJson["token"], "QString", "QString");
    ::Swagger::setValue(&uri, pJson["uri"], "QString", "QString");
}

QString
SWGBatchRequest::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBatchRequest::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("body"), body, obj, QString("SWGObject"));

    toJsonValue(QString("content_type"), content_type, obj, QString("QString"));

    toJsonValue(QString("method"), method, obj, QString("QString"));

    obj->insert("timeout", QJsonValue(timeout));

    toJsonValue(QString("token"), token, obj, QString("QString"));

    toJsonValue(QString("uri"), uri, obj, QString("QString"));

    return obj;
}

SWGObject*
SWGBatchRequest::getBody() {
    return body;
}
void
SWGBatchRequest::setBody(SWGObject* body) {
    this->body = body;
}

QString*
SWGBatchRequest::getContentType() {
    return content_type;
}
void
SWGBatchRequest::setContentType(QString* content_type) {
    this->content_type = content_type;
}

QString*
SWGBatchRequest::getMethod() {
    return method;
}
void
SWGBatchRequest::setMethod(QString* method) {
    this->method = method;
}

qint32
SWGBatchRequest::getTimeout() {
    return timeout;
}
void
SWGBatchRequest::setTimeout(qint32 timeout) {
    this->timeout = timeout;
}

QString*
SWGBatchRequest::getToken() {
    return token;
}
void
SWGBatchRequest::setToken(QString* token) {
    this->token = token;
}

QString*
SWGBatchRequest::getUri() {
    return uri;
}
void
SWGBatchRequest::setUri(QString* uri) {
    this->uri = uri;
}



} /* namespace Swagger */

