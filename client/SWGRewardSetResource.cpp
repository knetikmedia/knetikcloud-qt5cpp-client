/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGRewardSetResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGRewardSetResource::SWGRewardSetResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGRewardSetResource::SWGRewardSetResource() {
    init();
}

SWGRewardSetResource::~SWGRewardSetResource() {
    this->cleanup();
}

void
SWGRewardSetResource::init() {
    created_date = 0L;
    currency_rewards = new QList<SWGRewardCurrencyResource*>();
    id = 0;
    item_rewards = new QList<SWGRewardItemResource*>();
    long_description = new QString("");
    max_placing = 0;
    name = new QString("");
    short_description = new QString("");
    unique_key = new QString("");
    updated_date = 0L;
}

void
SWGRewardSetResource::cleanup() {
    

    if(currency_rewards != nullptr) {
        QList<SWGRewardCurrencyResource*>* arr = currency_rewards;
        foreach(SWGRewardCurrencyResource* o, *arr) {
            delete o;
        }
        delete currency_rewards;
    }


    if(item_rewards != nullptr) {
        QList<SWGRewardItemResource*>* arr = item_rewards;
        foreach(SWGRewardItemResource* o, *arr) {
            delete o;
        }
        delete item_rewards;
    }

    if(long_description != nullptr) {
        delete long_description;
    }


    if(name != nullptr) {
        delete name;
    }

    if(short_description != nullptr) {
        delete short_description;
    }

    if(unique_key != nullptr) {
        delete unique_key;
    }

}

SWGRewardSetResource*
SWGRewardSetResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGRewardSetResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    
    ::Swagger::setValue(&currency_rewards, pJson["currency_rewards"], "QList", "SWGRewardCurrencyResource");
    
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    
    ::Swagger::setValue(&item_rewards, pJson["item_rewards"], "QList", "SWGRewardItemResource");
    
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&max_placing, pJson["max_placing"], "qint32", "");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&unique_key, pJson["unique_key"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGRewardSetResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGRewardSetResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("created_date", QJsonValue(created_date));

    QJsonArray currency_rewardsJsonArray;
    toJsonArray((QList<void*>*)currency_rewards, &currency_rewardsJsonArray, "currency_rewards", "SWGRewardCurrencyResource");
    obj->insert("currency_rewards", currency_rewardsJsonArray);

    obj->insert("id", QJsonValue(id));

    QJsonArray item_rewardsJsonArray;
    toJsonArray((QList<void*>*)item_rewards, &item_rewardsJsonArray, "item_rewards", "SWGRewardItemResource");
    obj->insert("item_rewards", item_rewardsJsonArray);

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    obj->insert("max_placing", QJsonValue(max_placing));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    toJsonValue(QString("unique_key"), unique_key, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

qint64
SWGRewardSetResource::getCreatedDate() {
    return created_date;
}
void
SWGRewardSetResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QList<SWGRewardCurrencyResource*>*
SWGRewardSetResource::getCurrencyRewards() {
    return currency_rewards;
}
void
SWGRewardSetResource::setCurrencyRewards(QList<SWGRewardCurrencyResource*>* currency_rewards) {
    this->currency_rewards = currency_rewards;
}

qint32
SWGRewardSetResource::getId() {
    return id;
}
void
SWGRewardSetResource::setId(qint32 id) {
    this->id = id;
}

QList<SWGRewardItemResource*>*
SWGRewardSetResource::getItemRewards() {
    return item_rewards;
}
void
SWGRewardSetResource::setItemRewards(QList<SWGRewardItemResource*>* item_rewards) {
    this->item_rewards = item_rewards;
}

QString*
SWGRewardSetResource::getLongDescription() {
    return long_description;
}
void
SWGRewardSetResource::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

qint32
SWGRewardSetResource::getMaxPlacing() {
    return max_placing;
}
void
SWGRewardSetResource::setMaxPlacing(qint32 max_placing) {
    this->max_placing = max_placing;
}

QString*
SWGRewardSetResource::getName() {
    return name;
}
void
SWGRewardSetResource::setName(QString* name) {
    this->name = name;
}

QString*
SWGRewardSetResource::getShortDescription() {
    return short_description;
}
void
SWGRewardSetResource::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

QString*
SWGRewardSetResource::getUniqueKey() {
    return unique_key;
}
void
SWGRewardSetResource::setUniqueKey(QString* unique_key) {
    this->unique_key = unique_key;
}

qint64
SWGRewardSetResource::getUpdatedDate() {
    return updated_date;
}
void
SWGRewardSetResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

