/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGBRERuleEngineGlobalsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGBRERuleEngineGlobalsApi::SWGBRERuleEngineGlobalsApi() {}

SWGBRERuleEngineGlobalsApi::~SWGBRERuleEngineGlobalsApi() {}

SWGBRERuleEngineGlobalsApi::SWGBRERuleEngineGlobalsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGBRERuleEngineGlobalsApi::createBREGlobal(SWGBreGlobalResource bre_global_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/globals/definitions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = bre_global_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineGlobalsApi::createBREGlobalCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineGlobalsApi::createBREGlobalCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreGlobalResource* output = static_cast<SWGBreGlobalResource*>(create(json, QString("SWGBreGlobalResource")));
    

    worker->deleteLater();

    emit createBREGlobalSignal(output);
    
}
void
SWGBRERuleEngineGlobalsApi::deleteBREGlobal(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/globals/definitions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineGlobalsApi::deleteBREGlobalCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineGlobalsApi::deleteBREGlobalCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteBREGlobalSignal();
}
void
SWGBRERuleEngineGlobalsApi::getBREGlobal(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/globals/definitions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineGlobalsApi::getBREGlobalCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineGlobalsApi::getBREGlobalCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreGlobalResource* output = static_cast<SWGBreGlobalResource*>(create(json, QString("SWGBreGlobalResource")));
    

    worker->deleteLater();

    emit getBREGlobalSignal(output);
    
}
void
SWGBRERuleEngineGlobalsApi::getBREGlobals(bool filter_system, qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/globals/definitions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_system"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_system)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineGlobalsApi::getBREGlobalsCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineGlobalsApi::getBREGlobalsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BreGlobalResource»* output = static_cast<SWGPageResource«BreGlobalResource»*>(create(json, QString("SWGPageResource«BreGlobalResource»")));
    

    worker->deleteLater();

    emit getBREGlobalsSignal(output);
    
}
void
SWGBRERuleEngineGlobalsApi::updateBREGlobal(QString* id, SWGBreGlobalResource bre_global_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/globals/definitions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = bre_global_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineGlobalsApi::updateBREGlobalCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineGlobalsApi::updateBREGlobalCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreGlobalResource* output = static_cast<SWGBreGlobalResource*>(create(json, QString("SWGBreGlobalResource")));
    

    worker->deleteLater();

    emit updateBREGlobalSignal(output);
    
}
} /* namespace Swagger */
