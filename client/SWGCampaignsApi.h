/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGCampaignsApi_H_
#define _SWG_SWGCampaignsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGCampaignResource.h"
#include "SWGPageResource«CampaignResource».h"
#include "SWGPageResource«ChallengeResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGCampaignsApi: public QObject {
    Q_OBJECT

public:
    SWGCampaignsApi();
    SWGCampaignsApi(QString host, QString basePath);
    ~SWGCampaignsApi();

    QString host;
    QString basePath;

    void addChallengeToCampaign(qint64 id, qint64 challenge_id);
    void createCampaign(SWGCampaignResource campaign_resource);
    void createCampaignTemplate(SWGTemplateResource campaign_template_resource);
    void deleteCampaign(qint64 id);
    void deleteCampaignTemplate(QString* id, QString* cascade);
    void getCampaign(qint64 id);
    void getCampaignChallenges(qint64 id);
    void getCampaignTemplate(QString* id);
    void getCampaignTemplates(qint32 size, qint32 page, QString* order);
    void getCampaigns(bool filter_active, qint32 size, qint32 page, QString* order);
    void removeChallengeFromCampaign(qint64 campaign_id, qint64 id);
    void updateCampaign(qint64 id, SWGCampaignResource campaign_resource);
    void updateCampaignTemplate(QString* id, SWGTemplateResource campaign_template_resource);
    
private:
    void addChallengeToCampaignCallback (HttpRequestWorker * worker);
    void createCampaignCallback (HttpRequestWorker * worker);
    void createCampaignTemplateCallback (HttpRequestWorker * worker);
    void deleteCampaignCallback (HttpRequestWorker * worker);
    void deleteCampaignTemplateCallback (HttpRequestWorker * worker);
    void getCampaignCallback (HttpRequestWorker * worker);
    void getCampaignChallengesCallback (HttpRequestWorker * worker);
    void getCampaignTemplateCallback (HttpRequestWorker * worker);
    void getCampaignTemplatesCallback (HttpRequestWorker * worker);
    void getCampaignsCallback (HttpRequestWorker * worker);
    void removeChallengeFromCampaignCallback (HttpRequestWorker * worker);
    void updateCampaignCallback (HttpRequestWorker * worker);
    void updateCampaignTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void addChallengeToCampaignSignal();
    void createCampaignSignal(SWGCampaignResource* summary);
    void createCampaignTemplateSignal(SWGTemplateResource* summary);
    void deleteCampaignSignal();
    void deleteCampaignTemplateSignal();
    void getCampaignSignal(SWGCampaignResource* summary);
    void getCampaignChallengesSignal(SWGPageResource«ChallengeResource»* summary);
    void getCampaignTemplateSignal(SWGTemplateResource* summary);
    void getCampaignTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getCampaignsSignal(SWGPageResource«CampaignResource»* summary);
    void removeChallengeFromCampaignSignal();
    void updateCampaignSignal(SWGCampaignResource* summary);
    void updateCampaignTemplateSignal(SWGTemplateResource* summary);
    
};
}
#endif
