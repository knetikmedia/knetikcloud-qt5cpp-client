/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGOAuth2Resource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGOAuth2Resource::SWGOAuth2Resource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGOAuth2Resource::SWGOAuth2Resource() {
    init();
}

SWGOAuth2Resource::~SWGOAuth2Resource() {
    this->cleanup();
}

void
SWGOAuth2Resource::init() {
    access_token = new QString("");
    expires_in = new QString("");
    scope = new QString("");
    token_type = new QString("");
}

void
SWGOAuth2Resource::cleanup() {
    
    if(access_token != nullptr) {
        delete access_token;
    }

    if(expires_in != nullptr) {
        delete expires_in;
    }

    if(scope != nullptr) {
        delete scope;
    }

    if(token_type != nullptr) {
        delete token_type;
    }
}

SWGOAuth2Resource*
SWGOAuth2Resource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGOAuth2Resource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&access_token, pJson["access_token"], "QString", "QString");
    ::Swagger::setValue(&expires_in, pJson["expires_in"], "QString", "QString");
    ::Swagger::setValue(&scope, pJson["scope"], "QString", "QString");
    ::Swagger::setValue(&token_type, pJson["token_type"], "QString", "QString");
}

QString
SWGOAuth2Resource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGOAuth2Resource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("access_token"), access_token, obj, QString("QString"));

    toJsonValue(QString("expires_in"), expires_in, obj, QString("QString"));

    toJsonValue(QString("scope"), scope, obj, QString("QString"));

    toJsonValue(QString("token_type"), token_type, obj, QString("QString"));

    return obj;
}

QString*
SWGOAuth2Resource::getAccessToken() {
    return access_token;
}
void
SWGOAuth2Resource::setAccessToken(QString* access_token) {
    this->access_token = access_token;
}

QString*
SWGOAuth2Resource::getExpiresIn() {
    return expires_in;
}
void
SWGOAuth2Resource::setExpiresIn(QString* expires_in) {
    this->expires_in = expires_in;
}

QString*
SWGOAuth2Resource::getScope() {
    return scope;
}
void
SWGOAuth2Resource::setScope(QString* scope) {
    this->scope = scope;
}

QString*
SWGOAuth2Resource::getTokenType() {
    return token_type;
}
void
SWGOAuth2Resource::setTokenType(QString* token_type) {
    this->token_type = token_type;
}



} /* namespace Swagger */

