/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGGamificationAchievementsApi_H_
#define _SWG_SWGGamificationAchievementsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGAchievementDefinitionResource.h"
#include "SWGAchievementProgressUpdateRequest.h"
#include "SWGBreTriggerResource.h"
#include "SWGPageResource«AchievementDefinitionResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGPageResource«UserAchievementGroupResource».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"
#include "SWGUserAchievementGroupResource.h"

#include <QObject>

namespace Swagger {

class SWGGamificationAchievementsApi: public QObject {
    Q_OBJECT

public:
    SWGGamificationAchievementsApi();
    SWGGamificationAchievementsApi(QString host, QString basePath);
    ~SWGGamificationAchievementsApi();

    QString host;
    QString basePath;

    void createAchievement(SWGAchievementDefinitionResource achievement);
    void createAchievementTemplate(SWGTemplateResource template);
    void deleteAchievement(QString* name);
    void deleteAchievementTemplate(QString* id, QString* cascade);
    void getAchievement(QString* name);
    void getAchievementTemplate(QString* id);
    void getAchievementTemplates(qint32 size, qint32 page, QString* order);
    void getAchievementTriggers();
    void getAchievements(QString* filter_tagset, QString* filter_name, bool filter_hidden, bool filter_derived, qint32 size, qint32 page, QString* order);
    void getDerivedAchievements(QString* name);
    void getUserAchievementProgress(qint32 user_id, QString* achievement_name);
    void getUserAchievementsProgress(qint32 user_id, bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page);
    void getUsersAchievementProgress(QString* achievement_name, bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page);
    void getUsersAchievementsProgress(bool filter_achievement_derived, QString* filter_achievement_tagset, QString* filter_achievement_name, qint32 size, qint32 page);
    void updateAchievement(QString* name, SWGAchievementDefinitionResource achievement);
    void updateAchievementProgress(qint32 user_id, QString* achievement_name, SWGAchievementProgressUpdateRequest request);
    void updateAchievementTemplate(QString* id, SWGTemplateResource template);
    
private:
    void createAchievementCallback (HttpRequestWorker * worker);
    void createAchievementTemplateCallback (HttpRequestWorker * worker);
    void deleteAchievementCallback (HttpRequestWorker * worker);
    void deleteAchievementTemplateCallback (HttpRequestWorker * worker);
    void getAchievementCallback (HttpRequestWorker * worker);
    void getAchievementTemplateCallback (HttpRequestWorker * worker);
    void getAchievementTemplatesCallback (HttpRequestWorker * worker);
    void getAchievementTriggersCallback (HttpRequestWorker * worker);
    void getAchievementsCallback (HttpRequestWorker * worker);
    void getDerivedAchievementsCallback (HttpRequestWorker * worker);
    void getUserAchievementProgressCallback (HttpRequestWorker * worker);
    void getUserAchievementsProgressCallback (HttpRequestWorker * worker);
    void getUsersAchievementProgressCallback (HttpRequestWorker * worker);
    void getUsersAchievementsProgressCallback (HttpRequestWorker * worker);
    void updateAchievementCallback (HttpRequestWorker * worker);
    void updateAchievementProgressCallback (HttpRequestWorker * worker);
    void updateAchievementTemplateCallback (HttpRequestWorker * worker);
    
signals:
    void createAchievementSignal(SWGAchievementDefinitionResource* summary);
    void createAchievementTemplateSignal(SWGTemplateResource* summary);
    void deleteAchievementSignal();
    void deleteAchievementTemplateSignal();
    void getAchievementSignal(SWGAchievementDefinitionResource* summary);
    void getAchievementTemplateSignal(SWGTemplateResource* summary);
    void getAchievementTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getAchievementTriggersSignal(QList<SWGBreTriggerResource*>* summary);
    void getAchievementsSignal(SWGPageResource«AchievementDefinitionResource»* summary);
    void getDerivedAchievementsSignal(QList<SWGAchievementDefinitionResource*>* summary);
    void getUserAchievementProgressSignal(SWGUserAchievementGroupResource* summary);
    void getUserAchievementsProgressSignal(SWGPageResource«UserAchievementGroupResource»* summary);
    void getUsersAchievementProgressSignal(SWGPageResource«UserAchievementGroupResource»* summary);
    void getUsersAchievementsProgressSignal(SWGPageResource«UserAchievementGroupResource»* summary);
    void updateAchievementSignal(SWGAchievementDefinitionResource* summary);
    void updateAchievementProgressSignal(SWGUserAchievementGroupResource* summary);
    void updateAchievementTemplateSignal(SWGTemplateResource* summary);
    
};
}
#endif
