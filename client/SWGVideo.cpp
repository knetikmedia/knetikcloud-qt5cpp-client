/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVideo.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGVideo::SWGVideo(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVideo::SWGVideo() {
    init();
}

SWGVideo::~SWGVideo() {
    this->cleanup();
}

void
SWGVideo::init() {
    active = false;
    author = new SWGArtist();
    authored = 0L;
    banned = false;
    category_id = new QString("");
    category_name = new QString("");
    contributors = new SWGCollection«VideoContribution»();
    created = 0L;
    embed = new QString("");
    extension = new QString("");
    height = 0;
    id = 0L;
    length = 0;
    location = new QString("");
    long_description = new QString("");
    mime_type = new QString("");
    name = new QString("");
    priority = 0;
    privacy = new QString("");
    published = false;
    short_description = new QString("");
    size = 0L;
    tags = new QList<SWGVideoTag*>();
    thumbnail = new QString("");
    updated = 0L;
    uploader = new SWGUser();
    views = 0L;
    whitelist = new QList<SWGUser*>();
    width = 0;
}

void
SWGVideo::cleanup() {
    

    if(author != nullptr) {
        delete author;
    }



    if(category_id != nullptr) {
        delete category_id;
    }

    if(category_name != nullptr) {
        delete category_name;
    }

    if(contributors != nullptr) {
        delete contributors;
    }


    if(embed != nullptr) {
        delete embed;
    }

    if(extension != nullptr) {
        delete extension;
    }




    if(location != nullptr) {
        delete location;
    }

    if(long_description != nullptr) {
        delete long_description;
    }

    if(mime_type != nullptr) {
        delete mime_type;
    }

    if(name != nullptr) {
        delete name;
    }


    if(privacy != nullptr) {
        delete privacy;
    }


    if(short_description != nullptr) {
        delete short_description;
    }


    if(tags != nullptr) {
        QList<SWGVideoTag*>* arr = tags;
        foreach(SWGVideoTag* o, *arr) {
            delete o;
        }
        delete tags;
    }

    if(thumbnail != nullptr) {
        delete thumbnail;
    }


    if(uploader != nullptr) {
        delete uploader;
    }


    if(whitelist != nullptr) {
        QList<SWGUser*>* arr = whitelist;
        foreach(SWGUser* o, *arr) {
            delete o;
        }
        delete whitelist;
    }

}

SWGVideo*
SWGVideo::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVideo::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&active, pJson["active"], "bool", "");
    ::Swagger::setValue(&author, pJson["author"], "SWGArtist", "SWGArtist");
    ::Swagger::setValue(&authored, pJson["authored"], "qint64", "");
    ::Swagger::setValue(&banned, pJson["banned"], "bool", "");
    ::Swagger::setValue(&category_id, pJson["category_id"], "QString", "QString");
    ::Swagger::setValue(&category_name, pJson["category_name"], "QString", "QString");
    ::Swagger::setValue(&contributors, pJson["contributors"], "SWGCollection«VideoContribution»", "SWGCollection«VideoContribution»");
    ::Swagger::setValue(&created, pJson["created"], "qint64", "");
    ::Swagger::setValue(&embed, pJson["embed"], "QString", "QString");
    ::Swagger::setValue(&extension, pJson["extension"], "QString", "QString");
    ::Swagger::setValue(&height, pJson["height"], "qint32", "");
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    ::Swagger::setValue(&length, pJson["length"], "qint32", "");
    ::Swagger::setValue(&location, pJson["location"], "QString", "QString");
    ::Swagger::setValue(&long_description, pJson["long_description"], "QString", "QString");
    ::Swagger::setValue(&mime_type, pJson["mime_type"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&priority, pJson["priority"], "qint32", "");
    ::Swagger::setValue(&privacy, pJson["privacy"], "QString", "QString");
    ::Swagger::setValue(&published, pJson["published"], "bool", "");
    ::Swagger::setValue(&short_description, pJson["short_description"], "QString", "QString");
    ::Swagger::setValue(&size, pJson["size"], "qint64", "");
    
    ::Swagger::setValue(&tags, pJson["tags"], "QList", "SWGVideoTag");
    
    ::Swagger::setValue(&thumbnail, pJson["thumbnail"], "QString", "QString");
    ::Swagger::setValue(&updated, pJson["updated"], "qint64", "");
    ::Swagger::setValue(&uploader, pJson["uploader"], "SWGUser", "SWGUser");
    ::Swagger::setValue(&views, pJson["views"], "qint64", "");
    
    ::Swagger::setValue(&whitelist, pJson["whitelist"], "QList", "SWGUser");
    
    ::Swagger::setValue(&width, pJson["width"], "qint32", "");
}

QString
SWGVideo::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVideo::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("active", QJsonValue(active));

    toJsonValue(QString("author"), author, obj, QString("SWGArtist"));

    obj->insert("authored", QJsonValue(authored));

    obj->insert("banned", QJsonValue(banned));

    toJsonValue(QString("category_id"), category_id, obj, QString("QString"));

    toJsonValue(QString("category_name"), category_name, obj, QString("QString"));

    toJsonValue(QString("contributors"), contributors, obj, QString("SWGCollection«VideoContribution»"));

    obj->insert("created", QJsonValue(created));

    toJsonValue(QString("embed"), embed, obj, QString("QString"));

    toJsonValue(QString("extension"), extension, obj, QString("QString"));

    obj->insert("height", QJsonValue(height));

    obj->insert("id", QJsonValue(id));

    obj->insert("length", QJsonValue(length));

    toJsonValue(QString("location"), location, obj, QString("QString"));

    toJsonValue(QString("long_description"), long_description, obj, QString("QString"));

    toJsonValue(QString("mime_type"), mime_type, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("priority", QJsonValue(priority));

    toJsonValue(QString("privacy"), privacy, obj, QString("QString"));

    obj->insert("published", QJsonValue(published));

    toJsonValue(QString("short_description"), short_description, obj, QString("QString"));

    obj->insert("size", QJsonValue(size));

    QJsonArray tagsJsonArray;
    toJsonArray((QList<void*>*)tags, &tagsJsonArray, "tags", "SWGVideoTag");
    obj->insert("tags", tagsJsonArray);

    toJsonValue(QString("thumbnail"), thumbnail, obj, QString("QString"));

    obj->insert("updated", QJsonValue(updated));

    toJsonValue(QString("uploader"), uploader, obj, QString("SWGUser"));

    obj->insert("views", QJsonValue(views));

    QJsonArray whitelistJsonArray;
    toJsonArray((QList<void*>*)whitelist, &whitelistJsonArray, "whitelist", "SWGUser");
    obj->insert("whitelist", whitelistJsonArray);

    obj->insert("width", QJsonValue(width));

    return obj;
}

bool
SWGVideo::getActive() {
    return active;
}
void
SWGVideo::setActive(bool active) {
    this->active = active;
}

SWGArtist*
SWGVideo::getAuthor() {
    return author;
}
void
SWGVideo::setAuthor(SWGArtist* author) {
    this->author = author;
}

qint64
SWGVideo::getAuthored() {
    return authored;
}
void
SWGVideo::setAuthored(qint64 authored) {
    this->authored = authored;
}

bool
SWGVideo::getBanned() {
    return banned;
}
void
SWGVideo::setBanned(bool banned) {
    this->banned = banned;
}

QString*
SWGVideo::getCategoryId() {
    return category_id;
}
void
SWGVideo::setCategoryId(QString* category_id) {
    this->category_id = category_id;
}

QString*
SWGVideo::getCategoryName() {
    return category_name;
}
void
SWGVideo::setCategoryName(QString* category_name) {
    this->category_name = category_name;
}

SWGCollection«VideoContribution»*
SWGVideo::getContributors() {
    return contributors;
}
void
SWGVideo::setContributors(SWGCollection«VideoContribution»* contributors) {
    this->contributors = contributors;
}

qint64
SWGVideo::getCreated() {
    return created;
}
void
SWGVideo::setCreated(qint64 created) {
    this->created = created;
}

QString*
SWGVideo::getEmbed() {
    return embed;
}
void
SWGVideo::setEmbed(QString* embed) {
    this->embed = embed;
}

QString*
SWGVideo::getExtension() {
    return extension;
}
void
SWGVideo::setExtension(QString* extension) {
    this->extension = extension;
}

qint32
SWGVideo::getHeight() {
    return height;
}
void
SWGVideo::setHeight(qint32 height) {
    this->height = height;
}

qint64
SWGVideo::getId() {
    return id;
}
void
SWGVideo::setId(qint64 id) {
    this->id = id;
}

qint32
SWGVideo::getLength() {
    return length;
}
void
SWGVideo::setLength(qint32 length) {
    this->length = length;
}

QString*
SWGVideo::getLocation() {
    return location;
}
void
SWGVideo::setLocation(QString* location) {
    this->location = location;
}

QString*
SWGVideo::getLongDescription() {
    return long_description;
}
void
SWGVideo::setLongDescription(QString* long_description) {
    this->long_description = long_description;
}

QString*
SWGVideo::getMimeType() {
    return mime_type;
}
void
SWGVideo::setMimeType(QString* mime_type) {
    this->mime_type = mime_type;
}

QString*
SWGVideo::getName() {
    return name;
}
void
SWGVideo::setName(QString* name) {
    this->name = name;
}

qint32
SWGVideo::getPriority() {
    return priority;
}
void
SWGVideo::setPriority(qint32 priority) {
    this->priority = priority;
}

QString*
SWGVideo::getPrivacy() {
    return privacy;
}
void
SWGVideo::setPrivacy(QString* privacy) {
    this->privacy = privacy;
}

bool
SWGVideo::getPublished() {
    return published;
}
void
SWGVideo::setPublished(bool published) {
    this->published = published;
}

QString*
SWGVideo::getShortDescription() {
    return short_description;
}
void
SWGVideo::setShortDescription(QString* short_description) {
    this->short_description = short_description;
}

qint64
SWGVideo::getSize() {
    return size;
}
void
SWGVideo::setSize(qint64 size) {
    this->size = size;
}

QList<SWGVideoTag*>*
SWGVideo::getTags() {
    return tags;
}
void
SWGVideo::setTags(QList<SWGVideoTag*>* tags) {
    this->tags = tags;
}

QString*
SWGVideo::getThumbnail() {
    return thumbnail;
}
void
SWGVideo::setThumbnail(QString* thumbnail) {
    this->thumbnail = thumbnail;
}

qint64
SWGVideo::getUpdated() {
    return updated;
}
void
SWGVideo::setUpdated(qint64 updated) {
    this->updated = updated;
}

SWGUser*
SWGVideo::getUploader() {
    return uploader;
}
void
SWGVideo::setUploader(SWGUser* uploader) {
    this->uploader = uploader;
}

qint64
SWGVideo::getViews() {
    return views;
}
void
SWGVideo::setViews(qint64 views) {
    this->views = views;
}

QList<SWGUser*>*
SWGVideo::getWhitelist() {
    return whitelist;
}
void
SWGVideo::setWhitelist(QList<SWGUser*>* whitelist) {
    this->whitelist = whitelist;
}

qint32
SWGVideo::getWidth() {
    return width;
}
void
SWGVideo::setWidth(qint32 width) {
    this->width = width;
}



} /* namespace Swagger */

