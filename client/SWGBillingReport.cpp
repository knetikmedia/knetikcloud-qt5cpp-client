/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBillingReport.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBillingReport::SWGBillingReport(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBillingReport::SWGBillingReport() {
    init();
}

SWGBillingReport::~SWGBillingReport() {
    this->cleanup();
}

void
SWGBillingReport::init() {
    created = 0L;
    id = new QString("");
    last_known_failures = new QList<QString*>();
    statistics = new QMap<QString, qint32>();
}

void
SWGBillingReport::cleanup() {
    

    if(id != nullptr) {
        delete id;
    }

    if(last_known_failures != nullptr) {
        QList<QString*>* arr = last_known_failures;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete last_known_failures;
    }

}

SWGBillingReport*
SWGBillingReport::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBillingReport::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&created, pJson["created"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    
    ::Swagger::setValue(&last_known_failures, pJson["last_known_failures"], "QList", "QString");
    
    
    
    ::Swagger::setValue(&statistics, pJson["statistics"], "QMap", "qint32");
}

QString
SWGBillingReport::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBillingReport::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("created", QJsonValue(created));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    QJsonArray last_known_failuresJsonArray;
    toJsonArray((QList<void*>*)last_known_failures, &last_known_failuresJsonArray, "last_known_failures", "QString");
    obj->insert("last_known_failures", last_known_failuresJsonArray);

    QJsonArray statisticsJsonArray;
    toJsonArray((QList<void*>*)statistics, &statisticsJsonArray, "statistics", "qint32");
    obj->insert("statistics", statisticsJsonArray);

    return obj;
}

qint64
SWGBillingReport::getCreated() {
    return created;
}
void
SWGBillingReport::setCreated(qint64 created) {
    this->created = created;
}

QString*
SWGBillingReport::getId() {
    return id;
}
void
SWGBillingReport::setId(QString* id) {
    this->id = id;
}

QList<QString*>*
SWGBillingReport::getLastKnownFailures() {
    return last_known_failures;
}
void
SWGBillingReport::setLastKnownFailures(QList<QString*>* last_known_failures) {
    this->last_known_failures = last_known_failures;
}

QMap<QString, qint32>*
SWGBillingReport::getStatistics() {
    return statistics;
}
void
SWGBillingReport::setStatistics(QMap<QString, qint32>* statistics) {
    this->statistics = statistics;
}



} /* namespace Swagger */

