/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGUsersGroupsApi_H_
#define _SWG_SWGUsersGroupsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGGroupMemberResource.h"
#include "SWGGroupResource.h"
#include "SWGPageResource«GroupMemberResource».h"
#include "SWGPageResource«GroupResource».h"
#include "SWGPageResource«TemplateResource».h"
#include "SWGResult.h"
#include "SWGTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGUsersGroupsApi: public QObject {
    Q_OBJECT

public:
    SWGUsersGroupsApi();
    SWGUsersGroupsApi(QString host, QString basePath);
    ~SWGUsersGroupsApi();

    QString host;
    QString basePath;

    void addMemberToGroup(QString* unique_name, SWGGroupMemberResource username);
    void createGroup(SWGGroupResource group_resource);
    void createGroupTemplate(SWGTemplateResource group_template_resource);
    void deleteGroup(QString* unique_name);
    void deleteGroupTemplate(QString* id, QString* cascade);
    void getGroup(QString* unique_name);
    void getGroupMember(QString* unique_name, qint32 user_id);
    void getGroupMembers(QString* unique_name, qint32 size, qint32 page, QString* order);
    void getGroupTemplate(QString* id);
    void getGroupTemplates(qint32 size, qint32 page, QString* order);
    void getGroupsForUser(qint32 user_id);
    void removeGroupMember(QString* unique_name, qint32 user_id);
    void updateGroup(QString* unique_name, SWGGroupResource group_resource);
    void updateGroupMemberStatus(QString* unique_name, qint32 user_id, QString* status);
    void updateGroupTemplate(QString* id, SWGTemplateResource group_template_resource);
    void updateGroups(QString* filter_name, QString* filter_unique_name, QString* filter_parent, qint32 size, qint32 page, QString* order);
    
private:
    void addMemberToGroupCallback (HttpRequestWorker * worker);
    void createGroupCallback (HttpRequestWorker * worker);
    void createGroupTemplateCallback (HttpRequestWorker * worker);
    void deleteGroupCallback (HttpRequestWorker * worker);
    void deleteGroupTemplateCallback (HttpRequestWorker * worker);
    void getGroupCallback (HttpRequestWorker * worker);
    void getGroupMemberCallback (HttpRequestWorker * worker);
    void getGroupMembersCallback (HttpRequestWorker * worker);
    void getGroupTemplateCallback (HttpRequestWorker * worker);
    void getGroupTemplatesCallback (HttpRequestWorker * worker);
    void getGroupsForUserCallback (HttpRequestWorker * worker);
    void removeGroupMemberCallback (HttpRequestWorker * worker);
    void updateGroupCallback (HttpRequestWorker * worker);
    void updateGroupMemberStatusCallback (HttpRequestWorker * worker);
    void updateGroupTemplateCallback (HttpRequestWorker * worker);
    void updateGroupsCallback (HttpRequestWorker * worker);
    
signals:
    void addMemberToGroupSignal(SWGGroupMemberResource* summary);
    void createGroupSignal(SWGGroupResource* summary);
    void createGroupTemplateSignal(SWGTemplateResource* summary);
    void deleteGroupSignal();
    void deleteGroupTemplateSignal();
    void getGroupSignal(SWGGroupResource* summary);
    void getGroupMemberSignal(SWGGroupMemberResource* summary);
    void getGroupMembersSignal(SWGPageResource«GroupMemberResource»* summary);
    void getGroupTemplateSignal(SWGTemplateResource* summary);
    void getGroupTemplatesSignal(SWGPageResource«TemplateResource»* summary);
    void getGroupsForUserSignal(QList<QString*>* summary);
    void removeGroupMemberSignal();
    void updateGroupSignal();
    void updateGroupMemberStatusSignal();
    void updateGroupTemplateSignal(SWGTemplateResource* summary);
    void updateGroupsSignal(SWGPageResource«GroupResource»* summary);
    
};
}
#endif
