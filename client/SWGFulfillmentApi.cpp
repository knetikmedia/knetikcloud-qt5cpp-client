/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGFulfillmentApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGFulfillmentApi::SWGFulfillmentApi() {}

SWGFulfillmentApi::~SWGFulfillmentApi() {}

SWGFulfillmentApi::SWGFulfillmentApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGFulfillmentApi::createFulfillmentType(SWGFulfillmentType type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/fulfillment/types");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = type.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFulfillmentApi::createFulfillmentTypeCallback);

    worker->execute(&input);
}

void
SWGFulfillmentApi::createFulfillmentTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGFulfillmentType* output = static_cast<SWGFulfillmentType*>(create(json, QString("SWGFulfillmentType")));
    

    worker->deleteLater();

    emit createFulfillmentTypeSignal(output);
    
}
void
SWGFulfillmentApi::deleteFulfillmentType(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/fulfillment/types/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFulfillmentApi::deleteFulfillmentTypeCallback);

    worker->execute(&input);
}

void
SWGFulfillmentApi::deleteFulfillmentTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteFulfillmentTypeSignal();
}
void
SWGFulfillmentApi::getFulfillmentType(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/fulfillment/types/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFulfillmentApi::getFulfillmentTypeCallback);

    worker->execute(&input);
}

void
SWGFulfillmentApi::getFulfillmentTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGFulfillmentType* output = static_cast<SWGFulfillmentType*>(create(json, QString("SWGFulfillmentType")));
    

    worker->deleteLater();

    emit getFulfillmentTypeSignal(output);
    
}
void
SWGFulfillmentApi::getFulfillmentTypes(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/fulfillment/types");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFulfillmentApi::getFulfillmentTypesCallback);

    worker->execute(&input);
}

void
SWGFulfillmentApi::getFulfillmentTypesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«FulfillmentType»* output = static_cast<SWGPageResource«FulfillmentType»*>(create(json, QString("SWGPageResource«FulfillmentType»")));
    

    worker->deleteLater();

    emit getFulfillmentTypesSignal(output);
    
}
void
SWGFulfillmentApi::updateFulfillmentType(qint32 id, SWGFulfillmentType fulfillment_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/store/fulfillment/types/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = fulfillment_type.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGFulfillmentApi::updateFulfillmentTypeCallback);

    worker->execute(&input);
}

void
SWGFulfillmentApi::updateFulfillmentTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateFulfillmentTypeSignal();
}
} /* namespace Swagger */
