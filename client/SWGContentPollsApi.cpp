/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGContentPollsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGContentPollsApi::SWGContentPollsApi() {}

SWGContentPollsApi::~SWGContentPollsApi() {}

SWGContentPollsApi::SWGContentPollsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGContentPollsApi::answerPoll(QString* id, QString* answer_key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/{id}/response");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = answer_key.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::answerPollCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::answerPollCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPollResponseResource* output = static_cast<SWGPollResponseResource*>(create(json, QString("SWGPollResponseResource")));
    

    worker->deleteLater();

    emit answerPollSignal(output);
    
}
void
SWGContentPollsApi::createPoll(SWGPollResource poll_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = poll_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::createPollCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::createPollCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPollResource* output = static_cast<SWGPollResource*>(create(json, QString("SWGPollResource")));
    

    worker->deleteLater();

    emit createPollSignal(output);
    
}
void
SWGContentPollsApi::createPollTemplate(SWGTemplateResource poll_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = poll_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::createPollTemplateCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::createPollTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createPollTemplateSignal(output);
    
}
void
SWGContentPollsApi::deletePoll(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::deletePollCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::deletePollCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deletePollSignal();
}
void
SWGContentPollsApi::deletePollTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::deletePollTemplateCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::deletePollTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deletePollTemplateSignal();
}
void
SWGContentPollsApi::getPoll(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::getPollCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::getPollCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPollResource* output = static_cast<SWGPollResource*>(create(json, QString("SWGPollResource")));
    

    worker->deleteLater();

    emit getPollSignal(output);
    
}
void
SWGContentPollsApi::getPollAnswer(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/{id}/response");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::getPollAnswerCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::getPollAnswerCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPollResponseResource* output = static_cast<SWGPollResponseResource*>(create(json, QString("SWGPollResponseResource")));
    

    worker->deleteLater();

    emit getPollAnswerSignal(output);
    
}
void
SWGContentPollsApi::getPollTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::getPollTemplateCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::getPollTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getPollTemplateSignal(output);
    
}
void
SWGContentPollsApi::getPollTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::getPollTemplatesCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::getPollTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getPollTemplatesSignal(output);
    
}
void
SWGContentPollsApi::getPolls(QString* filter_category, QString* filter_tagset, QString* filter_text, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_category"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_category)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_tagset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_tagset)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_text"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_text)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::getPollsCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::getPollsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«PollResource»* output = static_cast<SWGPageResource«PollResource»*>(create(json, QString("SWGPageResource«PollResource»")));
    

    worker->deleteLater();

    emit getPollsSignal(output);
    
}
void
SWGContentPollsApi::updatePoll(QString* id, SWGPollResource poll_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = poll_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::updatePollCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::updatePollCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPollResource* output = static_cast<SWGPollResource*>(create(json, QString("SWGPollResource")));
    

    worker->deleteLater();

    emit updatePollSignal(output);
    
}
void
SWGContentPollsApi::updatePollTemplate(QString* id, SWGTemplateResource poll_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/media/polls/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = poll_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGContentPollsApi::updatePollTemplateCallback);

    worker->execute(&input);
}

void
SWGContentPollsApi::updatePollTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updatePollTemplateSignal(output);
    
}
} /* namespace Swagger */
