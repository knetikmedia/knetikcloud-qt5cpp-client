/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreSubscriptionsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGStoreSubscriptionsApi::SWGStoreSubscriptionsApi() {}

SWGStoreSubscriptionsApi::~SWGStoreSubscriptionsApi() {}

SWGStoreSubscriptionsApi::SWGStoreSubscriptionsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStoreSubscriptionsApi::createSubscription(SWGSubscriptionResource subscription_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = subscription_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::createSubscriptionCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::createSubscriptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSubscriptionResource* output = static_cast<SWGSubscriptionResource*>(create(json, QString("SWGSubscriptionResource")));
    

    worker->deleteLater();

    emit createSubscriptionSignal(output);
    
}
void
SWGStoreSubscriptionsApi::createSubscriptionTemplate(SWGSubscriptionTemplateResource subscription_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = subscription_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::createSubscriptionTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::createSubscriptionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSubscriptionTemplateResource* output = static_cast<SWGSubscriptionTemplateResource*>(create(json, QString("SWGSubscriptionTemplateResource")));
    

    worker->deleteLater();

    emit createSubscriptionTemplateSignal(output);
    
}
void
SWGStoreSubscriptionsApi::deleteSubscription(qint32 id, QString* plan_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/{id}/plans/{plan_id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));
    QString plan_idPathParam("{"); plan_idPathParam.append("plan_id").append("}");
    fullPath.replace(plan_idPathParam, stringValue(plan_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::deleteSubscriptionCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::deleteSubscriptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSubscriptionSignal();
}
void
SWGStoreSubscriptionsApi::deleteSubscriptionTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::deleteSubscriptionTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::deleteSubscriptionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteSubscriptionTemplateSignal();
}
void
SWGStoreSubscriptionsApi::getSubscription(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::getSubscriptionCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::getSubscriptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSubscriptionResource* output = static_cast<SWGSubscriptionResource*>(create(json, QString("SWGSubscriptionResource")));
    

    worker->deleteLater();

    emit getSubscriptionSignal(output);
    
}
void
SWGStoreSubscriptionsApi::getSubscriptionTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::getSubscriptionTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::getSubscriptionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSubscriptionTemplateResource* output = static_cast<SWGSubscriptionTemplateResource*>(create(json, QString("SWGSubscriptionTemplateResource")));
    

    worker->deleteLater();

    emit getSubscriptionTemplateSignal(output);
    
}
void
SWGStoreSubscriptionsApi::getSubscriptionTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::getSubscriptionTemplatesCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::getSubscriptionTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«SubscriptionTemplateResource»* output = static_cast<SWGPageResource«SubscriptionTemplateResource»*>(create(json, QString("SWGPageResource«SubscriptionTemplateResource»")));
    

    worker->deleteLater();

    emit getSubscriptionTemplatesSignal(output);
    
}
void
SWGStoreSubscriptionsApi::getSubscriptions(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::getSubscriptionsCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::getSubscriptionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«SubscriptionResource»* output = static_cast<SWGPageResource«SubscriptionResource»*>(create(json, QString("SWGPageResource«SubscriptionResource»")));
    

    worker->deleteLater();

    emit getSubscriptionsSignal(output);
    
}
void
SWGStoreSubscriptionsApi::processSubscriptions() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/process");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::processSubscriptionsCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::processSubscriptionsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit processSubscriptionsSignal();
}
void
SWGStoreSubscriptionsApi::updateSubscription(qint32 id, SWGSubscriptionResource subscription_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = subscription_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::updateSubscriptionCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::updateSubscriptionCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit updateSubscriptionSignal();
}
void
SWGStoreSubscriptionsApi::updateSubscriptionTemplate(QString* id, SWGSubscriptionTemplateResource subscription_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/subscriptions/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = subscription_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreSubscriptionsApi::updateSubscriptionTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreSubscriptionsApi::updateSubscriptionTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSubscriptionTemplateResource* output = static_cast<SWGSubscriptionTemplateResource*>(create(json, QString("SWGSubscriptionTemplateResource")));
    

    worker->deleteLater();

    emit updateSubscriptionTemplateSignal(output);
    
}
} /* namespace Swagger */
