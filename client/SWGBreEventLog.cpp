/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBreEventLog.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBreEventLog::SWGBreEventLog(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBreEventLog::SWGBreEventLog() {
    init();
}

SWGBreEventLog::~SWGBreEventLog() {
    this->cleanup();
}

void
SWGBreEventLog::init() {
    customer = new QString("");
    event_id = 0L;
    event_name = new QString("");
    event_start_date = 0L;
    id = new QString("");
    parameters = NULL;
    rules = new QList<SWGBreRuleLog*>();
}

void
SWGBreEventLog::cleanup() {
    
    if(customer != nullptr) {
        delete customer;
    }


    if(event_name != nullptr) {
        delete event_name;
    }


    if(id != nullptr) {
        delete id;
    }

    if(parameters != nullptr) {
        delete parameters;
    }

    if(rules != nullptr) {
        QList<SWGBreRuleLog*>* arr = rules;
        foreach(SWGBreRuleLog* o, *arr) {
            delete o;
        }
        delete rules;
    }
}

SWGBreEventLog*
SWGBreEventLog::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBreEventLog::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&customer, pJson["customer"], "QString", "QString");
    ::Swagger::setValue(&event_id, pJson["event_id"], "qint64", "");
    ::Swagger::setValue(&event_name, pJson["event_name"], "QString", "QString");
    ::Swagger::setValue(&event_start_date, pJson["event_start_date"], "qint64", "");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&parameters, pJson["parameters"], "SWGObject", "SWGObject");
    
    ::Swagger::setValue(&rules, pJson["rules"], "QList", "SWGBreRuleLog");
    
}

QString
SWGBreEventLog::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBreEventLog::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("customer"), customer, obj, QString("QString"));

    obj->insert("event_id", QJsonValue(event_id));

    toJsonValue(QString("event_name"), event_name, obj, QString("QString"));

    obj->insert("event_start_date", QJsonValue(event_start_date));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("parameters"), parameters, obj, QString("SWGObject"));

    QJsonArray rulesJsonArray;
    toJsonArray((QList<void*>*)rules, &rulesJsonArray, "rules", "SWGBreRuleLog");
    obj->insert("rules", rulesJsonArray);

    return obj;
}

QString*
SWGBreEventLog::getCustomer() {
    return customer;
}
void
SWGBreEventLog::setCustomer(QString* customer) {
    this->customer = customer;
}

qint64
SWGBreEventLog::getEventId() {
    return event_id;
}
void
SWGBreEventLog::setEventId(qint64 event_id) {
    this->event_id = event_id;
}

QString*
SWGBreEventLog::getEventName() {
    return event_name;
}
void
SWGBreEventLog::setEventName(QString* event_name) {
    this->event_name = event_name;
}

qint64
SWGBreEventLog::getEventStartDate() {
    return event_start_date;
}
void
SWGBreEventLog::setEventStartDate(qint64 event_start_date) {
    this->event_start_date = event_start_date;
}

QString*
SWGBreEventLog::getId() {
    return id;
}
void
SWGBreEventLog::setId(QString* id) {
    this->id = id;
}

SWGObject*
SWGBreEventLog::getParameters() {
    return parameters;
}
void
SWGBreEventLog::setParameters(SWGObject* parameters) {
    this->parameters = parameters;
}

QList<SWGBreRuleLog*>*
SWGBreEventLog::getRules() {
    return rules;
}
void
SWGBreEventLog::setRules(QList<SWGBreRuleLog*>* rules) {
    this->rules = rules;
}



} /* namespace Swagger */

