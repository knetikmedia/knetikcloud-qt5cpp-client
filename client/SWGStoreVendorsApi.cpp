/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreVendorsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGStoreVendorsApi::SWGStoreVendorsApi() {}

SWGStoreVendorsApi::~SWGStoreVendorsApi() {}

SWGStoreVendorsApi::SWGStoreVendorsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGStoreVendorsApi::createVendor(SWGVendorResource vendor) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = vendor.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::createVendorCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::createVendorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVendorResource* output = static_cast<SWGVendorResource*>(create(json, QString("SWGVendorResource")));
    

    worker->deleteLater();

    emit createVendorSignal(output);
    
}
void
SWGStoreVendorsApi::createVendorTemplate(SWGItemTemplateResource vendor_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = vendor_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::createVendorTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::createVendorTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit createVendorTemplateSignal(output);
    
}
void
SWGStoreVendorsApi::deleteVendor(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::deleteVendorCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::deleteVendorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVendorSignal();
}
void
SWGStoreVendorsApi::deleteVendorTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::deleteVendorTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::deleteVendorTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteVendorTemplateSignal();
}
void
SWGStoreVendorsApi::getVendor(qint32 id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::getVendorCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::getVendorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVendorResource* output = static_cast<SWGVendorResource*>(create(json, QString("SWGVendorResource")));
    

    worker->deleteLater();

    emit getVendorSignal(output);
    
}
void
SWGStoreVendorsApi::getVendorTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::getVendorTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::getVendorTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit getVendorTemplateSignal(output);
    
}
void
SWGStoreVendorsApi::getVendorTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::getVendorTemplatesCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::getVendorTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«ItemTemplateResource»* output = static_cast<SWGPageResource«ItemTemplateResource»*>(create(json, QString("SWGPageResource«ItemTemplateResource»")));
    

    worker->deleteLater();

    emit getVendorTemplatesSignal(output);
    
}
void
SWGStoreVendorsApi::getVendors(QString* filter_name, qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter_name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_name)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::getVendorsCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::getVendorsCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«VendorResource»* output = static_cast<SWGPageResource«VendorResource»*>(create(json, QString("SWGPageResource«VendorResource»")));
    

    worker->deleteLater();

    emit getVendorsSignal(output);
    
}
void
SWGStoreVendorsApi::updateVendor(qint32 id, SWGVendorResource vendor) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = vendor.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::updateVendorCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::updateVendorCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGVendorResource* output = static_cast<SWGVendorResource*>(create(json, QString("SWGVendorResource")));
    

    worker->deleteLater();

    emit updateVendorSignal(output);
    
}
void
SWGStoreVendorsApi::updateVendorTemplate(QString* id, SWGItemTemplateResource vendor_template_resource) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/vendors/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = vendor_template_resource.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGStoreVendorsApi::updateVendorTemplateCallback);

    worker->execute(&input);
}

void
SWGStoreVendorsApi::updateVendorTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGItemTemplateResource* output = static_cast<SWGItemTemplateResource*>(create(json, QString("SWGItemTemplateResource")));
    

    worker->deleteLater();

    emit updateVendorTemplateSignal(output);
    
}
} /* namespace Swagger */
