/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUserAchievementResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGUserAchievementResource::SWGUserAchievementResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGUserAchievementResource::SWGUserAchievementResource() {
    init();
}

SWGUserAchievementResource::~SWGUserAchievementResource() {
    this->cleanup();
}

void
SWGUserAchievementResource::init() {
    achieved = false;
    achievement_name = new QString("");
    created_date = 0L;
    earned_date = 0L;
    updated_date = 0L;
}

void
SWGUserAchievementResource::cleanup() {
    

    if(achievement_name != nullptr) {
        delete achievement_name;
    }



}

SWGUserAchievementResource*
SWGUserAchievementResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUserAchievementResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&achieved, pJson["achieved"], "bool", "");
    ::Swagger::setValue(&achievement_name, pJson["achievement_name"], "QString", "QString");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    ::Swagger::setValue(&earned_date, pJson["earned_date"], "qint64", "");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
}

QString
SWGUserAchievementResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGUserAchievementResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("achieved", QJsonValue(achieved));

    toJsonValue(QString("achievement_name"), achievement_name, obj, QString("QString"));

    obj->insert("created_date", QJsonValue(created_date));

    obj->insert("earned_date", QJsonValue(earned_date));

    obj->insert("updated_date", QJsonValue(updated_date));

    return obj;
}

bool
SWGUserAchievementResource::getAchieved() {
    return achieved;
}
void
SWGUserAchievementResource::setAchieved(bool achieved) {
    this->achieved = achieved;
}

QString*
SWGUserAchievementResource::getAchievementName() {
    return achievement_name;
}
void
SWGUserAchievementResource::setAchievementName(QString* achievement_name) {
    this->achievement_name = achievement_name;
}

qint64
SWGUserAchievementResource::getCreatedDate() {
    return created_date;
}
void
SWGUserAchievementResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

qint64
SWGUserAchievementResource::getEarnedDate() {
    return earned_date;
}
void
SWGUserAchievementResource::setEarnedDate(qint64 earned_date) {
    this->earned_date = earned_date;
}

qint64
SWGUserAchievementResource::getUpdatedDate() {
    return updated_date;
}
void
SWGUserAchievementResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}



} /* namespace Swagger */

