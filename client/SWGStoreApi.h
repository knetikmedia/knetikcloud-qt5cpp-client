/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreApi_H_
#define _SWG_SWGStoreApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGBehaviorDefinitionResource.h"
#include "SWGPageResource«StoreItemTemplateResource».h"
#include "SWGPageResource«StoreItem».h"
#include "SWGResult.h"
#include "SWGStoreItem.h"
#include "SWGStoreItemTemplateResource.h"

#include <QObject>

namespace Swagger {

class SWGStoreApi: public QObject {
    Q_OBJECT

public:
    SWGStoreApi();
    SWGStoreApi(QString host, QString basePath);
    ~SWGStoreApi();

    QString host;
    QString basePath;

    void createItemTemplate(SWGStoreItemTemplateResource item_template_resource);
    void createStoreItem(bool cascade, SWGStoreItem store_item);
    void deleteItemTemplate(QString* id, QString* cascade);
    void deleteStoreItem(qint32 id);
    void getBehaviors();
    void getItemTemplate(QString* id);
    void getItemTemplates(qint32 size, qint32 page, QString* order);
    void getStore(qint32 limit, qint32 page, bool use_catalog, bool ignore_location, bool in_stock_only);
    void getStoreItem(qint32 id);
    void getStoreItems(QString* filter_name_search, QString* filter_unique_key, bool filter_published, bool filter_displayable, QString* filter_start, QString* filter_end, QString* filter_start_date, QString* filter_stop_date, QString* filter_sku, QString* filter_price, QString* filter_tag, QString* filter_items_by_type, QString* filter_bundled_skus, qint32 size, qint32 page, QString* order);
    void updateItemTemplate(QString* id, SWGStoreItemTemplateResource item_template_resource);
    void updateStoreItem(qint32 id, bool cascade, SWGStoreItem store_item);
    
private:
    void createItemTemplateCallback (HttpRequestWorker * worker);
    void createStoreItemCallback (HttpRequestWorker * worker);
    void deleteItemTemplateCallback (HttpRequestWorker * worker);
    void deleteStoreItemCallback (HttpRequestWorker * worker);
    void getBehaviorsCallback (HttpRequestWorker * worker);
    void getItemTemplateCallback (HttpRequestWorker * worker);
    void getItemTemplatesCallback (HttpRequestWorker * worker);
    void getStoreCallback (HttpRequestWorker * worker);
    void getStoreItemCallback (HttpRequestWorker * worker);
    void getStoreItemsCallback (HttpRequestWorker * worker);
    void updateItemTemplateCallback (HttpRequestWorker * worker);
    void updateStoreItemCallback (HttpRequestWorker * worker);
    
signals:
    void createItemTemplateSignal(SWGStoreItemTemplateResource* summary);
    void createStoreItemSignal(SWGStoreItem* summary);
    void deleteItemTemplateSignal();
    void deleteStoreItemSignal();
    void getBehaviorsSignal(QList<SWGBehaviorDefinitionResource*>* summary);
    void getItemTemplateSignal(SWGStoreItemTemplateResource* summary);
    void getItemTemplatesSignal(SWGPageResource«StoreItemTemplateResource»* summary);
    void getStoreSignal(SWGPageResource«StoreItem»* summary);
    void getStoreItemSignal(SWGStoreItem* summary);
    void getStoreItemsSignal(SWGPageResource«StoreItem»* summary);
    void updateItemTemplateSignal(SWGStoreItemTemplateResource* summary);
    void updateStoreItemSignal(SWGStoreItem* summary);
    
};
}
#endif
