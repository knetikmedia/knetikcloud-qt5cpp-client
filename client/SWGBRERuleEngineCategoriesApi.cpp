/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGBRERuleEngineCategoriesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGBRERuleEngineCategoriesApi::SWGBRERuleEngineCategoriesApi() {}

SWGBRERuleEngineCategoriesApi::~SWGBRERuleEngineCategoriesApi() {}

SWGBRERuleEngineCategoriesApi::SWGBRERuleEngineCategoriesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGBRERuleEngineCategoriesApi::createBRECategoryTemplate(SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/templates");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::createBRECategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::createBRECategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit createBRECategoryTemplateSignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::deleteBRECategoryTemplate(QString* id, QString* cascade) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cascade"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cascade)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::deleteBRECategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::deleteBRECategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit deleteBRECategoryTemplateSignal();
}
void
SWGBRERuleEngineCategoriesApi::getBRECategories(qint32 size, qint32 page) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::getBRECategoriesCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::getBRECategoriesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«BreCategoryResource»* output = static_cast<SWGPageResource«BreCategoryResource»*>(create(json, QString("SWGPageResource«BreCategoryResource»")));
    

    worker->deleteLater();

    emit getBRECategoriesSignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::getBRECategory(QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::getBRECategoryCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::getBRECategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreCategoryResource* output = static_cast<SWGBreCategoryResource*>(create(json, QString("SWGBreCategoryResource")));
    

    worker->deleteLater();

    emit getBRECategorySignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::getBRECategoryTemplate(QString* id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::getBRECategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::getBRECategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit getBRECategoryTemplateSignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::getBRECategoryTemplates(qint32 size, qint32 page, QString* order) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/templates");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("size"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::getBRECategoryTemplatesCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::getBRECategoryTemplatesCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGPageResource«TemplateResource»* output = static_cast<SWGPageResource«TemplateResource»*>(create(json, QString("SWGPageResource«TemplateResource»")));
    

    worker->deleteLater();

    emit getBRECategoryTemplatesSignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::updateBRECategory(QString* name, SWGBreCategoryResource category) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = category.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::updateBRECategoryCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::updateBRECategoryCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGBreCategoryResource* output = static_cast<SWGBreCategoryResource*>(create(json, QString("SWGBreCategoryResource")));
    

    worker->deleteLater();

    emit updateBRECategorySignal(output);
    
}
void
SWGBRERuleEngineCategoriesApi::updateBRECategoryTemplate(QString* id, SWGTemplateResource template) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bre/categories/templates/{id}");

    QString idPathParam("{"); idPathParam.append("id").append("}");
    fullPath.replace(idPathParam, stringValue(id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");

    
    QString output = template.asJson();
    input.request_body.append(output);
    


    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBRERuleEngineCategoriesApi::updateBRECategoryTemplateCallback);

    worker->execute(&input);
}

void
SWGBRERuleEngineCategoriesApi::updateBRECategoryTemplateCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGTemplateResource* output = static_cast<SWGTemplateResource*>(create(json, QString("SWGTemplateResource")));
    

    worker->deleteLater();

    emit updateBRECategoryTemplateSignal(output);
    
}
} /* namespace Swagger */
