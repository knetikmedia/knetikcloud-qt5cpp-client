/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGActivitiesApi_H_
#define _SWG_SWGActivitiesApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGActivityOccurrenceCreationFailure.h"
#include "SWGActivityOccurrenceResource.h"
#include "SWGActivityOccurrenceResults.h"
#include "SWGActivityResource.h"
#include "SWGPageResource«BareActivityResource».h"
#include "SWGResult.h"

#include <QObject>

namespace Swagger {

class SWGActivitiesApi: public QObject {
    Q_OBJECT

public:
    SWGActivitiesApi();
    SWGActivitiesApi(QString host, QString basePath);
    ~SWGActivitiesApi();

    QString host;
    QString basePath;

    void createActivity(SWGActivityResource activity_resource);
    void createActivityOccurrence(bool test, SWGActivityOccurrenceResource activity_occurrence_resource);
    void deleteActivity(qint64 id);
    void getActivities(bool filter_template, QString* filter_name, QString* filter_id, qint32 size, qint32 page, QString* order);
    void getActivity(qint64 id);
    void setActivityOccurrenceResults(qint64 activity_occurrence_id, SWGActivityOccurrenceResults activity_occurrence_results);
    void updateActivity(qint64 id, SWGActivityResource activity_resource);
    void updateActivityOccurrence(qint64 activity_occurrence_id, QString* activity_cccurrence_status);
    
private:
    void createActivityCallback (HttpRequestWorker * worker);
    void createActivityOccurrenceCallback (HttpRequestWorker * worker);
    void deleteActivityCallback (HttpRequestWorker * worker);
    void getActivitiesCallback (HttpRequestWorker * worker);
    void getActivityCallback (HttpRequestWorker * worker);
    void setActivityOccurrenceResultsCallback (HttpRequestWorker * worker);
    void updateActivityCallback (HttpRequestWorker * worker);
    void updateActivityOccurrenceCallback (HttpRequestWorker * worker);
    
signals:
    void createActivitySignal(SWGActivityResource* summary);
    void createActivityOccurrenceSignal(SWGActivityOccurrenceResource* summary);
    void deleteActivitySignal();
    void getActivitiesSignal(SWGPageResource«BareActivityResource»* summary);
    void getActivitySignal(SWGActivityResource* summary);
    void setActivityOccurrenceResultsSignal(SWGActivityOccurrenceResults* summary);
    void updateActivitySignal(SWGActivityResource* summary);
    void updateActivityOccurrenceSignal();
    
};
}
#endif
