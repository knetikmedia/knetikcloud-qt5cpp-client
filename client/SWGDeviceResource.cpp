/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGDeviceResource.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGDeviceResource::SWGDeviceResource(QString* json) {
    init();
    this->fromJson(*json);
}

SWGDeviceResource::SWGDeviceResource() {
    init();
}

SWGDeviceResource::~SWGDeviceResource() {
    this->cleanup();
}

void
SWGDeviceResource::init() {
    authorization = new QString("");
    condition = new QString("");
    created_date = 0L;
    data = new QMap<QString, QString>();
    description = new QString("");
    device_type = new QString("");
    id = 0;
    location = new QString("");
    mac_address = new QString("");
    make = new QString("");
    model = new QString("");
    name = new QString("");
    os = new QString("");
    serial = new QString("");
    status = new QString("");
    updated_date = 0L;
    user = new SWGSimpleUserResource();
}

void
SWGDeviceResource::cleanup() {
    
    if(authorization != nullptr) {
        delete authorization;
    }

    if(condition != nullptr) {
        delete condition;
    }


    if(data != nullptr) {
        QList<QString*>* arr = data;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete data;
    }

    if(description != nullptr) {
        delete description;
    }

    if(device_type != nullptr) {
        delete device_type;
    }


    if(location != nullptr) {
        delete location;
    }

    if(mac_address != nullptr) {
        delete mac_address;
    }

    if(make != nullptr) {
        delete make;
    }

    if(model != nullptr) {
        delete model;
    }

    if(name != nullptr) {
        delete name;
    }

    if(os != nullptr) {
        delete os;
    }

    if(serial != nullptr) {
        delete serial;
    }

    if(status != nullptr) {
        delete status;
    }


    if(user != nullptr) {
        delete user;
    }
}

SWGDeviceResource*
SWGDeviceResource::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGDeviceResource::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&authorization, pJson["authorization"], "QString", "QString");
    ::Swagger::setValue(&condition, pJson["condition"], "QString", "QString");
    ::Swagger::setValue(&created_date, pJson["created_date"], "qint64", "");
    
    ::Swagger::setValue(&data, pJson["data"], "QMap", "QString");
    
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&device_type, pJson["device_type"], "QString", "QString");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&location, pJson["location"], "QString", "QString");
    ::Swagger::setValue(&mac_address, pJson["mac_address"], "QString", "QString");
    ::Swagger::setValue(&make, pJson["make"], "QString", "QString");
    ::Swagger::setValue(&model, pJson["model"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&os, pJson["os"], "QString", "QString");
    ::Swagger::setValue(&serial, pJson["serial"], "QString", "QString");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    ::Swagger::setValue(&updated_date, pJson["updated_date"], "qint64", "");
    ::Swagger::setValue(&user, pJson["user"], "SWGSimpleUserResource", "SWGSimpleUserResource");
}

QString
SWGDeviceResource::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGDeviceResource::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("authorization"), authorization, obj, QString("QString"));

    toJsonValue(QString("condition"), condition, obj, QString("QString"));

    obj->insert("created_date", QJsonValue(created_date));

    QJsonArray dataJsonArray;
    toJsonArray((QList<void*>*)data, &dataJsonArray, "data", "QString");
    obj->insert("data", dataJsonArray);

    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("device_type"), device_type, obj, QString("QString"));

    obj->insert("id", QJsonValue(id));

    toJsonValue(QString("location"), location, obj, QString("QString"));

    toJsonValue(QString("mac_address"), mac_address, obj, QString("QString"));

    toJsonValue(QString("make"), make, obj, QString("QString"));

    toJsonValue(QString("model"), model, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("os"), os, obj, QString("QString"));

    toJsonValue(QString("serial"), serial, obj, QString("QString"));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    obj->insert("updated_date", QJsonValue(updated_date));

    toJsonValue(QString("user"), user, obj, QString("SWGSimpleUserResource"));

    return obj;
}

QString*
SWGDeviceResource::getAuthorization() {
    return authorization;
}
void
SWGDeviceResource::setAuthorization(QString* authorization) {
    this->authorization = authorization;
}

QString*
SWGDeviceResource::getCondition() {
    return condition;
}
void
SWGDeviceResource::setCondition(QString* condition) {
    this->condition = condition;
}

qint64
SWGDeviceResource::getCreatedDate() {
    return created_date;
}
void
SWGDeviceResource::setCreatedDate(qint64 created_date) {
    this->created_date = created_date;
}

QMap<QString, QString*>*
SWGDeviceResource::getData() {
    return data;
}
void
SWGDeviceResource::setData(QMap<QString, QString*>* data) {
    this->data = data;
}

QString*
SWGDeviceResource::getDescription() {
    return description;
}
void
SWGDeviceResource::setDescription(QString* description) {
    this->description = description;
}

QString*
SWGDeviceResource::getDeviceType() {
    return device_type;
}
void
SWGDeviceResource::setDeviceType(QString* device_type) {
    this->device_type = device_type;
}

qint32
SWGDeviceResource::getId() {
    return id;
}
void
SWGDeviceResource::setId(qint32 id) {
    this->id = id;
}

QString*
SWGDeviceResource::getLocation() {
    return location;
}
void
SWGDeviceResource::setLocation(QString* location) {
    this->location = location;
}

QString*
SWGDeviceResource::getMacAddress() {
    return mac_address;
}
void
SWGDeviceResource::setMacAddress(QString* mac_address) {
    this->mac_address = mac_address;
}

QString*
SWGDeviceResource::getMake() {
    return make;
}
void
SWGDeviceResource::setMake(QString* make) {
    this->make = make;
}

QString*
SWGDeviceResource::getModel() {
    return model;
}
void
SWGDeviceResource::setModel(QString* model) {
    this->model = model;
}

QString*
SWGDeviceResource::getName() {
    return name;
}
void
SWGDeviceResource::setName(QString* name) {
    this->name = name;
}

QString*
SWGDeviceResource::getOs() {
    return os;
}
void
SWGDeviceResource::setOs(QString* os) {
    this->os = os;
}

QString*
SWGDeviceResource::getSerial() {
    return serial;
}
void
SWGDeviceResource::setSerial(QString* serial) {
    this->serial = serial;
}

QString*
SWGDeviceResource::getStatus() {
    return status;
}
void
SWGDeviceResource::setStatus(QString* status) {
    this->status = status;
}

qint64
SWGDeviceResource::getUpdatedDate() {
    return updated_date;
}
void
SWGDeviceResource::setUpdatedDate(qint64 updated_date) {
    this->updated_date = updated_date;
}

SWGSimpleUserResource*
SWGDeviceResource::getUser() {
    return user;
}
void
SWGDeviceResource::setUser(SWGSimpleUserResource* user) {
    this->user = user;
}



} /* namespace Swagger */

